{
    "sourceFile": "client/docs/UNIFIED_COMPONENTS_GUIDE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752395291940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752395291940,
            "name": "Commit-0",
            "content": "# 统一图片处理组件系统使用指南\n\n## 概述\n\n本系统提供了一套统一的图片处理组件，采用换脸面板的设计风格，实现了组件描述与模板的分离，支持单图和多图上传，为后续自定义化做好了准备。\n\n## 核心组件\n\n### 1. UnifiedImageProcessingTemplate\n统一的图片处理模板组件，支持各种图片处理功能。\n\n**特性：**\n- 基于配置驱动的界面生成\n- 支持图片上传和文本输入\n- 统一的处理流程和状态管理\n- 可配置的结果展示方式\n\n**使用方式：**\n```vue\n<UnifiedImageProcessingTemplate\n  function-id=\"clothes-swap\"\n  :title-icon=\"UndressWomanIcon\"\n  title-icon-color=\"var(--van-primary-color)\"\n  :is-processing=\"isLoading\"\n  :progress=\"progressPercent\"\n  :result-data=\"resultImage\"\n  @process=\"processImage\"\n  @upload-change=\"handleUploadChange\"\n/>\n```\n\n### 2. UnifiedImageUploadPanel\n统一的图片上传面板，采用换脸面板的设计风格。\n\n**特性：**\n- 支持单图和多图上传\n- 统一的状态显示和提示信息\n- 可配置的上传参数\n- 响应式设计\n\n### 3. SingleImageUpload\n单图上传子组件。\n\n**特性：**\n- 拖拽上传支持\n- 图片预览和编辑\n- 文件信息显示\n- 错误处理\n\n### 4. MultiImageUpload\n多图上传子组件。\n\n**特性：**\n- 网格布局显示\n- 批量操作支持\n- 拖拽排序（可选）\n- 数量限制管理\n\n## 配置系统\n\n### 功能配置文件\n位置：`src/config/imageProcessingConfigs.js`\n\n**配置结构：**\n```javascript\n{\n  id: 'clothes-swap',\n  title: '一键褪衣',\n  description: '上传人物照片，AI智能移除服装',\n  processButtonText: '开始处理',\n  processingTitle: '正在处理图片...',\n  processingDescription: '请耐心等待，处理时间可能需要几分钟',\n\n  // 上传面板配置\n  uploadPanels: [\n    {\n      id: 'main-image',\n      title: '人物照片',\n      icon: 'photograph',\n      iconColor: 'var(--van-primary-color)',\n      uploadType: 'single',\n      minCount: 1,\n      maxCount: 1,\n      uploadText: '选择人物照片',\n      tips: ['支持 JPG、PNG 格式', '建议尺寸 512x512 以上']\n    }\n  ],\n\n\n\n  // 结果配置\n  resultConfig: {\n    showComparison: true,\n    comparisonType: 'slider',\n    downloadEnabled: true,\n    resetEnabled: true\n  }\n}\n```\n\n### 配置类型\n\n**上传类型：**\n- `single`: 单图上传\n- `multi`: 多图上传\n\n**对比类型：**\n- `slider`: 滑动对比\n- `side-by-side`: 并排对比\n- `none`: 无对比\n\n## 使用示例\n\n### 1. 一键褪衣功能\n```vue\n<template>\n  <UnifiedImageProcessingTemplate\n    function-id=\"clothes-swap\"\n    :title-icon=\"UndressWomanIcon\"\n    :is-processing=\"isLoading\"\n    :result-data=\"resultImage\"\n    @process=\"processImage\"\n    @upload-change=\"handleUploadChange\"\n  />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { UnifiedImageProcessingTemplate } from '../components/mobile'\nimport { UndressWomanIcon } from '../components/icons'\n\nconst isLoading = ref(false)\nconst resultImage = ref(null)\nconst selectedImage = ref(null)\n\nconst handleUploadChange = (panelId, data) => {\n  if (panelId === 'main-image') {\n    selectedImage.value = data\n  }\n}\n\nconst processImage = async () => {\n  // 处理逻辑\n}\n</script>\n```\n\n### 2. 极速换脸功能\n```vue\n<template>\n  <UnifiedImageProcessingTemplate\n    function-id=\"face-swap\"\n    :title-icon=\"FaceSwapIcon\"\n    :is-processing=\"isLoading\"\n    :result-data=\"resultImage\"\n    @process=\"processImages\"\n    @upload-change=\"handleUploadChange\"\n  />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { UnifiedImageProcessingTemplate } from '../components/mobile'\nimport { FaceSwapIcon } from '../components/icons'\n\nconst isLoading = ref(false)\nconst resultImage = ref(null)\nconst facePhotos = ref([])\nconst targetImage = ref(null)\n\nconst handleUploadChange = (panelId, data) => {\n  if (panelId === 'face-photos') {\n    facePhotos.value = data\n  } else if (panelId === 'target-image') {\n    targetImage.value = data\n  }\n}\n\nconst processImages = async () => {\n  // 处理逻辑\n}\n</script>\n```\n\n### 3. 文生图功能\n```vue\n<template>\n  <UnifiedImageProcessingTemplate\n    function-id=\"text-to-image\"\n    title-icon-name=\"photo-o\"\n    :is-processing=\"isLoading\"\n    :result-data=\"resultImage\"\n    @process=\"generateImage\"\n    @input-change=\"handleInputChange\"\n  />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { UnifiedImageProcessingTemplate } from '../components/mobile'\n\nconst isLoading = ref(false)\nconst resultImage = ref(null)\nconst prompt = ref('')\n\nconst handleInputChange = (panelId, data) => {\n  if (panelId === 'text-prompt') {\n    prompt.value = data\n  }\n}\n\nconst generateImage = async () => {\n  // 处理逻辑\n}\n</script>\n```\n\n## 自定义配置\n\n### 添加新功能\n1. 在 `imageProcessingConfigs.js` 中添加新的配置\n2. 创建对应的Vue组件\n3. 实现处理逻辑\n\n### 修改现有功能\n1. 更新配置文件中的相应配置\n2. 如需要，调整组件逻辑\n\n### 后台管理集成\n配置系统已为后台管理做好准备：\n- 提供了 `fetchImageProcessingConfigFromAPI()` 函数\n- 支持动态配置更新\n- 包含管理员相关字段\n\n## 最佳实践\n\n1. **配置优先**：尽量通过配置而不是代码来控制界面\n2. **组件复用**：使用统一组件而不是重复开发\n3. **状态管理**：合理使用模板提供的状态管理\n4. **错误处理**：实现完善的错误处理机制\n5. **性能优化**：注意图片处理的性能影响\n\n## 迁移指南\n\n### 从旧组件迁移\n1. 替换组件导入\n2. 更新配置格式\n3. 调整事件处理\n4. 测试功能完整性\n\n### 注意事项\n- 保持向后兼容性\n- 逐步迁移，避免一次性大改\n- 充分测试各种场景\n\n## 故障排除\n\n### 常见问题\n1. **配置加载失败**：检查配置文件格式和API连接\n2. **上传失败**：检查文件大小和格式限制\n3. **样式异常**：检查CSS变量和主题设置\n4. **功能异常**：检查事件处理和数据流\n\n### 调试技巧\n- 使用浏览器开发者工具\n- 检查控制台错误信息\n- 验证配置数据结构\n- 测试各种输入场景\n"
        }
    ]
}