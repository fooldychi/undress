{
    "sourceFile": "client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752294877079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752295214288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,18 @@\n :root {\n   /* 主色调 */\n   --primary-color: #6366f1;\n   --secondary-color: #8b5cf6;\n-\n+  \n   /* 背景色 */\n   --bg-primary: #0f0f23;\n   --bg-secondary: #1a1a2e;\n   --bg-card: #16213e;\n-\n+  \n   /* 文字颜色 */\n   --text-color: #e2e8f0;\n   --text-light: #94a3b8;\n-\n+  \n   /* 边框和阴影 */\n   --border-color: #334155;\n   --border-light: #475569;\n   --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.3);\n@@ -59,21 +59,15 @@\n \n ### 2.1 图标分类标准\n 严格按功能分类使用图标，确保语义一致性：\n \n-| 功能类别 | 图标名称 | 使用场景 | 对应内容 |\n-|----------|----------|----------|----------|\n-| **积分相关** | `diamond-o` | TopNavigation积分显示、积分卡片 | 我的积分、积分信息、积分状态 |\n-| **等级卡相关** | `credit-pay` | 等级卡列表、等级卡标题 | 我的等级卡、等级卡管理、卡片绑定 |\n-| **用户相关** | `user-o` | 用户头像、个人中心标题 | 用户信息、个人中心、用户管理 |\n-| **记录相关** | `records` | 积分记录、操作历史 | 最近记录、积分记录、操作历史 |\n+| 功能类别 | 图标名称 | 使用场景 |\n+|----------|----------|----------|\n+| **积分相关** | `diamond-o` | TopNavigation积分显示、积分卡片 |\n+| **等级卡相关** | `credit-pay` | 等级卡列表、等级卡标题 |\n+| **用户相关** | `user-o` | 用户头像、个人中心标题 |\n+| **记录相关** | `records` | 积分记录、操作历史 |\n \n-### 2.2 图标与内容映射规范\n-- **积分功能** → `diamond-o` + \"我的积分\"/\"积分信息\"\n-- **等级卡功能** → `credit-pay` + \"我的等级卡\"/\"等级卡管理\"\n-- **用户功能** → `user-o` + \"用户信息\"/\"个人中心\"\n-- **记录功能** → `records` + \"最近记录\"/\"积分记录\"\n-\n ### 2.2 图标使用示例\n ```vue\n <!-- 积分显示 -->\n <van-icon name=\"diamond-o\" size=\"24\" color=\"var(--primary-color)\" />\n@@ -133,13 +127,13 @@\n @media (max-width: 768px) {\n   .feature-content {\n     padding: 24px;\n   }\n-\n+  \n   .feature-title {\n     font-size: 1.3rem;\n   }\n-\n+  \n   .points-grid {\n     gap: 16px;\n     padding: 16px;\n   }\n@@ -209,12 +203,12 @@\n  */\n const handleAuthSuccess = (userData) => {\n   // 立即更新用户信息\n   userInfo.value = userData.user\n-\n+  \n   // 同步积分状态\n   pointsStatus.isLoggedIn = true\n-\n+  \n   // 延迟更新积分数据，确保状态已同步\n   setTimeout(() => {\n     updatePointsStatus()\n   }, 100)\n@@ -243,9 +237,9 @@\n const loadUserData = async () => {\n   try {\n     loading.value = true\n     const response = await userApi.getUserInfo()\n-\n+    \n     if (response.success) {\n       userInfo.value = response.data\n     } else {\n       Toast.fail(response.message || '获取用户信息失败')\n"
                },
                {
                    "date": 1752296059636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,18 @@\n :root {\n   /* 主色调 */\n   --primary-color: #6366f1;\n   --secondary-color: #8b5cf6;\n-  \n+\n   /* 背景色 */\n   --bg-primary: #0f0f23;\n   --bg-secondary: #1a1a2e;\n   --bg-card: #16213e;\n-  \n+\n   /* 文字颜色 */\n   --text-color: #e2e8f0;\n   --text-light: #94a3b8;\n-  \n+\n   /* 边框和阴影 */\n   --border-color: #334155;\n   --border-light: #475569;\n   --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.3);\n@@ -59,16 +59,22 @@\n \n ### 2.1 图标分类标准\n 严格按功能分类使用图标，确保语义一致性：\n \n-| 功能类别 | 图标名称 | 使用场景 |\n-|----------|----------|----------|\n-| **积分相关** | `diamond-o` | TopNavigation积分显示、积分卡片 |\n-| **等级卡相关** | `credit-pay` | 等级卡列表、等级卡标题 |\n-| **用户相关** | `user-o` | 用户头像、个人中心标题 |\n-| **记录相关** | `records` | 积分记录、操作历史 |\n+| 功能类别 | 图标名称 | 使用场景 | 对应内容 |\n+|----------|----------|----------|----------|\n+| **积分相关** | `diamond-o` | TopNavigation积分显示、积分卡片 | 我的积分、积分信息、积分状态 |\n+| **等级卡相关** | `credit-pay` | 等级卡列表、等级卡标题 | 我的等级卡、等级卡管理、卡片绑定 |\n+| **用户相关** | `user-o` | 用户头像、个人中心标题 | 用户信息、个人中心、用户管理 |\n+| **记录相关** | `records` | 积分记录、操作历史 | 最近记录、积分记录、操作历史 |\n \n-### 2.2 图标使用示例\n+### 2.2 图标与内容映射规范\n+- **积分功能** → `diamond-o` + \"我的积分\"/\"积分信息\"\n+- **等级卡功能** → `credit-pay` + \"我的等级卡\"/\"等级卡管理\"\n+- **用户功能** → `user-o` + \"用户信息\"/\"个人中心\"\n+- **记录功能** → `records` + \"最近记录\"/\"积分记录\"\n+\n+### 2.3 图标使用示例\n ```vue\n <!-- 积分显示 -->\n <van-icon name=\"diamond-o\" size=\"24\" color=\"var(--primary-color)\" />\n \n@@ -127,13 +133,13 @@\n @media (max-width: 768px) {\n   .feature-content {\n     padding: 24px;\n   }\n-  \n+\n   .feature-title {\n     font-size: 1.3rem;\n   }\n-  \n+\n   .points-grid {\n     gap: 16px;\n     padding: 16px;\n   }\n@@ -203,12 +209,12 @@\n  */\n const handleAuthSuccess = (userData) => {\n   // 立即更新用户信息\n   userInfo.value = userData.user\n-  \n+\n   // 同步积分状态\n   pointsStatus.isLoggedIn = true\n-  \n+\n   // 延迟更新积分数据，确保状态已同步\n   setTimeout(() => {\n     updatePointsStatus()\n   }, 100)\n@@ -237,9 +243,9 @@\n const loadUserData = async () => {\n   try {\n     loading.value = true\n     const response = await userApi.getUserInfo()\n-    \n+\n     if (response.success) {\n       userInfo.value = response.data\n     } else {\n       Toast.fail(response.message || '获取用户信息失败')\n"
                },
                {
                    "date": 1752296100233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,12 +116,19 @@\n ## 4. 用户体验设计\n \n ### 4.1 布局原则\n - **整行布局**：重要信息卡片占据整行，确保信息完整展示\n+- **统一布局**：等级卡与最近记录使用相同的整行布局，不分列显示\n - **信息层次**：按重要性排序，积分信息居中突出显示\n - **视觉焦点**：使用颜色、大小、位置引导用户注意力\n - **简洁性**：删除冗余元素，保持界面简洁\n \n+### 4.2 个人中心布局规范\n+- **等级卡布局**：使用整行布局，每张卡片占据完整宽度\n+- **记录布局**：与等级卡保持一致的整行布局风格\n+- **卡片间距**：统一的间距和圆角设计\n+- **响应式适配**：确保在不同屏幕尺寸下的一致性\n+\n ### 4.2 交互设计\n - **即时反馈**：所有用户操作都应有即时的视觉反馈\n - **状态同步**：登录状态变化应立即同步到所有相关组件\n - **错误处理**：友好的错误提示和恢复机制\n"
                },
                {
                    "date": 1752296217134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n - **记录布局**：与等级卡保持一致的整行布局风格\n - **卡片间距**：统一的间距和圆角设计\n - **响应式适配**：确保在不同屏幕尺寸下的一致性\n \n-### 4.2 交互设计\n+### 4.3 交互设计\n - **即时反馈**：所有用户操作都应有即时的视觉反馈\n - **状态同步**：登录状态变化应立即同步到所有相关组件\n - **错误处理**：友好的错误提示和恢复机制\n - **加载状态**：长时间操作显示加载指示器\n"
                },
                {
                    "date": 1752296230203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n - **状态同步**：登录状态变化应立即同步到所有相关组件\n - **错误处理**：友好的错误提示和恢复机制\n - **加载状态**：长时间操作显示加载指示器\n \n-### 4.3 响应式设计\n+### 4.4 响应式设计\n ```css\n /* 移动端适配 */\n @media (max-width: 768px) {\n   .feature-content {\n"
                }
            ],
            "date": 1752294877079,
            "name": "Commit-0",
            "content": "# 前端开发原则\n\n## 概述\n\n本文档定义了项目前端开发的核心原则和规范，确保代码质量、用户体验和团队协作的一致性。\n\n## 1. 设计系统与风格统一\n\n### 1.1 CSS变量系统\n使用统一的CSS变量确保整个应用的视觉一致性：\n\n```css\n:root {\n  /* 主色调 */\n  --primary-color: #6366f1;\n  --secondary-color: #8b5cf6;\n\n  /* 背景色 */\n  --bg-primary: #0f0f23;\n  --bg-secondary: #1a1a2e;\n  --bg-card: #16213e;\n\n  /* 文字颜色 */\n  --text-color: #e2e8f0;\n  --text-light: #94a3b8;\n\n  /* 边框和阴影 */\n  --border-color: #334155;\n  --border-light: #475569;\n  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.3);\n  --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.4);\n}\n```\n\n### 1.2 统一的卡片样式\n所有功能卡片使用统一的 `feature-card` 样式：\n\n```css\n.feature-card {\n  background: var(--bg-card);\n  border: 1px solid var(--border-color);\n  border-radius: 20px;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  overflow: hidden;\n  position: relative;\n}\n\n.feature-content {\n  padding: 32px;\n  text-align: center;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n```\n\n## 2. 图标使用规范\n\n### 2.1 图标分类标准\n严格按功能分类使用图标，确保语义一致性：\n\n| 功能类别 | 图标名称 | 使用场景 | 对应内容 |\n|----------|----------|----------|----------|\n| **积分相关** | `diamond-o` | TopNavigation积分显示、积分卡片 | 我的积分、积分信息、积分状态 |\n| **等级卡相关** | `credit-pay` | 等级卡列表、等级卡标题 | 我的等级卡、等级卡管理、卡片绑定 |\n| **用户相关** | `user-o` | 用户头像、个人中心标题 | 用户信息、个人中心、用户管理 |\n| **记录相关** | `records` | 积分记录、操作历史 | 最近记录、积分记录、操作历史 |\n\n### 2.2 图标与内容映射规范\n- **积分功能** → `diamond-o` + \"我的积分\"/\"积分信息\"\n- **等级卡功能** → `credit-pay` + \"我的等级卡\"/\"等级卡管理\"\n- **用户功能** → `user-o` + \"用户信息\"/\"个人中心\"\n- **记录功能** → `records` + \"最近记录\"/\"积分记录\"\n\n### 2.2 图标使用示例\n```vue\n<!-- 积分显示 -->\n<van-icon name=\"diamond-o\" size=\"24\" color=\"var(--primary-color)\" />\n\n<!-- 等级卡 -->\n<van-icon name=\"credit-pay\" size=\"32\" color=\"var(--primary-color)\" />\n\n<!-- 用户信息 -->\n<van-icon name=\"user-o\" size=\"48\" color=\"var(--primary-color)\" />\n```\n\n## 3. 组件化开发原则\n\n### 3.1 组件设计原则\n- **单一职责**：每个组件只负责一个明确的功能\n- **可复用性**：组件应该在不同场景下可复用\n- **统一接口**：相似功能的组件应有一致的API设计\n- **响应式设计**：所有组件都应支持响应式布局\n\n### 3.2 核心组件规范\n\n#### TopNavigation 组件\n- 固定在页面顶部\n- 包含积分显示、用户登录状态\n- 使用 `diamond-o` 图标显示积分\n- 提供统一的登录/注册弹窗\n\n#### 功能卡片组件\n- 使用统一的 `feature-card` 样式\n- 包含图标、标题、描述、操作按钮\n- 支持悬停效果和点击交互\n- 响应式布局适配\n\n### 3.3 状态管理\n- 使用 Vue 3 Composition API\n- 响应式数据使用 `ref` 和 `reactive`\n- 复杂状态逻辑封装为 composables\n- 避免深层嵌套的状态结构\n\n## 4. 用户体验设计\n\n### 4.1 布局原则\n- **整行布局**：重要信息卡片占据整行，确保信息完整展示\n- **信息层次**：按重要性排序，积分信息居中突出显示\n- **视觉焦点**：使用颜色、大小、位置引导用户注意力\n- **简洁性**：删除冗余元素，保持界面简洁\n\n### 4.2 交互设计\n- **即时反馈**：所有用户操作都应有即时的视觉反馈\n- **状态同步**：登录状态变化应立即同步到所有相关组件\n- **错误处理**：友好的错误提示和恢复机制\n- **加载状态**：长时间操作显示加载指示器\n\n### 4.3 响应式设计\n```css\n/* 移动端适配 */\n@media (max-width: 768px) {\n  .feature-content {\n    padding: 24px;\n  }\n\n  .feature-title {\n    font-size: 1.3rem;\n  }\n\n  .points-grid {\n    gap: 16px;\n    padding: 16px;\n  }\n}\n```\n\n## 5. 代码质量标准\n\n### 5.1 Vue 组件结构\n```vue\n<template>\n  <!-- 模板内容 -->\n</template>\n\n<script setup>\n// 导入\nimport { ref, computed, onMounted } from 'vue'\n\n// Props 定义\nconst props = defineProps({\n  // props 定义\n})\n\n// Emits 定义\nconst emit = defineEmits(['event-name'])\n\n// 响应式数据\nconst data = ref(null)\n\n// 计算属性\nconst computedValue = computed(() => {\n  // 计算逻辑\n})\n\n// 方法\nconst handleAction = () => {\n  // 方法实现\n}\n\n// 生命周期\nonMounted(() => {\n  // 初始化逻辑\n})\n\n// 暴露给父组件的方法\ndefineExpose({\n  handleAction\n})\n</script>\n\n<style scoped>\n/* 组件样式 */\n</style>\n```\n\n### 5.2 命名规范\n- **组件名称**：使用 PascalCase，如 `TopNavigation`\n- **文件名称**：与组件名称一致\n- **CSS类名**：使用 kebab-case，如 `feature-card`\n- **变量名称**：使用 camelCase，如 `userInfo`\n\n### 5.3 注释规范\n```javascript\n/**\n * 处理用户登录成功后的状态同步\n * @param {Object} userData - 用户数据\n */\nconst handleAuthSuccess = (userData) => {\n  // 立即更新用户信息\n  userInfo.value = userData.user\n\n  // 同步积分状态\n  pointsStatus.isLoggedIn = true\n\n  // 延迟更新积分数据，确保状态已同步\n  setTimeout(() => {\n    updatePointsStatus()\n  }, 100)\n}\n```\n\n## 6. 性能优化\n\n### 6.1 组件优化\n- 使用 `v-show` 而非 `v-if` 处理频繁切换的元素\n- 合理使用 `computed` 缓存计算结果\n- 避免在模板中使用复杂的表达式\n- 使用 `defineAsyncComponent` 懒加载大型组件\n\n### 6.2 资源优化\n- 图片使用适当的格式和尺寸\n- CSS 使用变量减少重复代码\n- JavaScript 模块按需导入\n- 避免不必要的依赖\n\n## 7. 错误处理与调试\n\n### 7.1 错误处理策略\n```javascript\n// API 调用错误处理\nconst loadUserData = async () => {\n  try {\n    loading.value = true\n    const response = await userApi.getUserInfo()\n\n    if (response.success) {\n      userInfo.value = response.data\n    } else {\n      Toast.fail(response.message || '获取用户信息失败')\n    }\n  } catch (error) {\n    console.error('获取用户信息失败:', error)\n    Toast.fail('网络错误，请稍后重试')\n  } finally {\n    loading.value = false\n  }\n}\n```\n\n### 7.2 调试信息\n- 使用有意义的 console.log 输出\n- 包含 emoji 标识符便于快速定位\n- 记录关键状态变化和API调用\n\n```javascript\nconsole.log('🔄 更新积分状态，当前登录状态:', isLoggedIn.value)\nconsole.log('✅ 积分状态更新成功:', newStatus)\nconsole.log('❌ 未登录，设置默认积分状态')\n```\n\n## 8. 安全性考虑\n\n### 8.1 认证与授权\n- 所有敏感操作都需要登录验证\n- Token 存储在 localStorage 中\n- 页面刷新时自动恢复登录状态\n- 未登录时拦截需要权限的操作\n\n### 8.2 数据验证\n- 前端进行基础数据验证\n- 后端进行完整的数据验证\n- 用户输入进行适当的转义和过滤\n\n## 9. 测试策略\n\n### 9.1 组件测试\n- 每个组件都应有对应的测试用例\n- 测试组件的渲染、交互和状态变化\n- 使用 Vue Test Utils 进行单元测试\n\n### 9.2 集成测试\n- 测试组件间的交互\n- 测试路由跳转和状态同步\n- 测试API调用和错误处理\n\n## 10. 部署与维护\n\n### 10.1 构建优化\n- 使用 Vite 进行快速构建\n- 启用代码分割和懒加载\n- 压缩和优化静态资源\n\n### 10.2 版本管理\n- 使用语义化版本号\n- 维护详细的更新日志\n- 向后兼容性考虑\n\n---\n\n**注意：** 本文档是活文档，随着项目发展会持续更新。所有开发人员都应遵循这些原则，确保代码质量和用户体验的一致性。\n"
        }
    ]
}