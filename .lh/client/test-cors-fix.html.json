{
    "sourceFile": "client/test-cors-fix.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752550658874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752550658874,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CORS问题修复测试</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            max-width: 1000px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            margin-bottom: 20px;\n        }\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n        .test-section {\n            margin-bottom: 20px;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n        button {\n            background: #3498db;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover {\n            background: #2980b9;\n        }\n        .log-area {\n            background: #2c3e50;\n            color: #ecf0f1;\n            padding: 15px;\n            border-radius: 5px;\n            font-family: 'Courier New', monospace;\n            font-size: 12px;\n            height: 300px;\n            overflow-y: auto;\n            white-space: pre-wrap;\n        }\n        .server-input {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            margin: 5px 0;\n        }\n        .status {\n            padding: 10px;\n            border-radius: 5px;\n            margin: 10px 0;\n        }\n        .status.success {\n            background: #d4edda;\n            color: #155724;\n        }\n        .status.error {\n            background: #f8d7da;\n            color: #721c24;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔧 CORS问题修复测试</h1>\n\n        <div class=\"test-section\">\n            <h3>📋 服务器测试</h3>\n            <input type=\"text\" id=\"serverUrl\" class=\"server-input\"\n                   value=\"https://7r56is2wtd-8188.cnb.run\"\n                   placeholder=\"输入ComfyUI服务器地址\">\n            <br>\n            <button onclick=\"testStandardRequest()\">标准请求测试</button>\n            <button onclick=\"testSimpleRequest()\">简化请求测试</button>\n            <button onclick=\"testLoadBalancer()\">负载均衡器测试</button>\n            <button onclick=\"clearLog()\">清空日志</button>\n        </div>\n\n        <div class=\"test-section\">\n            <h3>📝 测试日志</h3>\n            <div id=\"logArea\" class=\"log-area\">等待测试开始...</div>\n        </div>\n    </div>\n\n    <script type=\"module\">\n        // 日志函数\n        function log(message) {\n            const logArea = document.getElementById('logArea');\n            const timestamp = new Date().toLocaleTimeString();\n            logArea.textContent += `[${timestamp}] ${message}\\n`;\n            logArea.scrollTop = logArea.scrollHeight;\n        }\n\n        // 清空日志\n        window.clearLog = function() {\n            document.getElementById('logArea').textContent = '';\n        }\n\n        // 标准请求测试\n        window.testStandardRequest = async function() {\n            const serverUrl = document.getElementById('serverUrl').value.trim();\n            if (!serverUrl) {\n                log('❌ 请输入服务器地址');\n                return;\n            }\n\n            log('🧪 开始标准请求测试...');\n\n            const endpoints = ['/api/queue', '/api/system_stats'];\n\n            for (const endpoint of endpoints) {\n                const fullUrl = `${serverUrl.replace(/\\/$/, '')}${endpoint}`;\n                log(`🔍 测试端点: ${endpoint}`);\n\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n                    const response = await fetch(fullUrl, {\n                        method: 'GET',\n                        signal: controller.signal,\n                        headers: {\n                            'Accept': 'application/json'\n                        },\n                        mode: 'cors',\n                        credentials: 'omit',\n                        cache: 'no-cache'\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (response.ok) {\n                        const data = await response.json();\n                        log(`✅ 标准请求成功: ${endpoint}`);\n                        log(`   状态码: ${response.status}`);\n                        log(`   数据字段: ${Object.keys(data).join(', ')}`);\n\n                        // 验证响应\n                        if (endpoint.includes('system_stats') && data.system) {\n                            log(`   ✅ 系统信息验证通过`);\n                        } else if (endpoint.includes('queue') && (data.queue_running !== undefined || data.queue_pending !== undefined)) {\n                            log(`   ✅ 队列信息验证通过`);\n                        }\n                    } else {\n                        log(`❌ 标准请求失败: ${endpoint} - 状态码 ${response.status}`);\n                    }\n\n                } catch (error) {\n                    log(`❌ 标准请求错误: ${endpoint} - ${error.message}`);\n                }\n            }\n        }\n\n        // 简化请求测试\n        window.testSimpleRequest = async function() {\n            const serverUrl = document.getElementById('serverUrl').value.trim();\n            if (!serverUrl) {\n                log('❌ 请输入服务器地址');\n                return;\n            }\n\n            log('🧪 开始简化请求测试...');\n\n            const endpoints = ['/api/queue', '/api/system_stats'];\n\n            for (const endpoint of endpoints) {\n                const fullUrl = `${serverUrl.replace(/\\/$/, '')}${endpoint}`;\n                log(`🔍 简化测试端点: ${endpoint}`);\n\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n                    await fetch(fullUrl, {\n                        method: 'GET',\n                        signal: controller.signal,\n                        mode: 'no-cors',\n                        cache: 'no-cache'\n                    });\n\n                    clearTimeout(timeoutId);\n                    log(`✅ 简化请求连接成功: ${endpoint}`);\n\n                } catch (error) {\n                    log(`❌ 简化请求失败: ${endpoint} - ${error.message}`);\n                }\n            }\n        }\n\n        // 负载均衡器测试\n        window.testLoadBalancer = async function() {\n            log('🧪 开始负载均衡器测试...');\n\n            try {\n                // 动态导入负载均衡器\n                const { default: loadBalancer } = await import('./src/services/loadBalancer.js');\n\n                log('📊 初始化负载均衡器...');\n                await loadBalancer.initialize();\n\n                log('🔄 刷新健康状态...');\n                await loadBalancer.refreshHealthStatus();\n\n                log('🎯 获取最优服务器...');\n                const optimalServer = await loadBalancer.getOptimalServer();\n                log(`✅ 最优服务器: ${optimalServer}`);\n\n                // 显示服务器状态\n                if (loadBalancer.serverList && loadBalancer.serverList.length > 0) {\n                    log('📋 服务器状态:');\n                    loadBalancer.serverList.forEach((server, index) => {\n                        const status = server.healthy === true ? '✅ 健康' :\n                                      server.healthy === false ? '❌ 异常' : '⏳ 未知';\n                        log(`   ${index + 1}. ${server.url}: ${status}`);\n                    });\n                }\n\n            } catch (error) {\n                log(`❌ 负载均衡器测试失败: ${error.message}`);\n            }\n        }\n\n        // 页面加载时的初始化\n        window.addEventListener('load', () => {\n            log('🚀 CORS修复测试页面已加载');\n            log('📋 可以开始测试了');\n        });\n    </script>\n</body>\n</html>\n"
        }
    ]
}