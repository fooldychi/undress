{
    "sourceFile": "client/final-hardcode-check.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752328329263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752328657778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,11 @@\n     description: '硬编码的ComfyUI服务器URL (dzqgp58z0s)',\n     severity: 'critical'\n   },\n   {\n-    pattern: /abc1373d4ad648a3a81d0587fbe5534b/g,\n-    description: '硬编码的ComfyUI客户端ID',\n-    severity: 'high'\n+    pattern: /[a-f0-9]{32}/g,\n+    description: '可能的硬编码客户端ID（32位十六进制）',\n+    severity: 'medium'\n   }\n ];\n \n // 需要检查的文件扩展名\n"
                }
            ],
            "date": 1752328329263,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// 需要检查的硬编码模式\nconst HARDCODED_PATTERNS = [\n  {\n    pattern: /https:\\/\\/5gke5y9mzc-8188\\.cnb\\.run/g,\n    description: '硬编码的ComfyUI服务器URL (5gke5y9mzc)',\n    severity: 'critical'\n  },\n  {\n    pattern: /https:\\/\\/hwf0p724ub-8188\\.cnb\\.run/g,\n    description: '硬编码的ComfyUI服务器URL (hwf0p724ub)',\n    severity: 'critical'\n  },\n  {\n    pattern: /https:\\/\\/dzqgp58z0s-8188\\.cnb\\.run/g,\n    description: '硬编码的ComfyUI服务器URL (dzqgp58z0s)',\n    severity: 'critical'\n  },\n  {\n    pattern: /abc1373d4ad648a3a81d0587fbe5534b/g,\n    description: '硬编码的ComfyUI客户端ID',\n    severity: 'high'\n  }\n];\n\n// 需要检查的文件扩展名\nconst FILE_EXTENSIONS = ['.js', '.vue', '.ts', '.jsx', '.tsx', '.html', '.env'];\n\n// 需要排除的目录\nconst EXCLUDE_DIRS = ['node_modules', '.git', 'dist', 'build', '.vscode'];\n\n// 递归扫描目录\nfunction scanDirectory(dir, results = []) {\n  const files = fs.readdirSync(dir);\n\n  for (const file of files) {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory()) {\n      if (!EXCLUDE_DIRS.includes(file)) {\n        scanDirectory(filePath, results);\n      }\n    } else {\n      const ext = path.extname(file);\n      if (FILE_EXTENSIONS.includes(ext)) {\n        results.push(filePath);\n      }\n    }\n  }\n\n  return results;\n}\n\n// 检查文件中的硬编码\nfunction checkFileForHardcoded(filePath) {\n  try {\n    const content = fs.readFileSync(filePath, 'utf8');\n    const issues = [];\n\n    for (const pattern of HARDCODED_PATTERNS) {\n      const matches = content.match(pattern.pattern);\n      if (matches) {\n        const lines = content.split('\\n');\n        const matchedLines = [];\n\n        lines.forEach((line, index) => {\n          if (pattern.pattern.test(line)) {\n            matchedLines.push({\n              lineNumber: index + 1,\n              content: line.trim()\n            });\n          }\n        });\n\n        issues.push({\n          pattern: pattern,\n          matches: matches.length,\n          lines: matchedLines\n        });\n      }\n    }\n\n    return issues;\n  } catch (error) {\n    console.error(`❌ 读取文件失败: ${filePath}`, error.message);\n    return [];\n  }\n}\n\n// 主函数\nfunction main() {\n  console.log('🔍 开始扫描硬编码配置...\\n');\n\n  const clientDir = path.join(__dirname);\n  const files = scanDirectory(clientDir);\n\n  console.log(`📁 扫描 ${files.length} 个文件...\\n`);\n\n  let totalIssues = 0;\n  const issuesByFile = {};\n\n  for (const file of files) {\n    const issues = checkFileForHardcoded(file);\n    if (issues.length > 0) {\n      issuesByFile[file] = issues;\n      totalIssues += issues.reduce((sum, issue) => sum + issue.matches, 0);\n    }\n  }\n\n  // 输出结果\n  if (totalIssues === 0) {\n    console.log('🎉 恭喜！未发现硬编码配置！');\n    console.log('✅ 所有ComfyUI服务器地址都已动态化');\n    console.log('✅ 所有客户端ID都已动态化');\n    console.log('\\n📋 检查的模式:');\n    HARDCODED_PATTERNS.forEach(pattern => {\n      console.log(`   - ${pattern.description}`);\n    });\n  } else {\n    console.log(`❌ 发现 ${totalIssues} 个硬编码问题:\\n`);\n\n    for (const [file, issues] of Object.entries(issuesByFile)) {\n      const relativePath = path.relative(clientDir, file);\n      console.log(`📄 ${relativePath}:`);\n\n      for (const issue of issues) {\n        console.log(`   🚨 ${issue.pattern.description} (${issue.pattern.severity})`);\n        console.log(`      匹配次数: ${issue.matches}`);\n\n        for (const line of issue.lines) {\n          console.log(`      第${line.lineNumber}行: ${line.content}`);\n        }\n        console.log('');\n      }\n    }\n\n    console.log('🔧 修复建议:');\n    console.log('1. 将硬编码的URL替换为环境变量或配置获取');\n    console.log('2. 使用 import.meta.env.VITE_COMFYUI_SERVER_URL');\n    console.log('3. 从服务器API动态获取配置');\n    console.log('4. 确保所有默认值都是通用的占位符');\n  }\n\n  console.log(`\\n📊 扫描统计:`);\n  console.log(`   文件总数: ${files.length}`);\n  console.log(`   问题文件: ${Object.keys(issuesByFile).length}`);\n  console.log(`   问题总数: ${totalIssues}`);\n\n  // 返回退出码\n  process.exit(totalIssues > 0 ? 1 : 0);\n}\n\n// 运行检查\nmain();\n"
        }
    ]
}