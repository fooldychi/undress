{
    "sourceFile": "client/diagnose-websocket.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752924021365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752924021365,
            "name": "Commit-0",
            "content": "// WebSocket服务器锁定机制诊断脚本\n// 在浏览器控制台中运行此脚本\n\nconsole.log('🔍 开始诊断WebSocket服务器锁定机制...');\n\n// 1. 检查全局函数是否可用\nconsole.log('\\n1️⃣ 检查全局函数可用性:');\nconst requiredFunctions = [\n  'getWebSocketServerStatus',\n  'debugWebSocketLock',\n  'resetWebSocketServer',\n  'getApiBaseUrl'\n];\n\nrequiredFunctions.forEach(funcName => {\n  if (typeof window[funcName] === 'function') {\n    console.log(`✅ ${funcName} 可用`);\n  } else {\n    console.log(`❌ ${funcName} 不可用`);\n  }\n});\n\n// 2. 检查当前WebSocket状态\nconsole.log('\\n2️⃣ 检查WebSocket状态:');\ntry {\n  if (typeof window.getWebSocketServerStatus === 'function') {\n    const status = window.getWebSocketServerStatus();\n    console.log('📊 WebSocket状态:', status);\n\n    // 分析状态\n    if (status.lockedServer) {\n      console.log(`🔒 已锁定服务器: ${status.lockedServer}`);\n      console.log(`🕐 锁定时间: ${new Date(status.lockTimestamp).toLocaleString()}`);\n      console.log(`⏱️ 锁定持续: ${Math.round((Date.now() - status.lockTimestamp) / 1000)}秒`);\n    } else {\n      console.log('⚠️ 没有锁定的服务器');\n    }\n\n    if (status.isConnected) {\n      console.log('✅ WebSocket已连接');\n    } else {\n      console.log('❌ WebSocket未连接');\n    }\n\n    console.log(`📡 连接状态: ${status.connectionState} (1=OPEN)`);\n    console.log(`📊 待处理任务: ${status.pendingTasksCount}`);\n  } else {\n    console.log('❌ getWebSocketServerStatus 函数不可用');\n  }\n} catch (error) {\n  console.error('❌ 检查WebSocket状态失败:', error);\n}\n\n// 3. 测试API基础URL获取\nconsole.log('\\n3️⃣ 测试API基础URL获取:');\nif (typeof window.getApiBaseUrl === 'function') {\n  window.getApiBaseUrl().then(url => {\n    console.log(`🔗 当前API基础URL: ${url}`);\n\n    // 检查是否使用了锁定的服务器\n    if (typeof window.getWebSocketServerStatus === 'function') {\n      const status = window.getWebSocketServerStatus();\n      if (status.lockedServer && url === status.lockedServer) {\n        console.log('✅ API使用了锁定的服务器');\n      } else if (status.lockedServer) {\n        console.log('⚠️ API没有使用锁定的服务器');\n        console.log(`   锁定的服务器: ${status.lockedServer}`);\n        console.log(`   API使用的服务器: ${url}`);\n      } else {\n        console.log('ℹ️ 没有锁定的服务器，使用负载均衡');\n      }\n    }\n  }).catch(error => {\n    console.error('❌ 获取API基础URL失败:', error);\n  });\n} else {\n  console.log('❌ getApiBaseUrl 函数不可用');\n}\n\n// 4. 运行详细调试\nconsole.log('\\n4️⃣ 运行详细调试:');\nif (typeof window.debugWebSocketLock === 'function') {\n  try {\n    const debugResult = window.debugWebSocketLock();\n    console.log('🐛 调试结果:', debugResult);\n  } catch (error) {\n    console.error('❌ 调试失败:', error);\n  }\n} else {\n  console.log('❌ debugWebSocketLock 函数不可用');\n}\n\n// 5. 测试解锁条件检查\nconsole.log('\\n5️⃣ 测试解锁条件检查:');\nif (typeof window.checkServerUnlockCondition === 'function') {\n  try {\n    const unlocked = window.checkServerUnlockCondition();\n    console.log(`🔓 解锁检查结果: ${unlocked ? '已解锁' : '保持锁定'}`);\n  } catch (error) {\n    console.error('❌ 解锁检查失败:', error);\n  }\n} else {\n  console.log('❌ checkServerUnlockCondition 函数不可用');\n}\n\n// 6. 建议修复步骤\nconsole.log('\\n6️⃣ 建议修复步骤:');\nconsole.log('如果发现问题，可以尝试以下步骤:');\nconsole.log('1. 检查解锁条件: window.checkServerUnlockCondition()');\nconsole.log('2. 安全重置(有任务时会提示): window.resetWebSocketServer()');\nconsole.log('3. 强制重置(清理所有任务): window.resetWebSocketServer(true)');\nconsole.log('4. 刷新页面重新建立连接');\nconsole.log('5. 检查网络连接和服务器状态');\n\nconsole.log('\\n🔍 诊断完成 - 新版本支持任务完成后解锁');\n"
        }
    ]
}