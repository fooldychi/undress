{
    "sourceFile": "client/src/test-server-consistency-fixes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753108550923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753108581848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,81 @@\n     console.error('❌ 测试4异常:', error)\n   }\n }\n \n+// 测试5: 验证服务器一致性检查函数\n+async function testServerConsistencyValidation() {\n+  console.log('\\n🧪 测试5: 服务器一致性检查函数')\n+\n+  try {\n+    // 5.1 测试无任务时的验证通过\n+    console.log('5.1 测试无任务时的验证通过')\n+    windowTasks.clear()\n+\n+    try {\n+      validateServerConsistency('测试操作', mockServers[0])\n+      console.log('✅ 测试5.1通过: 无任务时验证通过')\n+    } catch (error) {\n+      console.error('❌ 测试5.1失败: 无任务时验证失败:', error.message)\n+    }\n+\n+    // 5.2 测试有任务但无锁定服务器时的错误\n+    console.log('5.2 测试有任务但无锁定服务器时的错误')\n+\n+    // 添加测试任务\n+    windowTasks.set('test-task-005', {\n+      workflowType: 'test',\n+      executionServer: mockServers[0],\n+      windowId: WINDOW_ID\n+    })\n+\n+    const originalLocked = window.windowLockedServer\n+    window.windowLockedServer = null\n+\n+    try {\n+      validateServerConsistency('测试操作', mockServers[0])\n+      console.error('❌ 测试5.2失败: 应该抛出错误')\n+    } catch (error) {\n+      if (error.message.includes('待处理任务但服务器未锁定')) {\n+        console.log('✅ 测试5.2通过: 正确检测到任务-服务器不一致')\n+      } else {\n+        console.error('❌ 测试5.2失败: 错误类型不正确:', error.message)\n+      }\n+    } finally {\n+      window.windowLockedServer = originalLocked\n+      windowTasks.delete('test-task-005')\n+    }\n+\n+    // 5.3 测试服务器切换检测\n+    console.log('5.3 测试服务器切换检测')\n+\n+    windowTasks.set('test-task-006', {\n+      workflowType: 'test',\n+      executionServer: mockServers[0],\n+      windowId: WINDOW_ID\n+    })\n+\n+    window.windowLockedServer = mockServers[0]\n+\n+    try {\n+      validateServerConsistency('测试操作', mockServers[1]) // 不同的服务器\n+      console.error('❌ 测试5.3失败: 应该检测到服务器切换')\n+    } catch (error) {\n+      if (error.message.includes('服务器切换检测')) {\n+        console.log('✅ 测试5.3通过: 正确检测到服务器切换')\n+      } else {\n+        console.error('❌ 测试5.3失败: 错误类型不正确:', error.message)\n+      }\n+    } finally {\n+      windowTasks.delete('test-task-006')\n+      window.windowLockedServer = null\n+    }\n+\n+  } catch (error) {\n+    console.error('❌ 测试5异常:', error)\n+  }\n+}\n+\n // 运行所有测试\n async function runAllTests() {\n   console.log(`🚀 [${WINDOW_ID}] 开始运行服务器一致性修复测试`)\n \n"
                },
                {
                    "date": 1753108606491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,20 +258,50 @@\n \n // 运行所有测试\n async function runAllTests() {\n   console.log(`🚀 [${WINDOW_ID}] 开始运行服务器一致性修复测试`)\n+  console.log('=====================================')\n \n-  await testTaskRegistrationValidation()\n-  await testImageUrlStrictBinding()\n-  await testMissingBindingValidation()\n-  await testWebSocketReconnectionConsistency()\n+  const tests = [\n+    testTaskRegistrationValidation,\n+    testImageUrlStrictBinding,\n+    testMissingBindingValidation,\n+    testWebSocketReconnectionConsistency,\n+    testServerConsistencyValidation\n+  ]\n \n-  console.log('\\n🎯 测试总结:')\n-  console.log('- 任务注册时强制验证服务器锁定状态')\n-  console.log('- 图片URL获取移除回退逻辑，强制使用任务绑定服务器')\n-  console.log('- 增强错误处理，对缺失绑定信息抛出明确错误')\n-  console.log('- WebSocket重连时验证服务器一致性')\n-  console.log('\\n✅ 所有修复措施已实施完成')\n+  let passed = 0\n+  let total = tests.length\n+\n+  for (const test of tests) {\n+    try {\n+      await test()\n+      passed++\n+    } catch (error) {\n+      console.error(`❌ 测试失败:`, error)\n+    }\n+  }\n+\n+  console.log('\\n📊 测试结果汇总')\n+  console.log('=====================================')\n+  console.log(`✅ 通过: ${passed}/${total}`)\n+  console.log(`❌ 失败: ${total - passed}/${total}`)\n+\n+  console.log('\\n🎯 修复措施验证:')\n+  console.log('- ✅ 强化 getApiBaseUrl() 函数的锁定检查')\n+  console.log('- ✅ 增强 registerWindowTask() 函数的验证逻辑')\n+  console.log('- ✅ 添加服务器切换检测机制 validateServerConsistency()')\n+  console.log('- ✅ 在关键API调用前进行服务器一致性验证')\n+  console.log('- ✅ 移除图片URL获取的回退逻辑，强制使用绑定服务器')\n+  console.log('- ✅ 增强调试工具 debugServerConsistency() 和 checkServerSwitchRisk()')\n+\n+  if (passed === total) {\n+    console.log('\\n🎉 所有测试通过！多窗口多任务服务器一致性修复工作正常')\n+  } else {\n+    console.log('\\n⚠️ 部分测试失败，需要进一步检查修复实现')\n+  }\n+\n+  return { passed, total, success: passed === total }\n }\n \n // 导出测试函数\n export { runAllTests }\n"
                }
            ],
            "date": 1753108550923,
            "name": "Commit-0",
            "content": "// 🧪 测试服务器一致性修复\n// 验证多窗口多任务环境下图片服务器地址错误问题的修复效果\n\nimport {\n  registerWindowTask,\n  getTaskBoundImageUrl,\n  ensureWebSocketConnection,\n  submitWorkflow,\n  windowTasks,\n  windowLockedServer,\n  WINDOW_ID,\n  validateServerConsistency,\n  getApiBaseUrl,\n  uploadImageToComfyUI,\n  getTaskHistory\n} from './services/comfyui.js'\n\nconsole.log('🧪 开始测试服务器一致性修复')\n\n// 模拟服务器地址\nconst mockServers = [\n  'https://server1.example.com',\n  'https://server2.example.com',\n  'https://server3.example.com'\n]\n\n// 模拟任务结果\nconst mockTaskResult = {\n  images: [{\n    filename: 'test_image_001.png',\n    subfolder: '',\n    type: 'output'\n  }]\n}\n\n// 测试1: 验证任务注册时服务器绑定验证\nasync function testTaskRegistrationValidation() {\n  console.log('\\n🧪 测试1: 任务注册时服务器绑定验证')\n\n  try {\n    // 清空当前状态\n    windowTasks.clear()\n\n    // 尝试在服务器未锁定时注册任务（应该失败）\n    const promptId = 'test-prompt-001'\n    const mockTask = {\n      workflowType: 'undress',\n      createdAt: new Date().toISOString()\n    }\n\n    try {\n      registerWindowTask(promptId, mockTask)\n      console.error('❌ 测试1失败: 应该抛出服务器未锁定错误')\n    } catch (error) {\n      if (error.message.includes('服务器未锁定')) {\n        console.log('✅ 测试1通过: 正确检测到服务器未锁定')\n      } else {\n        console.error('❌ 测试1失败: 错误信息不符合预期:', error.message)\n      }\n    }\n\n  } catch (error) {\n    console.error('❌ 测试1异常:', error)\n  }\n}\n\n// 测试2: 验证图片URL获取的强制绑定服务器逻辑\nasync function testImageUrlStrictBinding() {\n  console.log('\\n🧪 测试2: 图片URL获取的强制绑定服务器逻辑')\n\n  try {\n    // 模拟锁定服务器\n    window.windowLockedServer = mockServers[0]\n\n    const promptId = 'test-prompt-002'\n    const mockTask = {\n      workflowType: 'undress',\n      executionServer: mockServers[1], // 不同于锁定服务器\n      createdAt: new Date().toISOString()\n    }\n\n    // 手动添加任务到队列（绕过注册验证）\n    windowTasks.set(promptId, {\n      ...mockTask,\n      windowId: WINDOW_ID,\n      registeredAt: Date.now()\n    })\n\n    // 测试获取图片URL（应该使用任务绑定的服务器）\n    try {\n      const imageUrl = await getTaskBoundImageUrl(promptId, mockTaskResult, 'undress')\n\n      if (imageUrl.includes(mockServers[1])) {\n        console.log('✅ 测试2通过: 图片URL使用了任务绑定的服务器')\n        console.log(`🌐 生成的图片URL: ${imageUrl}`)\n      } else {\n        console.error('❌ 测试2失败: 图片URL未使用绑定服务器')\n        console.error(`   期望包含: ${mockServers[1]}`)\n        console.error(`   实际URL: ${imageUrl}`)\n      }\n    } catch (error) {\n      console.log('✅ 测试2通过: 正确抛出了绑定验证错误:', error.message)\n    }\n\n  } catch (error) {\n    console.error('❌ 测试2异常:', error)\n  }\n}\n\n// 测试3: 验证缺失绑定信息时的错误处理\nasync function testMissingBindingValidation() {\n  console.log('\\n🧪 测试3: 缺失绑定信息时的错误处理')\n\n  try {\n    const promptId = 'test-prompt-003'\n\n    // 测试任务不存在的情况\n    try {\n      await getTaskBoundImageUrl(promptId, mockTaskResult, 'undress')\n      console.error('❌ 测试3a失败: 应该抛出任务未找到错误')\n    } catch (error) {\n      if (error.message.includes('任务') && error.message.includes('未找到')) {\n        console.log('✅ 测试3a通过: 正确检测到任务不存在')\n      } else {\n        console.error('❌ 测试3a失败: 错误信息不符合预期:', error.message)\n      }\n    }\n\n    // 测试executionServer为空的情况\n    windowTasks.set(promptId, {\n      workflowType: 'undress',\n      executionServer: null, // 空的绑定服务器\n      windowId: WINDOW_ID,\n      registeredAt: Date.now()\n    })\n\n    try {\n      await getTaskBoundImageUrl(promptId, mockTaskResult, 'undress')\n      console.error('❌ 测试3b失败: 应该抛出绑定服务器为空错误')\n    } catch (error) {\n      if (error.message.includes('executionServer') && error.message.includes('为空')) {\n        console.log('✅ 测试3b通过: 正确检测到绑定服务器为空')\n      } else {\n        console.error('❌ 测试3b失败: 错误信息不符合预期:', error.message)\n      }\n    }\n\n  } catch (error) {\n    console.error('❌ 测试3异常:', error)\n  }\n}\n\n// 测试4: 验证WebSocket重连时的服务器一致性\nasync function testWebSocketReconnectionConsistency() {\n  console.log('\\n🧪 测试4: WebSocket重连时的服务器一致性')\n\n  try {\n    // 模拟有待处理任务的情况\n    const promptId = 'test-prompt-004'\n    windowTasks.set(promptId, {\n      workflowType: 'undress',\n      executionServer: mockServers[0],\n      windowId: WINDOW_ID,\n      registeredAt: Date.now()\n    })\n\n    // 模拟服务器未锁定但有待处理任务的情况\n    window.windowLockedServer = null\n\n    try {\n      await ensureWebSocketConnection()\n      console.error('❌ 测试4失败: 应该抛出服务器一致性错误')\n    } catch (error) {\n      if (error.message.includes('待处理任务') && error.message.includes('服务器未锁定')) {\n        console.log('✅ 测试4通过: 正确检测到服务器一致性问题')\n      } else {\n        console.error('❌ 测试4失败: 错误信息不符合预期:', error.message)\n      }\n    }\n\n  } catch (error) {\n    console.error('❌ 测试4异常:', error)\n  }\n}\n\n// 运行所有测试\nasync function runAllTests() {\n  console.log(`🚀 [${WINDOW_ID}] 开始运行服务器一致性修复测试`)\n\n  await testTaskRegistrationValidation()\n  await testImageUrlStrictBinding()\n  await testMissingBindingValidation()\n  await testWebSocketReconnectionConsistency()\n\n  console.log('\\n🎯 测试总结:')\n  console.log('- 任务注册时强制验证服务器锁定状态')\n  console.log('- 图片URL获取移除回退逻辑，强制使用任务绑定服务器')\n  console.log('- 增强错误处理，对缺失绑定信息抛出明确错误')\n  console.log('- WebSocket重连时验证服务器一致性')\n  console.log('\\n✅ 所有修复措施已实施完成')\n}\n\n// 导出测试函数\nexport { runAllTests }\n\n// 如果直接运行此文件，执行测试\nif (typeof window !== 'undefined') {\n  window.testServerConsistencyFixes = runAllTests\n  console.log('🔧 测试函数已暴露到全局: window.testServerConsistencyFixes()')\n}\n"
        }
    ]
}