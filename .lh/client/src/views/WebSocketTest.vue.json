{
    "sourceFile": "client/src/views/WebSocketTest.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753508192529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753508216594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,10 +91,10 @@\n     let originalOnMessage = null\r\n \r\n     // 更新连接状态\r\n     const updateConnectionStatus = () => {\r\n-      isConnected.value = isWsConnected\r\n-      if (isWsConnected) {\r\n+      isConnected.value = webSocketManager.isWsConnected\r\n+      if (webSocketManager.isWsConnected) {\r\n         connectionStatus.value = 'connected'\r\n         connectionText.value = '已连接'\r\n       } else {\r\n         connectionStatus.value = 'disconnected'\r\n"
                },
                {
                    "date": 1753508229443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     // 重新连接 WebSocket\r\n     const reconnectWebSocket = async () => {\r\n       try {\r\n         Toast.loading('正在重新连接...')\r\n-        await initializeWebSocket()\r\n+        await webSocketManager.initializeWebSocket()\r\n         Toast.success('重新连接成功')\r\n       } catch (error) {\r\n         Toast.fail('重新连接失败: ' + error.message)\r\n       }\r\n"
                },
                {
                    "date": 1753508261635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,14 +174,14 @@\n       // 定期检查连接状态\r\n       statusCheckInterval = setInterval(updateConnectionStatus, 1000)\r\n \r\n       // 监听 WebSocket 消息\r\n-      if (wsConnection) {\r\n+      if (webSocketManager.wsConnection) {\r\n         // 保存原始的 onmessage 处理器\r\n-        originalOnMessage = wsConnection.onmessage\r\n+        originalOnMessage = webSocketManager.wsConnection.onmessage\r\n \r\n         // 添加我们的消息处理器\r\n-        wsConnection.addEventListener('message', handleMessage)\r\n+        webSocketManager.wsConnection.addEventListener('message', handleMessage)\r\n       }\r\n     })\r\n \r\n     onUnmounted(() => {\r\n@@ -189,10 +189,10 @@\n         clearInterval(statusCheckInterval)\r\n       }\r\n \r\n       // 恢复原始的消息处理器\r\n-      if (wsConnection && originalOnMessage) {\r\n-        wsConnection.removeEventListener('message', handleMessage)\r\n+      if (webSocketManager.wsConnection && originalOnMessage) {\r\n+        webSocketManager.wsConnection.removeEventListener('message', handleMessage)\r\n       }\r\n     })\r\n \r\n     return {\r\n"
                }
            ],
            "date": 1753508192529,
            "name": "Commit-0",
            "content": "<template>\r\n  <div class=\"websocket-test\">\r\n    <div class=\"header\">\r\n      <h1>ComfyUI WebSocket 测试</h1>\r\n      <p>测试 WebSocket 实时通信功能</p>\r\n    </div>\r\n\r\n    <div class=\"status-section\">\r\n      <div class=\"status-card\">\r\n        <h3>连接状态</h3>\r\n        <div class=\"status-indicator\" :class=\"connectionStatus\">\r\n          <div class=\"status-dot\"></div>\r\n          <span>{{ connectionText }}</span>\r\n        </div>\r\n        <button @click=\"reconnectWebSocket\" :disabled=\"isConnected\" class=\"btn\">\r\n          重新连接\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"status-card\">\r\n        <h3>消息统计</h3>\r\n        <div class=\"stats\">\r\n          <div class=\"stat-item\">\r\n            <span class=\"label\">接收消息:</span>\r\n            <span class=\"value\">{{ messageCount }}</span>\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <span class=\"label\">任务数量:</span>\r\n            <span class=\"value\">{{ taskCount }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"messages-section\">\r\n      <h3>实时消息</h3>\r\n      <div class=\"messages-container\">\r\n        <div\r\n          v-for=\"(message, index) in messages\"\r\n          :key=\"index\"\r\n          class=\"message-item\"\r\n          :class=\"message.type\"\r\n        >\r\n          <div class=\"message-header\">\r\n            <span class=\"message-type\">{{ message.type }}</span>\r\n            <span class=\"message-time\">{{ formatTime(message.timestamp) }}</span>\r\n          </div>\r\n          <div class=\"message-content\">\r\n            <pre>{{ JSON.stringify(message.data, null, 2) }}</pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button @click=\"clearMessages\" class=\"btn btn-secondary\">\r\n        清空消息\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"test-section\">\r\n      <h3>测试功能</h3>\r\n      <div class=\"test-buttons\">\r\n        <button @click=\"testImageUpload\" :disabled=\"!isConnected\" class=\"btn\">\r\n          测试图片上传\r\n        </button>\r\n        <button @click=\"testWorkflowSubmit\" :disabled=\"!isConnected\" class=\"btn\">\r\n          测试工作流提交\r\n        </button>\r\n        <button @click=\"testTaskStatus\" :disabled=\"!isConnected\" class=\"btn\">\r\n          测试任务状态查询\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, onUnmounted } from 'vue'\r\nimport webSocketManager from '../services/webSocketManager.js'\r\nimport { Toast } from 'vant'\r\n\r\nexport default {\r\n  name: 'WebSocketTest',\r\n  setup() {\r\n    const isConnected = ref(false)\r\n    const connectionStatus = ref('disconnected')\r\n    const connectionText = ref('未连接')\r\n    const messageCount = ref(0)\r\n    const taskCount = ref(0)\r\n    const messages = ref([])\r\n\r\n    let statusCheckInterval = null\r\n    let originalOnMessage = null\r\n\r\n    // 更新连接状态\r\n    const updateConnectionStatus = () => {\r\n      isConnected.value = isWsConnected\r\n      if (isWsConnected) {\r\n        connectionStatus.value = 'connected'\r\n        connectionText.value = '已连接'\r\n      } else {\r\n        connectionStatus.value = 'disconnected'\r\n        connectionText.value = '未连接'\r\n      }\r\n    }\r\n\r\n    // 处理 WebSocket 消息\r\n    const handleMessage = (event) => {\r\n      try {\r\n        const message = JSON.parse(event.data)\r\n\r\n        // 添加到消息列表\r\n        messages.value.unshift({\r\n          type: message.type || 'unknown',\r\n          data: message.data || message,\r\n          timestamp: Date.now()\r\n        })\r\n\r\n        // 限制消息数量\r\n        if (messages.value.length > 50) {\r\n          messages.value = messages.value.slice(0, 50)\r\n        }\r\n\r\n        messageCount.value++\r\n\r\n        // 统计任务相关消息\r\n        if (message.type === 'executed' || message.type === 'execution_error') {\r\n          taskCount.value++\r\n        }\r\n      } catch (error) {\r\n        console.error('解析 WebSocket 消息失败:', error)\r\n      }\r\n    }\r\n\r\n    // 重新连接 WebSocket\r\n    const reconnectWebSocket = async () => {\r\n      try {\r\n        Toast.loading('正在重新连接...')\r\n        await initializeWebSocket()\r\n        Toast.success('重新连接成功')\r\n      } catch (error) {\r\n        Toast.fail('重新连接失败: ' + error.message)\r\n      }\r\n    }\r\n\r\n    // 清空消息\r\n    const clearMessages = () => {\r\n      messages.value = []\r\n      messageCount.value = 0\r\n      taskCount.value = 0\r\n    }\r\n\r\n    // 格式化时间\r\n    const formatTime = (timestamp) => {\r\n      const date = new Date(timestamp)\r\n      return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`\r\n    }\r\n\r\n    // 测试功能\r\n    const testImageUpload = () => {\r\n      Toast('测试图片上传功能（需要实现）')\r\n    }\r\n\r\n    const testWorkflowSubmit = () => {\r\n      Toast('测试工作流提交功能（需要实现）')\r\n    }\r\n\r\n    const testTaskStatus = () => {\r\n      Toast('测试任务状态查询功能（需要实现）')\r\n    }\r\n\r\n    onMounted(() => {\r\n      // 初始状态检查\r\n      updateConnectionStatus()\r\n\r\n      // 定期检查连接状态\r\n      statusCheckInterval = setInterval(updateConnectionStatus, 1000)\r\n\r\n      // 监听 WebSocket 消息\r\n      if (wsConnection) {\r\n        // 保存原始的 onmessage 处理器\r\n        originalOnMessage = wsConnection.onmessage\r\n\r\n        // 添加我们的消息处理器\r\n        wsConnection.addEventListener('message', handleMessage)\r\n      }\r\n    })\r\n\r\n    onUnmounted(() => {\r\n      if (statusCheckInterval) {\r\n        clearInterval(statusCheckInterval)\r\n      }\r\n\r\n      // 恢复原始的消息处理器\r\n      if (wsConnection && originalOnMessage) {\r\n        wsConnection.removeEventListener('message', handleMessage)\r\n      }\r\n    })\r\n\r\n    return {\r\n      isConnected,\r\n      connectionStatus,\r\n      connectionText,\r\n      messageCount,\r\n      taskCount,\r\n      messages,\r\n      reconnectWebSocket,\r\n      clearMessages,\r\n      formatTime,\r\n      testImageUpload,\r\n      testWorkflowSubmit,\r\n      testTaskStatus\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.websocket-test {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.header h1 {\r\n  color: #333;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.header p {\r\n  color: #666;\r\n}\r\n\r\n.status-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.status-card {\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.status-card h3 {\r\n  margin-bottom: 15px;\r\n  color: #333;\r\n}\r\n\r\n.status-indicator {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.status-dot {\r\n  width: 12px;\r\n  height: 12px;\r\n  border-radius: 50%;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.connected .status-dot {\r\n  background-color: #4caf50;\r\n  box-shadow: 0 0 8px rgba(76, 175, 80, 0.6);\r\n}\r\n\r\n.disconnected .status-dot {\r\n  background-color: #f44336;\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n.stats {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.label {\r\n  color: #666;\r\n}\r\n\r\n.value {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.messages-section {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.messages-section h3 {\r\n  margin-bottom: 15px;\r\n  color: #333;\r\n}\r\n\r\n.messages-container {\r\n  background: #f5f5f5;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.message-item {\r\n  background: white;\r\n  border-radius: 6px;\r\n  padding: 12px;\r\n  margin-bottom: 10px;\r\n  border-left: 4px solid #ddd;\r\n}\r\n\r\n.message-item.status {\r\n  border-left-color: #2196f3;\r\n}\r\n\r\n.message-item.progress {\r\n  border-left-color: #ff9800;\r\n}\r\n\r\n.message-item.executed {\r\n  border-left-color: #4caf50;\r\n}\r\n\r\n.message-item.execution_error {\r\n  border-left-color: #f44336;\r\n}\r\n\r\n.message-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n  font-size: 12px;\r\n}\r\n\r\n.message-type {\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.message-time {\r\n  color: #666;\r\n}\r\n\r\n.message-content pre {\r\n  font-size: 11px;\r\n  color: #333;\r\n  white-space: pre-wrap;\r\n  word-break: break-all;\r\n  margin: 0;\r\n}\r\n\r\n.test-section h3 {\r\n  margin-bottom: 15px;\r\n  color: #333;\r\n}\r\n\r\n.test-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.btn {\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 6px;\r\n  background: #2196f3;\r\n  color: white;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.btn:hover:not(:disabled) {\r\n  background: #1976d2;\r\n}\r\n\r\n.btn:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-secondary {\r\n  background: #666;\r\n}\r\n\r\n.btn-secondary:hover:not(:disabled) {\r\n  background: #555;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n    transform: scale(1.2);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n/* 移动端适配 */\r\n@media (max-width: 768px) {\r\n  .websocket-test {\r\n    padding: 15px;\r\n  }\r\n\r\n  .status-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .test-buttons {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .btn {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n"
        }
    ]
}