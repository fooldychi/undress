{
    "sourceFile": "client/src/views/TextToImageUnified.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752393798442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752395501246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,4 +190,5 @@\n @media (prefers-color-scheme: dark) {\n   /* 深色主题样式 */\n }\n </style>\n+\n"
                }
            ],
            "date": 1752393798442,
            "name": "Commit-0",
            "content": "<template>\n  <UnifiedImageProcessingTemplate\n    function-id=\"text-to-image\"\n    title-icon-name=\"photo-o\"\n    title-icon-color=\"var(--van-success-color)\"\n    :is-processing=\"isLoading\"\n    :progress=\"progressPercent\"\n    :processing-info=\"{ promptId, processingTime }\"\n    :result-data=\"resultImage\"\n    @login=\"handleUserLogin\"\n    @logout=\"handleUserLogout\"\n    @process=\"generateImage\"\n    @reset=\"resetProcess\"\n    @download=\"handleDownload\"\n    @input-change=\"handleInputChange\"\n    ref=\"templateRef\"\n  />\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport { Toast } from 'vant'\nimport { UnifiedImageProcessingTemplate } from '../components/mobile'\nimport { processTextToImage } from '../services/comfyui.js'\n\nconsole.log('TextToImageUnified组件已加载，ComfyUI服务已导入')\n\n// 响应式数据\nconst templateRef = ref(null)\nconst prompt = ref('')\nconst resultImage = ref(null)\nconst isLoading = ref(false)\nconst processingStatus = ref('')\nconst promptId = ref('')\nconst processingTime = ref('')\nconst progressPercent = ref(0)\nconst startTime = ref(null)\n\n// 计算属性\nconst canProcess = computed(() => {\n  return prompt.value.trim().length > 0\n})\n\n// 处理输入变化\nconst handleInputChange = (panelId, data) => {\n  console.log('输入变化:', panelId, data)\n\n  if (panelId === 'text-prompt') {\n    prompt.value = data\n    resultImage.value = null // 清除之前的结果\n  }\n}\n\n// 生成图像\nconst generateImage = async () => {\n  if (!canProcess.value) {\n    Toast.fail('请先输入图像描述')\n    return\n  }\n\n  isLoading.value = true\n  processingStatus.value = '正在加载服务...'\n  progressPercent.value = 10\n  startTime.value = Date.now()\n\n  try {\n    console.log('🚀 开始文生图处理')\n\n    processingStatus.value = '正在生成图像...'\n    progressPercent.value = 30\n\n    // 调用文生图处理服务\n    const result = await processTextToImage({\n      prompt: prompt.value.trim(),\n      size: '512x512',\n      style: 'realistic',\n      onProgress: (status, percent) => {\n        processingStatus.value = status\n        progressPercent.value = Math.max(progressPercent.value, percent)\n      }\n    })\n\n    if (result.success && result.imageUrl) {\n      resultImage.value = result.imageUrl\n      promptId.value = result.promptId || ''\n\n      // 计算处理时间\n      const endTime = Date.now()\n      const duration = Math.round((endTime - startTime.value) / 1000)\n      processingTime.value = `${duration}秒`\n\n      // 显示成功toast\n      const pointsInfo = result.pointsConsumed ? `（消耗${result.pointsConsumed}点）` : ''\n      Toast.success(`🎉 图像生成完成！${pointsInfo}`)\n      console.log('✅ 文生图处理完成')\n    } else {\n      throw new Error(result.error || '图像生成失败')\n    }\n  } catch (error) {\n    console.error('❌ 文生图处理失败:', error)\n    Toast.fail(`生成失败: ${error.message}`)\n  } finally {\n    isLoading.value = false\n    processingStatus.value = ''\n    progressPercent.value = 0\n  }\n}\n\n// 重置处理\nconst resetProcess = () => {\n  prompt.value = ''\n  resultImage.value = null\n  processingStatus.value = ''\n  promptId.value = ''\n  processingTime.value = ''\n\n  // 重置模板内部状态\n  if (templateRef.value) {\n    const { inputData } = templateRef.value\n    if (inputData['text-prompt']) {\n      inputData['text-prompt'] = ''\n    }\n  }\n\n  Toast.success('已重置，可以重新输入描述')\n}\n\n// 下载结果\nconst handleDownload = (imageUrl) => {\n  if (!imageUrl) return\n\n  const link = document.createElement('a')\n  link.href = imageUrl\n  link.download = `text_to_image_result_${Date.now()}.png`\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n\n  Toast.success('图片下载已开始')\n}\n\n// 用户登录成功回调\nconst handleUserLogin = (data) => {\n  console.log('用户登录成功:', data)\n  // 可以在这里触发一些需要登录状态的操作\n}\n\n// 用户登出回调\nconst handleUserLogout = () => {\n  console.log('用户已登出')\n  // 可以在这里清理一些用户相关的状态\n}\n\n// 生命周期\nonMounted(() => {\n  console.log('TextToImageUnified组件已挂载，ComfyUI服务已准备就绪')\n})\n\nonUnmounted(() => {\n  // 清理工作\n  if (isLoading.value) {\n    isLoading.value = false\n  }\n})\n</script>\n\n<style scoped>\n/* 这里可以添加特定于文生图功能的样式 */\n/* 大部分样式已经在统一模板中处理 */\n\n/* 如果需要自定义样式，可以在这里添加 */\n:deep(.input-panel) {\n  /* 自定义输入面板样式 */\n}\n\n:deep(.text-input) {\n  /* 自定义文本输入样式 */\n}\n\n:deep(.simple-result) {\n  /* 自定义结果显示样式 */\n}\n\n/* 移动端优化 */\n@media (max-width: 768px) {\n  /* 移动端特定样式 */\n}\n\n/* 深色主题适配 */\n@media (prefers-color-scheme: dark) {\n  /* 深色主题样式 */\n}\n</style>\n"
        }
    ]
}