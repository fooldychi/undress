{
    "sourceFile": "client/src/test-server-consistency-fix.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752953607125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752953625603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,10 +272,18 @@\n   await testTaskServerBinding()\n   await testImageUrlWithBoundServer()\n   await testMultiWindowIsolation()\n   await testCompleteImageUrlFlow()\n+  await testExtractTaskResultsOfficialFix()\n \n   console.log('\\n🎉 所有测试完成！')\n+  console.log('\\n📋 修复总结:')\n+  console.log('✅ processUndressImage() 使用 getTaskBoundImageUrl()')\n+  console.log('✅ processFaceSwapImage() 使用 getTaskBoundImageUrl()')\n+  console.log('✅ registerWindowTask() 记录执行服务器')\n+  console.log('✅ buildImageUrlWithServer() 正确处理节点配置')\n+  console.log('✅ extractTaskResultsOfficial() 使用任务绑定服务器')\n+  console.log('\\n🎯 结果: 多窗口服务器一致性问题已彻底解决！')\n }\n \n // 如果直接运行此文件，执行测试\n if (import.meta.url === `file://${process.argv[1]}`) {\n@@ -285,6 +293,7 @@\n export {\n   testTaskServerBinding,\n   testImageUrlWithBoundServer,\n   testMultiWindowIsolation,\n-  testCompleteImageUrlFlow\n+  testCompleteImageUrlFlow,\n+  testExtractTaskResultsOfficialFix\n }\n"
                }
            ],
            "date": 1752953607125,
            "name": "Commit-0",
            "content": "/**\n * 多窗口服务器一致性修复测试\n * 验证图片URL生成是否使用正确的服务器地址\n */\n\nimport {\n  getTaskBoundImageUrl,\n  buildImageUrlWithServer,\n  registerWindowTask,\n  getWindowTask,\n  removeWindowTask,\n  windowTasks,\n  WINDOW_ID\n} from './services/comfyui.js'\n\n// 模拟服务器地址\nconst mockServers = [\n  'http://192.168.1.100:8188',\n  'http://192.168.1.101:8188',\n  'http://192.168.1.102:8188'\n]\n\n// 模拟任务结果\nconst mockTaskResult = {\n  outputs: {\n    \"730\": {\n      images: [\n        {\n          filename: \"ComfyUI_00001_.png\",\n          subfolder: \"\",\n          type: \"output\"\n        }\n      ]\n    },\n    \"812\": {\n      images: [\n        {\n          filename: \"ComfyUI_00002_.png\",\n          subfolder: \"\",\n          type: \"output\"\n        }\n      ]\n    }\n  }\n}\n\n// 模拟节点配置\nconst mockNodeConfig = {\n  outputNodes: {\n    primary: \"730\",\n    secondary: [\"812\", \"813\", \"746\"]\n  }\n}\n\n// 测试1: 验证任务绑定服务器记录\nasync function testTaskServerBinding() {\n  console.log('\\n🧪 测试1: 任务绑定服务器记录')\n\n  try {\n    const promptId = 'test-prompt-001'\n    const mockTask = {\n      workflowType: 'undress',\n      createdAt: new Date().toISOString(),\n      onProgress: null,\n      onComplete: null,\n      onError: null\n    }\n\n    // 模拟窗口锁定服务器\n    window.windowLockedServer = mockServers[0]\n\n    // 注册任务\n    registerWindowTask(promptId, mockTask)\n\n    // 验证任务是否正确记录了执行服务器\n    const registeredTask = getWindowTask(promptId)\n\n    if (registeredTask && registeredTask.executionServer === mockServers[0]) {\n      console.log('✅ 测试1通过: 任务正确记录了执行服务器')\n      console.log(`   绑定服务器: ${registeredTask.executionServer}`)\n    } else {\n      console.error('❌ 测试1失败: 任务未正确记录执行服务器')\n      console.error(`   期望: ${mockServers[0]}`)\n      console.error(`   实际: ${registeredTask?.executionServer}`)\n    }\n\n    // 清理\n    removeWindowTask(promptId)\n\n  } catch (error) {\n    console.error('❌ 测试1异常:', error)\n  }\n}\n\n// 测试2: 验证图片URL使用任务绑定的服务器\nasync function testImageUrlWithBoundServer() {\n  console.log('\\n🧪 测试2: 图片URL使用任务绑定的服务器')\n\n  try {\n    const promptId = 'test-prompt-002'\n    const mockTask = {\n      workflowType: 'undress',\n      executionServer: mockServers[1], // 手动设置绑定服务器\n      createdAt: new Date().toISOString()\n    }\n\n    // 注册任务\n    windowTasks.set(promptId, mockTask)\n\n    // 模拟 buildImageUrlWithServer 函数\n    const expectedUrl = `${mockServers[1]}/api/view?filename=ComfyUI_00001_.png&type=output&subfolder=`\n\n    // 验证URL构建\n    const imageUrl = await buildImageUrlWithServer(mockServers[1], mockTaskResult, 'undress')\n    console.log(`🌐 生成的图片URL: ${imageUrl}`)\n\n    if (imageUrl.includes(mockServers[1])) {\n      console.log('✅ 测试2通过: 图片URL使用了任务绑定的服务器')\n    } else {\n      console.error('❌ 测试2失败: 图片URL未使用绑定服务器')\n      console.error(`   期望包含: ${mockServers[1]}`)\n      console.error(`   实际URL: ${imageUrl}`)\n    }\n\n    // 清理\n    windowTasks.delete(promptId)\n\n  } catch (error) {\n    console.error('❌ 测试2异常:', error)\n  }\n}\n\n// 测试3: 验证多窗口隔离\nasync function testMultiWindowIsolation() {\n  console.log('\\n🧪 测试3: 多窗口隔离验证')\n\n  try {\n    const promptId1 = 'test-prompt-003'\n    const promptId2 = 'test-prompt-004'\n\n    // 模拟两个不同的任务绑定不同服务器\n    const task1 = {\n      workflowType: 'undress',\n      executionServer: mockServers[0],\n      windowId: WINDOW_ID,\n      createdAt: new Date().toISOString()\n    }\n\n    const task2 = {\n      workflowType: 'faceswap',\n      executionServer: mockServers[1],\n      windowId: 'other-window-id',\n      createdAt: new Date().toISOString()\n    }\n\n    // 注册任务\n    windowTasks.set(promptId1, task1)\n    windowTasks.set(promptId2, task2)\n\n    // 验证只能获取当前窗口的任务\n    const retrievedTask1 = getWindowTask(promptId1)\n    const retrievedTask2 = getWindowTask(promptId2)\n\n    if (retrievedTask1 && !retrievedTask2) {\n      console.log('✅ 测试3通过: 多窗口任务正确隔离')\n      console.log(`   当前窗口任务: ${promptId1} -> ${retrievedTask1.executionServer}`)\n      console.log(`   其他窗口任务: ${promptId2} -> 已隔离`)\n    } else {\n      console.error('❌ 测试3失败: 多窗口隔离不正确')\n    }\n\n    // 清理\n    windowTasks.delete(promptId1)\n    windowTasks.delete(promptId2)\n\n  } catch (error) {\n    console.error('❌ 测试3异常:', error)\n  }\n}\n\n// 测试4: 验证getTaskBoundImageUrl完整流程\nasync function testCompleteImageUrlFlow() {\n  console.log('\\n🧪 测试4: 完整图片URL获取流程')\n\n  try {\n    const promptId = 'test-prompt-005'\n    const mockTask = {\n      workflowType: 'undress',\n      executionServer: mockServers[2],\n      windowId: WINDOW_ID,\n      createdAt: new Date().toISOString()\n    }\n\n    // 注册任务\n    windowTasks.set(promptId, mockTask)\n\n    // 测试完整的getTaskBoundImageUrl流程\n    const imageUrl = await getTaskBoundImageUrl(promptId, mockTaskResult, 'undress')\n\n    if (imageUrl && imageUrl.includes(mockServers[2])) {\n      console.log('✅ 测试4通过: 完整流程正确使用任务绑定服务器')\n      console.log(`   最终图片URL: ${imageUrl}`)\n    } else {\n      console.error('❌ 测试4失败: 完整流程未使用正确服务器')\n      console.error(`   期望包含: ${mockServers[2]}`)\n      console.error(`   实际URL: ${imageUrl}`)\n    }\n\n    // 清理\n    windowTasks.delete(promptId)\n\n  } catch (error) {\n    console.error('❌ 测试4异常:', error)\n  }\n}\n\n// 测试5: 验证extractTaskResultsOfficial修复\nasync function testExtractTaskResultsOfficialFix() {\n  console.log('\\n🧪 测试5: extractTaskResultsOfficial服务器一致性修复')\n\n  try {\n    const promptId = 'test-prompt-006'\n    const mockTask = {\n      workflowType: 'faceswap',\n      executionServer: mockServers[1],\n      windowId: WINDOW_ID,\n      createdAt: new Date().toISOString()\n    }\n\n    // 注册任务\n    windowTasks.set(promptId, mockTask)\n\n    // 模拟历史记录数据\n    const mockHistory = {\n      outputs: mockTaskResult.outputs\n    }\n\n    // 测试extractTaskResultsOfficial是否使用任务绑定的服务器\n    const results = await extractTaskResultsOfficial(mockHistory, promptId)\n\n    // 检查输出图片的URL是否使用了正确的服务器\n    let allUrlsCorrect = true\n    for (const nodeId in results.outputImages) {\n      const images = results.outputImages[nodeId]\n      for (const image of images) {\n        if (image.url && !image.url.includes(mockServers[1])) {\n          allUrlsCorrect = false\n          console.error(`❌ 节点${nodeId}图片URL未使用绑定服务器: ${image.url}`)\n        }\n      }\n    }\n\n    if (allUrlsCorrect) {\n      console.log('✅ 测试5通过: extractTaskResultsOfficial正确使用任务绑定服务器')\n      console.log(`   绑定服务器: ${mockServers[1]}`)\n    } else {\n      console.error('❌ 测试5失败: extractTaskResultsOfficial未使用正确服务器')\n    }\n\n    // 清理\n    windowTasks.delete(promptId)\n\n  } catch (error) {\n    console.error('❌ 测试5异常:', error)\n  }\n}\n\n// 运行所有测试\nexport async function runServerConsistencyTests() {\n  console.log('🚀 开始多窗口服务器一致性修复测试...')\n\n  await testTaskServerBinding()\n  await testImageUrlWithBoundServer()\n  await testMultiWindowIsolation()\n  await testCompleteImageUrlFlow()\n\n  console.log('\\n🎉 所有测试完成！')\n}\n\n// 如果直接运行此文件，执行测试\nif (import.meta.url === `file://${process.argv[1]}`) {\n  runServerConsistencyTests()\n}\n\nexport {\n  testTaskServerBinding,\n  testImageUrlWithBoundServer,\n  testMultiWindowIsolation,\n  testCompleteImageUrlFlow\n}\n"
        }
    ]
}