{
    "sourceFile": "client/src/config/features.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752436588345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752436588345,
            "name": "Commit-0",
            "content": "import { UndressWomanIcon, FaceSwapIcon } from '../components/icons'\n\n/**\n * 功能配置文件\n * 用于管理首页功能卡片的显示和配置\n * 后续可以改为从后台API获取\n */\n\n// 功能配置数据结构\nexport const FEATURE_CONFIGS = [\n  {\n    id: 'clothes-swap',\n    title: '一键褪衣',\n    description: '智能识别人物轮廓，快速移除照片中的服装，体验前沿AI技术',\n    route: '/clothes-swap',\n    icon: {\n      type: 'custom', // 'custom' | 'vant'\n      component: UndressWomanIcon,\n      size: 28,\n      color: '#667eea'\n    },\n    iconClass: 'undress-icon',\n    tags: [\n      { text: 'AI识别', type: 'primary' },\n      { text: '快速处理', type: 'success' }\n    ],\n    requireLogin: true,\n    enabled: true,\n    order: 1,\n    // 后台管理相关字段\n    category: 'image-processing',\n    pointsCost: 20,\n    description_admin: '一键褪衣功能管理'\n  },\n  {\n    id: 'face-swap',\n    title: '极速换脸',\n    description: '精准面部识别技术，实现自然的人脸替换效果，创造有趣内容',\n    route: '/face-swap',\n    icon: {\n      type: 'custom',\n      component: FaceSwapIcon,\n      size: 28,\n      color: '#f093fb'\n    },\n    iconClass: 'faceswap-icon',\n    tags: [\n      { text: '面部识别', type: 'warning' },\n      { text: '自然效果', type: 'primary' }\n    ],\n    requireLogin: true,\n    enabled: true,\n    order: 2,\n    category: 'image-processing',\n    pointsCost: 20,\n    description_admin: '极速换脸功能管理'\n  },\n\n]\n\n// 图标样式配置\nexport const ICON_STYLES = {\n  'undress-icon': {\n    background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(102, 126, 234, 0.1))',\n    border: '1px solid rgba(102, 126, 234, 0.3)',\n    darkBackground: 'linear-gradient(135deg, rgba(102, 126, 234, 0.3), rgba(102, 126, 234, 0.1))',\n    darkBorder: '1px solid rgba(102, 126, 234, 0.4)'\n  },\n  'faceswap-icon': {\n    background: 'linear-gradient(135deg, rgba(240, 147, 251, 0.2), rgba(240, 147, 251, 0.1))',\n    border: '1px solid rgba(240, 147, 251, 0.3)',\n    darkBackground: 'linear-gradient(135deg, rgba(240, 147, 251, 0.3), rgba(240, 147, 251, 0.1))',\n    darkBorder: '1px solid rgba(240, 147, 251, 0.4)'\n  },\n\n}\n\n// 标签类型配置\nexport const TAG_TYPES = {\n  primary: {\n    background: 'rgba(102, 126, 234, 0.15)',\n    borderColor: 'rgba(102, 126, 234, 0.3)',\n    color: 'rgba(102, 126, 234, 0.9)'\n  },\n  success: {\n    background: 'rgba(16, 185, 129, 0.15)',\n    borderColor: 'rgba(16, 185, 129, 0.3)',\n    color: 'rgba(16, 185, 129, 0.9)'\n  },\n  warning: {\n    background: 'rgba(245, 158, 11, 0.15)',\n    borderColor: 'rgba(245, 158, 11, 0.3)',\n    color: 'rgba(245, 158, 11, 0.9)'\n  }\n}\n\n/**\n * 获取启用的功能配置\n * @returns {Array} 启用的功能配置列表\n */\nexport function getEnabledFeatures() {\n  return FEATURE_CONFIGS\n    .filter(feature => feature.enabled)\n    .sort((a, b) => a.order - b.order)\n}\n\n/**\n * 根据ID获取功能配置\n * @param {string} id 功能ID\n * @returns {Object|null} 功能配置对象\n */\nexport function getFeatureById(id) {\n  return FEATURE_CONFIGS.find(feature => feature.id === id) || null\n}\n\n/**\n * 获取功能的图标样式\n * @param {string} iconClass 图标类名\n * @returns {Object} 图标样式对象\n */\nexport function getIconStyle(iconClass) {\n  return ICON_STYLES[iconClass] || {}\n}\n\n/**\n * 模拟从后台API获取功能配置\n * 后续可以替换为真实的API调用\n * @returns {Promise<Array>} 功能配置列表\n */\nexport async function fetchFeaturesFromAPI() {\n  // 模拟API延迟\n  await new Promise(resolve => setTimeout(resolve, 100))\n\n  // 这里后续可以替换为真实的API调用\n  // const response = await fetch('/api/admin/features')\n  // return response.json()\n\n  return getEnabledFeatures()\n}\n\n/**\n * 更新功能配置\n * 后续用于后台管理功能\n * @param {string} id 功能ID\n * @param {Object} updates 更新的配置\n * @returns {Promise<boolean>} 更新是否成功\n */\nexport async function updateFeatureConfig(id, updates) {\n  // 模拟API调用\n  console.log(`更新功能配置: ${id}`, updates)\n\n  // 这里后续可以替换为真实的API调用\n  // const response = await fetch(`/api/admin/features/${id}`, {\n  //   method: 'PUT',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify(updates)\n  // })\n  // return response.ok\n\n  return true\n}\n"
        }
    ]
}