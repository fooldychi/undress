{
    "sourceFile": "client/src/config/features.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752436588345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752824275749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,21 +122,38 @@\n   return ICON_STYLES[iconClass] || {}\n }\n \n /**\n- * 模拟从后台API获取功能配置\n- * 后续可以替换为真实的API调用\n+ * 从后台API获取启用的功能配置\n+ * 根据工作流启用状态动态返回功能列表\n  * @returns {Promise<Array>} 功能配置列表\n  */\n export async function fetchFeaturesFromAPI() {\n-  // 模拟API延迟\n-  await new Promise(resolve => setTimeout(resolve, 100))\n+  try {\n+    console.log('🔄 从API获取功能配置...');\n \n-  // 这里后续可以替换为真实的API调用\n-  // const response = await fetch('/api/admin/features')\n-  // return response.json()\n+    // 调用后台API获取启用的功能\n+    const response = await fetch('/api/workflow-config/features');\n \n-  return getEnabledFeatures()\n+    if (!response.ok) {\n+      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n+    }\n+\n+    const result = await response.json();\n+\n+    if (!result.success) {\n+      throw new Error(result.message || '获取功能配置失败');\n+    }\n+\n+    console.log(`✅ 获取到 ${result.data.length} 个启用的功能`);\n+    return result.data;\n+\n+  } catch (error) {\n+    console.warn('⚠️ 从API获取功能配置失败，使用默认配置:', error.message);\n+\n+    // 降级到静态配置\n+    return getEnabledFeatures();\n+  }\n }\n \n /**\n  * 更新功能配置\n"
                },
                {
                    "date": 1753543721916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { UndressWomanIcon, FaceSwapIcon } from '../components/icons'\n+import { SvgIcon } from '../components/icons'\n \n /**\n  * 功能配置文件\n  * 用于管理首页功能卡片的显示和配置\n"
                },
                {
                    "date": 1753543732895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n     title: '一键褪衣',\n     description: '智能识别人物轮廓，快速移除照片中的服装，体验前沿AI技术',\n     route: '/clothes-swap',\n     icon: {\n-      type: 'custom', // 'custom' | 'vant'\n-      component: UndressWomanIcon,\n+      type: 'svg', // 'svg' | 'vant' | 'custom'\n+      name: 'undress-woman',\n       size: 28,\n       color: '#667eea'\n     },\n     iconClass: 'undress-icon',\n"
                },
                {
                    "date": 1753543744506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n     title: '极速换脸',\n     description: '精准面部识别技术，实现自然的人脸替换效果，创造有趣内容',\n     route: '/face-swap',\n     icon: {\n-      type: 'custom',\n-      component: FaceSwapIcon,\n+      type: 'svg',\n+      name: 'face-swap',\n       size: 28,\n       color: '#f093fb'\n     },\n     iconClass: 'faceswap-icon',\n"
                },
                {
                    "date": 1753544372561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,11 +143,37 @@\n     if (!result.success) {\n       throw new Error(result.message || '获取功能配置失败');\n     }\n \n-    console.log(`✅ 获取到 ${result.data.length} 个启用的功能`);\n-    return result.data;\n+    // 修复API返回的图标配置\n+    const fixedFeatures = result.data.map(feature => {\n+      const fixedFeature = { ...feature };\n \n+      // 如果图标配置仍然是旧格式，转换为新格式\n+      if (fixedFeature.icon && fixedFeature.icon.type === 'custom') {\n+        if (fixedFeature.icon.component === 'UndressWomanIcon') {\n+          fixedFeature.icon = {\n+            type: 'svg',\n+            name: 'undress-woman',\n+            size: fixedFeature.icon.size || 28,\n+            color: fixedFeature.icon.color || '#667eea'\n+          };\n+        } else if (fixedFeature.icon.component === 'FaceSwapIcon') {\n+          fixedFeature.icon = {\n+            type: 'svg',\n+            name: 'face-swap',\n+            size: fixedFeature.icon.size || 28,\n+            color: fixedFeature.icon.color || '#f093fb'\n+          };\n+        }\n+      }\n+\n+      return fixedFeature;\n+    });\n+\n+    console.log(`✅ 获取到 ${fixedFeatures.length} 个启用的功能`);\n+    return fixedFeatures;\n+\n   } catch (error) {\n     console.warn('⚠️ 从API获取功能配置失败，使用默认配置:', error.message);\n \n     // 降级到静态配置\n"
                },
                {
                    "date": 1753711124583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,14 @@\n export async function fetchFeaturesFromAPI() {\n   try {\n     console.log('🔄 从API获取功能配置...');\n \n+    // 构建正确的API URL\n+    const baseUrl = import.meta.env.DEV ? '' : (import.meta.env.VITE_API_BASE_URL || 'http://114.132.50.71:3007/api').replace('/api', '');\n+    const apiUrl = `${baseUrl}/api/workflow-config/features`;\n+\n     // 调用后台API获取启用的功能\n-    const response = await fetch('/api/workflow-config/features');\n+    const response = await fetch(apiUrl);\n \n     if (!response.ok) {\n       throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n     }\n"
                },
                {
                    "date": 1753712175152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n   try {\n     console.log('🔄 从API获取功能配置...');\n \n     // 构建正确的API URL\n-    const baseUrl = import.meta.env.DEV ? '' : (import.meta.env.VITE_API_BASE_URL || 'http://114.132.50.71:3007/api').replace('/api', '');\n+    const baseUrl = import.meta.env.DEV ? '' : 'http://114.132.50.71:3007';\n     const apiUrl = `${baseUrl}/api/workflow-config/features`;\n \n     // 调用后台API获取启用的功能\n     const response = await fetch(apiUrl);\n"
                },
                {
                    "date": 1753712533395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n   try {\n     console.log('🔄 从API获取功能配置...');\n \n     // 构建正确的API URL\n-    const baseUrl = import.meta.env.DEV ? '' : 'http://114.132.50.71:3007';\n+    const baseUrl = import.meta.env.MODE === 'development' ? '' : 'http://114.132.50.71:3007';\n     const apiUrl = `${baseUrl}/api/workflow-config/features`;\n \n     // 调用后台API获取启用的功能\n     const response = await fetch(apiUrl);\n"
                },
                {
                    "date": 1753719415003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n   try {\n     console.log('🔄 从API获取功能配置...');\n \n     // 构建正确的API URL\n-    const baseUrl = import.meta.env.MODE === 'development' ? '' : 'http://114.132.50.71:3007';\n+    const baseUrl = import.meta.env.MODE === 'development' ? '' : (import.meta.env.VITE_API_BASE_URL || 'http://114.132.50.71:3007').replace('/api', '');\n     const apiUrl = `${baseUrl}/api/workflow-config/features`;\n \n     // 调用后台API获取启用的功能\n     const response = await fetch(apiUrl);\n"
                }
            ],
            "date": 1752436588345,
            "name": "Commit-0",
            "content": "import { UndressWomanIcon, FaceSwapIcon } from '../components/icons'\n\n/**\n * 功能配置文件\n * 用于管理首页功能卡片的显示和配置\n * 后续可以改为从后台API获取\n */\n\n// 功能配置数据结构\nexport const FEATURE_CONFIGS = [\n  {\n    id: 'clothes-swap',\n    title: '一键褪衣',\n    description: '智能识别人物轮廓，快速移除照片中的服装，体验前沿AI技术',\n    route: '/clothes-swap',\n    icon: {\n      type: 'custom', // 'custom' | 'vant'\n      component: UndressWomanIcon,\n      size: 28,\n      color: '#667eea'\n    },\n    iconClass: 'undress-icon',\n    tags: [\n      { text: 'AI识别', type: 'primary' },\n      { text: '快速处理', type: 'success' }\n    ],\n    requireLogin: true,\n    enabled: true,\n    order: 1,\n    // 后台管理相关字段\n    category: 'image-processing',\n    pointsCost: 20,\n    description_admin: '一键褪衣功能管理'\n  },\n  {\n    id: 'face-swap',\n    title: '极速换脸',\n    description: '精准面部识别技术，实现自然的人脸替换效果，创造有趣内容',\n    route: '/face-swap',\n    icon: {\n      type: 'custom',\n      component: FaceSwapIcon,\n      size: 28,\n      color: '#f093fb'\n    },\n    iconClass: 'faceswap-icon',\n    tags: [\n      { text: '面部识别', type: 'warning' },\n      { text: '自然效果', type: 'primary' }\n    ],\n    requireLogin: true,\n    enabled: true,\n    order: 2,\n    category: 'image-processing',\n    pointsCost: 20,\n    description_admin: '极速换脸功能管理'\n  },\n\n]\n\n// 图标样式配置\nexport const ICON_STYLES = {\n  'undress-icon': {\n    background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(102, 126, 234, 0.1))',\n    border: '1px solid rgba(102, 126, 234, 0.3)',\n    darkBackground: 'linear-gradient(135deg, rgba(102, 126, 234, 0.3), rgba(102, 126, 234, 0.1))',\n    darkBorder: '1px solid rgba(102, 126, 234, 0.4)'\n  },\n  'faceswap-icon': {\n    background: 'linear-gradient(135deg, rgba(240, 147, 251, 0.2), rgba(240, 147, 251, 0.1))',\n    border: '1px solid rgba(240, 147, 251, 0.3)',\n    darkBackground: 'linear-gradient(135deg, rgba(240, 147, 251, 0.3), rgba(240, 147, 251, 0.1))',\n    darkBorder: '1px solid rgba(240, 147, 251, 0.4)'\n  },\n\n}\n\n// 标签类型配置\nexport const TAG_TYPES = {\n  primary: {\n    background: 'rgba(102, 126, 234, 0.15)',\n    borderColor: 'rgba(102, 126, 234, 0.3)',\n    color: 'rgba(102, 126, 234, 0.9)'\n  },\n  success: {\n    background: 'rgba(16, 185, 129, 0.15)',\n    borderColor: 'rgba(16, 185, 129, 0.3)',\n    color: 'rgba(16, 185, 129, 0.9)'\n  },\n  warning: {\n    background: 'rgba(245, 158, 11, 0.15)',\n    borderColor: 'rgba(245, 158, 11, 0.3)',\n    color: 'rgba(245, 158, 11, 0.9)'\n  }\n}\n\n/**\n * 获取启用的功能配置\n * @returns {Array} 启用的功能配置列表\n */\nexport function getEnabledFeatures() {\n  return FEATURE_CONFIGS\n    .filter(feature => feature.enabled)\n    .sort((a, b) => a.order - b.order)\n}\n\n/**\n * 根据ID获取功能配置\n * @param {string} id 功能ID\n * @returns {Object|null} 功能配置对象\n */\nexport function getFeatureById(id) {\n  return FEATURE_CONFIGS.find(feature => feature.id === id) || null\n}\n\n/**\n * 获取功能的图标样式\n * @param {string} iconClass 图标类名\n * @returns {Object} 图标样式对象\n */\nexport function getIconStyle(iconClass) {\n  return ICON_STYLES[iconClass] || {}\n}\n\n/**\n * 模拟从后台API获取功能配置\n * 后续可以替换为真实的API调用\n * @returns {Promise<Array>} 功能配置列表\n */\nexport async function fetchFeaturesFromAPI() {\n  // 模拟API延迟\n  await new Promise(resolve => setTimeout(resolve, 100))\n\n  // 这里后续可以替换为真实的API调用\n  // const response = await fetch('/api/admin/features')\n  // return response.json()\n\n  return getEnabledFeatures()\n}\n\n/**\n * 更新功能配置\n * 后续用于后台管理功能\n * @param {string} id 功能ID\n * @param {Object} updates 更新的配置\n * @returns {Promise<boolean>} 更新是否成功\n */\nexport async function updateFeatureConfig(id, updates) {\n  // 模拟API调用\n  console.log(`更新功能配置: ${id}`, updates)\n\n  // 这里后续可以替换为真实的API调用\n  // const response = await fetch(`/api/admin/features/${id}`, {\n  //   method: 'PUT',\n  //   headers: { 'Content-Type': 'application/json' },\n  //   body: JSON.stringify(updates)\n  // })\n  // return response.ok\n\n  return true\n}\n"
        }
    ]
}