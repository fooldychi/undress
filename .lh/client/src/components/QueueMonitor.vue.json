{
    "sourceFile": "client/src/components/QueueMonitor.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753203469893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753203469893,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"queue-monitor\">\n    <!-- 队列状态概览 -->\n    <div class=\"queue-overview\">\n      <h3 class=\"monitor-title\">\n        <span class=\"title-icon\">📊</span>\n        任务队列监控\n        <span class=\"status-indicator\" :class=\"{ 'paused': queueStatus.isPaused }\">\n          {{ queueStatus.isPaused ? '⏸️' : '▶️' }}\n        </span>\n      </h3>\n\n      <div class=\"stats-grid\">\n        <div class=\"stat-card queued\">\n          <div class=\"stat-value\">{{ queueStatus.queued }}</div>\n          <div class=\"stat-label\">排队中</div>\n        </div>\n\n        <div class=\"stat-card processing\">\n          <div class=\"stat-value\">{{ queueStatus.processing }}</div>\n          <div class=\"stat-label\">处理中</div>\n        </div>\n\n        <div class=\"stat-card completed\">\n          <div class=\"stat-value\">{{ queueStatus.completed }}</div>\n          <div class=\"stat-label\">已完成</div>\n        </div>\n\n        <div class=\"stat-card failed\">\n          <div class=\"stat-value\">{{ queueStatus.failed }}</div>\n          <div class=\"stat-label\">失败</div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 性能统计 -->\n    <div class=\"performance-stats\" v-if=\"queueStatus.stats\">\n      <h4>📈 性能统计</h4>\n      <div class=\"stats-row\">\n        <span>总处理: {{ queueStatus.stats.totalProcessed }}</span>\n        <span>成功率: {{ successRate }}%</span>\n        <span>平均耗时: {{ averageTime }}s</span>\n        <span>重试次数: {{ queueStatus.stats.totalRetried }}</span>\n      </div>\n    </div>\n\n    <!-- 控制按钮 -->\n    <div class=\"queue-controls\">\n      <button\n        @click=\"pauseQueue\"\n        :disabled=\"queueStatus.isPaused\"\n        class=\"control-btn pause-btn\"\n      >\n        ⏸️ 暂停队列\n      </button>\n\n      <button\n        @click=\"resumeQueue\"\n        :disabled=\"!queueStatus.isPaused\"\n        class=\"control-btn resume-btn\"\n      >\n        ▶️ 恢复队列\n      </button>\n\n      <button\n        @click=\"clearQueue\"\n        class=\"control-btn clear-btn\"\n        :disabled=\"queueStatus.queued === 0\"\n      >\n        🧹 清空队列\n      </button>\n\n      <button\n        @click=\"refreshStatus\"\n        class=\"control-btn refresh-btn\"\n      >\n        🔄 刷新状态\n      </button>\n    </div>\n\n    <!-- 正在处理的任务详情 -->\n    <div class=\"processing-details\" v-if=\"processingTasks.length > 0\">\n      <h4>🔄 正在处理的任务</h4>\n      <div class=\"task-list\">\n        <div\n          v-for=\"task in processingTasks\"\n          :key=\"task.id\"\n          class=\"task-item processing\"\n        >\n          <div class=\"task-header\">\n            <span class=\"task-id\">{{ task.id.substring(0, 12) }}...</span>\n            <span class=\"task-type\">{{ task.workflowType }}</span>\n            <span class=\"task-time\">{{ formatDuration(task.processingTime) }}</span>\n          </div>\n\n          <div class=\"task-progress\" v-if=\"task.progressHistory.length > 0\">\n            <div class=\"progress-bar\">\n              <div\n                class=\"progress-fill\"\n                :style=\"{ width: getLatestProgress(task) + '%' }\"\n              ></div>\n            </div>\n            <span class=\"progress-text\">\n              {{ getLatestProgressMessage(task) }}\n            </span>\n          </div>\n\n          <div class=\"task-status\">\n            <span class=\"status-text\">\n              进度更新: {{ formatTimeAgo(task.timeSinceLastProgress) }}\n            </span>\n            <span\n              class=\"stuck-warning\"\n              v-if=\"task.timeSinceLastProgress > 60000\"\n            >\n              ⚠️ 可能卡住\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 排队任务列表 -->\n    <div class=\"queued-details\" v-if=\"queuedTasks.length > 0\">\n      <h4>📥 排队任务 ({{ queuedTasks.length }})</h4>\n      <div class=\"task-list\">\n        <div\n          v-for=\"(task, index) in queuedTasks.slice(0, 5)\"\n          :key=\"task.id\"\n          class=\"task-item queued\"\n        >\n          <div class=\"task-header\">\n            <span class=\"queue-position\">#{{ index + 1 }}</span>\n            <span class=\"task-id\">{{ task.id.substring(0, 12) }}...</span>\n            <span class=\"task-type\">{{ task.workflowType }}</span>\n            <span class=\"priority-badge\" :class=\"'priority-' + task.priority\">\n              P{{ task.priority }}\n            </span>\n          </div>\n          <div class=\"task-status\">\n            等待时间: {{ formatDuration(task.waitingTime) }}\n          </div>\n        </div>\n\n        <div v-if=\"queuedTasks.length > 5\" class=\"more-tasks\">\n          还有 {{ queuedTasks.length - 5 }} 个任务...\n        </div>\n      </div>\n    </div>\n\n    <!-- 最近完成/失败的任务 -->\n    <div class=\"recent-tasks\" v-if=\"showRecentTasks\">\n      <div class=\"recent-section\" v-if=\"recentCompleted.length > 0\">\n        <h4>✅ 最近完成 ({{ recentCompleted.length }})</h4>\n        <div class=\"task-list\">\n          <div\n            v-for=\"task in recentCompleted.slice(0, 3)\"\n            :key=\"task.id\"\n            class=\"task-item completed\"\n          >\n            <div class=\"task-header\">\n              <span class=\"task-id\">{{ task.id.substring(0, 12) }}...</span>\n              <span class=\"task-type\">{{ task.workflowType }}</span>\n              <span class=\"task-time\">{{ formatDuration(task.processingTime) }}</span>\n            </div>\n            <div class=\"task-status\">\n              完成时间: {{ formatTimeAgo(Date.now() - task.completedAt) }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"recent-section\" v-if=\"recentFailed.length > 0\">\n        <h4>❌ 最近失败 ({{ recentFailed.length }})</h4>\n        <div class=\"task-list\">\n          <div\n            v-for=\"task in recentFailed.slice(0, 3)\"\n            :key=\"task.id\"\n            class=\"task-item failed\"\n          >\n            <div class=\"task-header\">\n              <span class=\"task-id\">{{ task.id.substring(0, 12) }}...</span>\n              <span class=\"task-type\">{{ task.workflowType }}</span>\n              <span class=\"attempts\">{{ task.attempts }}次尝试</span>\n            </div>\n            <div class=\"task-status\">\n              失败时间: {{ formatTimeAgo(Date.now() - task.failedAt) }}\n            </div>\n            <div class=\"error-message\" v-if=\"task.errors.length > 0\">\n              {{ task.errors[task.errors.length - 1].error }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 展开/收起按钮 -->\n    <div class=\"toggle-section\">\n      <button\n        @click=\"showRecentTasks = !showRecentTasks\"\n        class=\"toggle-btn\"\n      >\n        {{ showRecentTasks ? '收起' : '展开' }}历史记录\n        {{ showRecentTasks ? '▲' : '▼' }}\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'QueueMonitor',\n  data() {\n    return {\n      queueStatus: {\n        queued: 0,\n        processing: 0,\n        completed: 0,\n        failed: 0,\n        maxConcurrent: 3,\n        isPaused: false,\n        stats: {\n          totalProcessed: 0,\n          totalSucceeded: 0,\n          totalFailed: 0,\n          totalRetried: 0,\n          averageProcessingTime: 0\n        }\n      },\n      detailedStatus: {\n        queuedTasks: [],\n        processingTasks: [],\n        recentCompleted: [],\n        recentFailed: []\n      },\n      showRecentTasks: false,\n      updateInterval: null\n    }\n  },\n  computed: {\n    successRate() {\n      const total = this.queueStatus.stats.totalSucceeded + this.queueStatus.stats.totalFailed\n      if (total === 0) return 0\n      return Math.round((this.queueStatus.stats.totalSucceeded / total) * 100)\n    },\n\n    averageTime() {\n      return Math.round(this.queueStatus.stats.averageProcessingTime / 1000)\n    },\n\n    queuedTasks() {\n      return this.detailedStatus.queuedTasks || []\n    },\n\n    processingTasks() {\n      return this.detailedStatus.processingTasks || []\n    },\n\n    recentCompleted() {\n      return this.detailedStatus.recentCompleted || []\n    },\n\n    recentFailed() {\n      return this.detailedStatus.recentFailed || []\n    }\n  },\n  mounted() {\n    this.startMonitoring()\n  },\n  beforeDestroy() {\n    this.stopMonitoring()\n  },\n  methods: {\n    startMonitoring() {\n      this.updateStatus()\n      this.updateInterval = setInterval(() => {\n        this.updateStatus()\n      }, 2000) // 每2秒更新一次\n    },\n\n    stopMonitoring() {\n      if (this.updateInterval) {\n        clearInterval(this.updateInterval)\n        this.updateInterval = null\n      }\n    },\n\n    updateStatus() {\n      if (window.taskQueueManager) {\n        this.queueStatus = window.taskQueueManager.getQueueStatus()\n        this.detailedStatus = window.taskQueueManager.getDetailedStatus()\n      }\n    },\n\n    pauseQueue() {\n      if (window.taskQueueManager) {\n        window.taskQueueManager.pause()\n        this.updateStatus()\n      }\n    },\n\n    resumeQueue() {\n      if (window.taskQueueManager) {\n        window.taskQueueManager.resume()\n        this.updateStatus()\n      }\n    },\n\n    clearQueue() {\n      if (window.taskQueueManager && confirm('确定要清空队列吗？这将取消所有排队中的任务。')) {\n        window.taskQueueManager.clearQueue()\n        this.updateStatus()\n      }\n    },\n\n    refreshStatus() {\n      this.updateStatus()\n    },\n\n    getLatestProgress(task) {\n      if (!task.progressHistory || task.progressHistory.length === 0) return 0\n      return task.progressHistory[task.progressHistory.length - 1].percent || 0\n    },\n\n    getLatestProgressMessage(task) {\n      if (!task.progressHistory || task.progressHistory.length === 0) return '等待中...'\n      return task.progressHistory[task.progressHistory.length - 1].message || '处理中...'\n    },\n\n    formatDuration(ms) {\n      const seconds = Math.floor(ms / 1000)\n      const minutes = Math.floor(seconds / 60)\n      const hours = Math.floor(minutes / 60)\n\n      if (hours > 0) {\n        return `${hours}h ${minutes % 60}m`\n      } else if (minutes > 0) {\n        return `${minutes}m ${seconds % 60}s`\n      } else {\n        return `${seconds}s`\n      }\n    },\n\n    formatTimeAgo(ms) {\n      const seconds = Math.floor(ms / 1000)\n      const minutes = Math.floor(seconds / 60)\n      const hours = Math.floor(minutes / 60)\n\n      if (hours > 0) {\n        return `${hours}小时前`\n      } else if (minutes > 0) {\n        return `${minutes}分钟前`\n      } else {\n        return `${seconds}秒前`\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.queue-monitor {\n  background: #f8f9fa;\n  border-radius: 12px;\n  padding: 20px;\n  margin: 20px 0;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n/* 标题样式 */\n.monitor-title {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin: 0 0 20px 0;\n  font-size: 18px;\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.title-icon {\n  font-size: 20px;\n}\n\n.status-indicator {\n  margin-left: auto;\n  font-size: 16px;\n}\n\n.status-indicator.paused {\n  color: #f39c12;\n}\n\n/* 统计网格 */\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 16px;\n  margin-bottom: 20px;\n}\n\n.stat-card {\n  background: white;\n  border-radius: 8px;\n  padding: 16px;\n  text-align: center;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n  border-left: 4px solid;\n}\n\n.stat-card.queued {\n  border-left-color: #3498db;\n}\n\n.stat-card.processing {\n  border-left-color: #f39c12;\n}\n\n.stat-card.completed {\n  border-left-color: #27ae60;\n}\n\n.stat-card.failed {\n  border-left-color: #e74c3c;\n}\n\n.stat-value {\n  font-size: 24px;\n  font-weight: bold;\n  margin-bottom: 4px;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #7f8c8d;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n/* 性能统计 */\n.performance-stats {\n  background: white;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 20px;\n  border: 1px solid #e9ecef;\n}\n\n.performance-stats h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  color: #2c3e50;\n}\n\n.stats-row {\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  font-size: 13px;\n  color: #5a6c7d;\n}\n\n.stats-row span {\n  background: #f8f9fa;\n  padding: 4px 8px;\n  border-radius: 4px;\n  border: 1px solid #e9ecef;\n}\n\n/* 控制按钮 */\n.queue-controls {\n  display: flex;\n  gap: 12px;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n}\n\n.control-btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 6px;\n  font-size: 13px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.control-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.pause-btn {\n  background: #f39c12;\n  color: white;\n}\n\n.pause-btn:hover:not(:disabled) {\n  background: #e67e22;\n}\n\n.resume-btn {\n  background: #27ae60;\n  color: white;\n}\n\n.resume-btn:hover:not(:disabled) {\n  background: #229954;\n}\n\n.clear-btn {\n  background: #e74c3c;\n  color: white;\n}\n\n.clear-btn:hover:not(:disabled) {\n  background: #c0392b;\n}\n\n.refresh-btn {\n  background: #3498db;\n  color: white;\n}\n\n.refresh-btn:hover:not(:disabled) {\n  background: #2980b9;\n}\n\n/* 任务详情区域 */\n.processing-details,\n.queued-details,\n.recent-tasks {\n  background: white;\n  border-radius: 8px;\n  padding: 16px;\n  margin-bottom: 16px;\n  border: 1px solid #e9ecef;\n}\n\n.processing-details h4,\n.queued-details h4,\n.recent-section h4 {\n  margin: 0 0 12px 0;\n  font-size: 14px;\n  color: #2c3e50;\n}\n\n/* 任务列表 */\n.task-list {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.task-item {\n  background: #f8f9fa;\n  border-radius: 6px;\n  padding: 12px;\n  border-left: 3px solid;\n}\n\n.task-item.queued {\n  border-left-color: #3498db;\n}\n\n.task-item.processing {\n  border-left-color: #f39c12;\n}\n\n.task-item.completed {\n  border-left-color: #27ae60;\n}\n\n.task-item.failed {\n  border-left-color: #e74c3c;\n}\n\n.task-header {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 4px;\n  flex-wrap: wrap;\n}\n\n.task-id {\n  font-family: 'Courier New', monospace;\n  font-size: 11px;\n  background: #e9ecef;\n  padding: 2px 6px;\n  border-radius: 3px;\n  color: #495057;\n}\n\n.task-type {\n  background: #007bff;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 12px;\n  font-size: 11px;\n  font-weight: 500;\n}\n\n.task-time {\n  font-size: 11px;\n  color: #6c757d;\n  margin-left: auto;\n}\n\n.queue-position {\n  background: #6c757d;\n  color: white;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 10px;\n  font-weight: bold;\n}\n\n.priority-badge {\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 10px;\n  font-weight: bold;\n}\n\n.priority-1 {\n  background: #d1ecf1;\n  color: #0c5460;\n}\n\n.priority-2 {\n  background: #d4edda;\n  color: #155724;\n}\n\n.priority-3 {\n  background: #fff3cd;\n  color: #856404;\n}\n\n.priority-4 {\n  background: #f8d7da;\n  color: #721c24;\n}\n\n.attempts {\n  font-size: 11px;\n  color: #dc3545;\n  font-weight: 500;\n}\n\n/* 进度条 */\n.task-progress {\n  margin: 8px 0 4px 0;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 4px;\n  background: #e9ecef;\n  border-radius: 2px;\n  overflow: hidden;\n  margin-bottom: 4px;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #3498db, #2ecc71);\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  font-size: 11px;\n  color: #6c757d;\n}\n\n/* 任务状态 */\n.task-status {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 11px;\n  color: #6c757d;\n}\n\n.status-text {\n  flex: 1;\n}\n\n.stuck-warning {\n  background: #fff3cd;\n  color: #856404;\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-weight: 500;\n}\n\n.error-message {\n  font-size: 11px;\n  color: #dc3545;\n  background: #f8d7da;\n  padding: 4px 8px;\n  border-radius: 3px;\n  margin-top: 4px;\n  word-break: break-word;\n}\n\n/* 更多任务提示 */\n.more-tasks {\n  text-align: center;\n  font-size: 12px;\n  color: #6c757d;\n  padding: 8px;\n  background: #f8f9fa;\n  border-radius: 4px;\n  border: 1px dashed #dee2e6;\n}\n\n/* 最近任务区域 */\n.recent-tasks {\n  border-top: 2px solid #e9ecef;\n}\n\n.recent-section {\n  margin-bottom: 16px;\n}\n\n.recent-section:last-child {\n  margin-bottom: 0;\n}\n\n/* 展开/收起按钮 */\n.toggle-section {\n  text-align: center;\n  margin-top: 16px;\n}\n\n.toggle-btn {\n  background: #6c757d;\n  color: white;\n  border: none;\n  padding: 8px 16px;\n  border-radius: 6px;\n  font-size: 12px;\n  cursor: pointer;\n  transition: background 0.2s ease;\n}\n\n.toggle-btn:hover {\n  background: #5a6268;\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .queue-monitor {\n    padding: 16px;\n    margin: 16px 0;\n  }\n\n  .stats-grid {\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n  }\n\n  .queue-controls {\n    flex-direction: column;\n  }\n\n  .control-btn {\n    width: 100%;\n    justify-content: center;\n  }\n\n  .task-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 4px;\n  }\n\n  .task-time {\n    margin-left: 0;\n  }\n\n  .stats-row {\n    flex-direction: column;\n    gap: 8px;\n  }\n}\n</style>\n"
        }
    ]
}