{
    "sourceFile": "client/src/components/TopNavigation.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752290874113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752290897253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,13 @@\n let statusUpdateTimer = null\n \n // 更新积分状态\n const updatePointsStatus = async () => {\n+  console.log('🔄 更新积分状态，当前登录状态:', levelCardPointsManager.isLoggedIn(), isLoggedIn.value)\n+\n   // 检查登录状态，如果未登录则不发送API请求\n-  if (!levelCardPointsManager.isLoggedIn()) {\n+  if (!levelCardPointsManager.isLoggedIn() || !isLoggedIn.value) {\n+    console.log('❌ 未登录，设置默认积分状态')\n     Object.assign(pointsStatus, {\n       current: 0,\n       total_points: 0,\n       cards_count: 0,\n@@ -98,14 +101,17 @@\n     return\n   }\n \n   try {\n+    console.log('🚀 发送积分API请求...')\n     const newStatus = await levelCardPointsManager.getPointsStatus()\n+    console.log('✅ 积分状态更新成功:', newStatus)\n     Object.assign(pointsStatus, newStatus)\n   } catch (error) {\n-    console.error('更新积分状态失败:', error)\n+    console.error('❌ 更新积分状态失败:', error)\n     // 认证错误处理\n     if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n+      console.log('🔒 认证错误，重置积分状态')\n       Object.assign(pointsStatus, {\n         current: 0,\n         total_points: 0,\n         cards_count: 0,\n"
                },
                {
                    "date": 1752290912678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,21 +167,24 @@\n }\n \n // 初始化用户信息\n const initUserInfo = () => {\n-  console.log('初始化用户信息...')\n+  console.log('🔄 初始化用户信息...')\n   const token = authApi.getToken()\n   const localUserInfo = authApi.getLocalUserInfo()\n \n   console.log('Token存在:', !!token)\n   console.log('本地用户信息:', localUserInfo)\n \n   if (token && localUserInfo) {\n     userInfo.value = localUserInfo\n-    console.log('设置用户信息:', userInfo.value)\n+    pointsStatus.isLoggedIn = true\n+    console.log('✅ 设置用户信息:', userInfo.value)\n+    console.log('✅ 设置登录状态为true')\n   } else {\n-    console.log('未找到有效的登录信息')\n+    console.log('❌ 未找到有效的登录信息')\n     userInfo.value = null\n+    pointsStatus.isLoggedIn = false\n   }\n }\n \n // 监听localStorage变化\n"
                },
                {
                    "date": 1752290981271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,9 +220,13 @@\n // 暴露给父组件的方法\n defineExpose({\n   updatePointsStatus,\n   getCurrentPoints: () => pointsStatus.current,\n-  hasEnoughPoints: () => pointsStatus.canGenerate\n+  hasEnoughPoints: () => pointsStatus.canGenerate,\n+  showLoginModal: () => {\n+    authMode.value = 'login'\n+    showAuthModal.value = true\n+  }\n })\n </script>\n \n <style scoped>\n"
                },
                {
                    "date": 1752341911904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,18 @@\n <template>\n   <div class=\"top-navigation\">\n-    <!-- 积分显示（左边） -->\n-    <div class=\"nav-item nav-points\" @click=\"showPointsModal = true\" title=\"点击查看积分详情\">\n+    <!-- 积分显示（左边） - 仅在登录时显示 -->\n+    <div\n+      v-if=\"isLoggedIn\"\n+      class=\"nav-item nav-points\"\n+      @click=\"showPointsModal = true\"\n+      title=\"点击查看积分详情\"\n+    >\n       <div class=\"nav-icon\">\n         <van-icon name=\"diamond-o\" size=\"18\" />\n       </div>\n-      <span class=\"nav-text\">{{ pointsStatus.current }}</span>\n+      <span v-if=\"!pointsLoading\" class=\"nav-text\">{{ pointsStatus.current }}</span>\n+      <van-loading v-else size=\"14\" color=\"var(--primary-color)\" />\n     </div>\n \n     <!-- 用户信息（右边） -->\n     <div class=\"nav-item nav-user\">\n"
                },
                {
                    "date": 1752341923307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n const showPointsModal = ref(false)\n const showAuthModal = ref(false)\n const authMode = ref('login')\n const loading = ref(false)\n+const pointsLoading = ref(false)\n \n // 用户信息\n const userInfo = ref(null)\n const isLoggedIn = computed(() => {\n"
                },
                {
                    "date": 1752341943757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n \n   // 检查登录状态，如果未登录则不发送API请求\n   if (!levelCardPointsManager.isLoggedIn() || !isLoggedIn.value) {\n     console.log('❌ 未登录，设置默认积分状态')\n+    pointsLoading.value = false\n     Object.assign(pointsStatus, {\n       current: 0,\n       total_points: 0,\n       cards_count: 0,\n@@ -108,8 +109,9 @@\n     return\n   }\n \n   try {\n+    pointsLoading.value = true\n     console.log('🚀 发送积分API请求...')\n     const newStatus = await levelCardPointsManager.getPointsStatus()\n     console.log('✅ 积分状态更新成功:', newStatus)\n     Object.assign(pointsStatus, newStatus)\n@@ -126,8 +128,10 @@\n         generationCost: 20,\n         isLoggedIn: false\n       })\n     }\n+  } finally {\n+    pointsLoading.value = false\n   }\n }\n \n // 显示登录弹窗\n"
                },
                {
                    "date": 1752341960528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n   showAuthModal.value = true\n }\n \n // 处理认证成功\n-const handleAuthSuccess = (data) => {\n+const handleAuthSuccess = async (data) => {\n   console.log('认证成功，更新用户信息:', data)\n \n   // 立即更新用户信息\n   userInfo.value = data.user\n@@ -157,12 +157,10 @@\n \n   // 触发父组件的登录事件\n   emit('login', data)\n \n-  // 延迟更新积分状态，确保登录状态已同步\n-  setTimeout(() => {\n-    updatePointsStatus()\n-  }, 100)\n+  // 立即更新积分状态，显示加载状态\n+  await updatePointsStatus()\n \n   // 关闭弹窗\n   showAuthModal.value = false\n }\n"
                },
                {
                    "date": 1752342580448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,10 +170,16 @@\n   router.push('/profile')\n }\n \n // 处理积分更新\n-const handlePointsUpdated = () => {\n-  updatePointsStatus()\n+const handlePointsUpdated = async () => {\n+  console.log('🔄 收到积分更新事件，强制刷新积分状态')\n+  // 清除levelCardPointsManager的缓存，确保获取最新数据\n+  levelCardPointsManager.pointsInfo = null\n+  levelCardPointsManager.lastUpdateTime = 0\n+\n+  // 更新积分状态\n+  await updatePointsStatus()\n }\n \n // 初始化用户信息\n const initUserInfo = () => {\n"
                },
                {
                    "date": 1752342628711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,10 +173,9 @@\n // 处理积分更新\n const handlePointsUpdated = async () => {\n   console.log('🔄 收到积分更新事件，强制刷新积分状态')\n   // 清除levelCardPointsManager的缓存，确保获取最新数据\n-  levelCardPointsManager.pointsInfo = null\n-  levelCardPointsManager.lastUpdateTime = 0\n+  levelCardPointsManager.clearCache()\n \n   // 更新积分状态\n   await updatePointsStatus()\n }\n"
                }
            ],
            "date": 1752290874113,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"top-navigation\">\n    <!-- 积分显示（左边） -->\n    <div class=\"nav-item nav-points\" @click=\"showPointsModal = true\" title=\"点击查看积分详情\">\n      <div class=\"nav-icon\">\n        <van-icon name=\"diamond-o\" size=\"18\" />\n      </div>\n      <span class=\"nav-text\">{{ pointsStatus.current }}</span>\n    </div>\n\n    <!-- 用户信息（右边） -->\n    <div class=\"nav-item nav-user\">\n      <!-- 未登录状态 -->\n      <div v-if=\"!isLoggedIn\" class=\"nav-login\" @click=\"showLoginModal\" title=\"点击登录\">\n        <div class=\"nav-icon\">\n          <van-icon name=\"user-o\" size=\"18\" />\n        </div>\n        <span class=\"nav-text\">登录</span>\n      </div>\n\n      <!-- 已登录状态 -->\n      <div v-else class=\"nav-avatar\" @click=\"goToProfile\" title=\"点击进入个人中心\">\n        <div class=\"nav-icon\">\n          <van-icon name=\"user-o\" size=\"18\" />\n        </div>\n      </div>\n    </div>\n\n    <!-- 积分弹窗 -->\n    <PointsModal\n      v-model:show=\"showPointsModal\"\n      @points-updated=\"handlePointsUpdated\"\n    />\n\n    <!-- 登录注册弹窗 -->\n    <AuthModal\n      v-model:show=\"showAuthModal\"\n      :default-mode=\"authMode\"\n      @success=\"handleAuthSuccess\"\n    />\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted, onUnmounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { Toast } from 'vant'\nimport { authApi } from '../services/api.js'\nimport levelCardPointsManager from '../utils/levelCardPointsManager.js'\nimport PointsModal from './PointsModal.vue'\nimport AuthModal from './AuthModal.vue'\n\n// 定义事件\nconst emit = defineEmits(['login', 'logout'])\n\n// 路由\nconst router = useRouter()\n\n// 响应式数据\nconst showPointsModal = ref(false)\nconst showAuthModal = ref(false)\nconst authMode = ref('login')\nconst loading = ref(false)\n\n// 用户信息\nconst userInfo = ref(null)\nconst isLoggedIn = computed(() => {\n  const hasToken = authApi.isLoggedIn()\n  const hasUserInfo = !!userInfo.value\n  return hasToken && hasUserInfo\n})\n\n// 积分状态\nconst pointsStatus = reactive({\n  current: 0,\n  total_points: 0,\n  cards_count: 0,\n  canGenerate: false,\n  generationCost: 20,\n  isLoggedIn: false\n})\n\n// 定时器\nlet statusUpdateTimer = null\n\n// 更新积分状态\nconst updatePointsStatus = async () => {\n  // 检查登录状态，如果未登录则不发送API请求\n  if (!levelCardPointsManager.isLoggedIn()) {\n    Object.assign(pointsStatus, {\n      current: 0,\n      total_points: 0,\n      cards_count: 0,\n      canGenerate: false,\n      generationCost: 20,\n      isLoggedIn: false\n    })\n    return\n  }\n\n  try {\n    const newStatus = await levelCardPointsManager.getPointsStatus()\n    Object.assign(pointsStatus, newStatus)\n  } catch (error) {\n    console.error('更新积分状态失败:', error)\n    // 认证错误处理\n    if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n      Object.assign(pointsStatus, {\n        current: 0,\n        total_points: 0,\n        cards_count: 0,\n        canGenerate: false,\n        generationCost: 20,\n        isLoggedIn: false\n      })\n    }\n  }\n}\n\n// 显示登录弹窗\nconst showLoginModal = () => {\n  authMode.value = 'login'\n  showAuthModal.value = true\n}\n\n// 处理认证成功\nconst handleAuthSuccess = (data) => {\n  console.log('认证成功，更新用户信息:', data)\n\n  // 立即更新用户信息\n  userInfo.value = data.user\n\n  // 确保localStorage中的数据是最新的\n  if (data.user) {\n    localStorage.setItem('user_info', JSON.stringify(data.user))\n  }\n\n  // 立即更新积分状态中的登录状态\n  pointsStatus.isLoggedIn = true\n\n  // 触发父组件的登录事件\n  emit('login', data)\n\n  // 延迟更新积分状态，确保登录状态已同步\n  setTimeout(() => {\n    updatePointsStatus()\n  }, 100)\n\n  // 关闭弹窗\n  showAuthModal.value = false\n}\n\n// 跳转到个人中心\nconst goToProfile = () => {\n  router.push('/profile')\n}\n\n// 处理积分更新\nconst handlePointsUpdated = () => {\n  updatePointsStatus()\n}\n\n// 初始化用户信息\nconst initUserInfo = () => {\n  console.log('初始化用户信息...')\n  const token = authApi.getToken()\n  const localUserInfo = authApi.getLocalUserInfo()\n\n  console.log('Token存在:', !!token)\n  console.log('本地用户信息:', localUserInfo)\n\n  if (token && localUserInfo) {\n    userInfo.value = localUserInfo\n    console.log('设置用户信息:', userInfo.value)\n  } else {\n    console.log('未找到有效的登录信息')\n    userInfo.value = null\n  }\n}\n\n// 监听localStorage变化\nconst handleStorageChange = (event) => {\n  console.log('localStorage变化:', event)\n  if (event.key === 'auth_token' || event.key === 'user_info') {\n    console.log('认证相关数据变化，重新初始化')\n    initUserInfo()\n    updatePointsStatus()\n  }\n}\n\n// 组件挂载时初始化\nonMounted(() => {\n  initUserInfo()\n  updatePointsStatus()\n\n  // 监听storage事件（跨标签页同步）\n  window.addEventListener('storage', handleStorageChange)\n\n  // 每30秒更新一次状态\n  statusUpdateTimer = setInterval(updatePointsStatus, 30000)\n})\n\n// 组件卸载时清理\nonUnmounted(() => {\n  window.removeEventListener('storage', handleStorageChange)\n  if (statusUpdateTimer) {\n    clearInterval(statusUpdateTimer)\n  }\n})\n\n// 暴露给父组件的方法\ndefineExpose({\n  updatePointsStatus,\n  getCurrentPoints: () => pointsStatus.current,\n  hasEnoughPoints: () => pointsStatus.canGenerate\n})\n</script>\n\n<style scoped>\n.top-navigation {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  z-index: 1000;\n}\n\n.nav-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  padding: 8px 12px;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.nav-item:hover {\n  background: rgba(255, 255, 255, 1);\n  border-color: #1989fa;\n  box-shadow: 0 4px 12px rgba(25, 137, 250, 0.2);\n  transform: translateY(-1px);\n}\n\n.nav-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  color: #1989fa;\n}\n\n.nav-text {\n  font-size: 14px;\n  font-weight: 500;\n  color: #323233;\n  white-space: nowrap;\n}\n\n.nav-points {\n  order: 1; /* 积分在左边 */\n}\n\n.nav-user {\n  order: 2; /* 用户在右边 */\n}\n\n.nav-login {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.nav-avatar {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  background: linear-gradient(135deg, #1989fa, #1976d2);\n  border-radius: 50%;\n  color: white;\n  margin: -4px;\n}\n\n.nav-avatar:hover {\n  background: linear-gradient(135deg, #1976d2, #1565c0);\n  transform: scale(1.05);\n}\n\n/* 深色主题适配 */\n@media (prefers-color-scheme: dark) {\n  .nav-item {\n    background: rgba(30, 30, 30, 0.95);\n    border-color: rgba(255, 255, 255, 0.1);\n  }\n\n  .nav-item:hover {\n    background: rgba(40, 40, 40, 1);\n    border-color: #1989fa;\n  }\n\n  .nav-text {\n    color: #ffffff;\n  }\n}\n\n/* 响应式设计 */\n@media (max-width: 768px) {\n  .top-navigation {\n    top: 15px;\n    right: 15px;\n    gap: 8px;\n  }\n\n  .nav-item {\n    padding: 6px 10px;\n  }\n\n  .nav-text {\n    font-size: 13px;\n  }\n\n  .nav-icon {\n    width: 20px;\n    height: 20px;\n  }\n}\n</style>\n"
        }
    ]
}