{
    "sourceFile": "client/src/components/common/ImagePreviewDisplay.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753637254333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753637347593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,38 +162,14 @@\n }\n \n const downloadImage = async () => {\n   try {\n-    // 获取文件扩展名\n-    const url = props.imageUrl\n-    const extension = url.split('.').pop()?.toLowerCase() || 'jpg'\n-    const fileName = `AI_Magic_${Date.now()}.${extension}`\n+    const { downloadImage: downloadUtil } = await import('../../utils/downloadUtils.js')\n+    const success = await downloadUtil(props.imageUrl, 'AI_Magic_image')\n \n-    // 使用 fetch 获取图片数据，确保强制下载\n-    const response = await fetch(url)\n-    if (!response.ok) {\n-      throw new Error('网络请求失败')\n+    if (success) {\n+      emit('download', props.imageUrl)\n     }\n-\n-    const blob = await response.blob()\n-    const blobUrl = window.URL.createObjectURL(blob)\n-\n-    // 创建下载链接\n-    const link = document.createElement('a')\n-    link.href = blobUrl\n-    link.download = fileName\n-    link.style.display = 'none'\n-\n-    // 添加到DOM，点击，然后移除\n-    document.body.appendChild(link)\n-    link.click()\n-    document.body.removeChild(link)\n-\n-    // 清理blob URL\n-    window.URL.revokeObjectURL(blobUrl)\n-\n-    Toast.success('图片已保存到本地')\n-    emit('download', props.imageUrl)\n   } catch (error) {\n     console.error('下载失败:', error)\n     Toast.fail('下载失败，请重试')\n   }\n"
                }
            ],
            "date": 1753637254333,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"image-preview-display\">\n    <MobileCard :title=\"title\" inset>\n      <div class=\"preview-container\" :style=\"containerStyle\">\n        <div class=\"image-wrapper\">\n          <img\n            :src=\"imageUrl\"\n            :alt=\"title\"\n            class=\"preview-image\"\n            :style=\"imageStyle\"\n            @load=\"onImageLoad\"\n            @error=\"onImageError\"\n            @click=\"previewImage\"\n          />\n\n          <!-- 加载状态 -->\n          <div v-if=\"loading\" class=\"loading-overlay\">\n            <van-loading size=\"24\" color=\"white\" />\n          </div>\n\n          <!-- 错误状态 -->\n          <div v-if=\"error\" class=\"error-overlay\">\n            <van-icon name=\"photo-fail\" size=\"32\" color=\"rgba(255, 255, 255, 0.6)\" />\n            <span class=\"error-text\">图片加载失败</span>\n          </div>\n        </div>\n\n        <!-- 图片信息 -->\n        <div v-if=\"showImageInfo && imageInfo\" class=\"image-info\">\n          <div class=\"info-item\">\n            <van-icon name=\"photo-o\" size=\"14\" />\n            <span>{{ imageInfo.width }} × {{ imageInfo.height }}</span>\n          </div>\n          <div v-if=\"imageInfo.size\" class=\"info-item\">\n            <van-icon name=\"info-o\" size=\"14\" />\n            <span>{{ imageInfo.size }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- 操作按钮 -->\n      <div v-if=\"showActions\" class=\"action-buttons\">\n        <van-button\n          v-if=\"downloadEnabled\"\n          type=\"primary\"\n          size=\"small\"\n          icon=\"down\"\n          @click=\"downloadImage\"\n          class=\"action-btn\"\n        >\n          下载图片\n        </van-button>\n\n        <van-button\n          v-if=\"previewEnabled\"\n          type=\"default\"\n          size=\"small\"\n          icon=\"eye-o\"\n          @click=\"previewImage\"\n          class=\"action-btn\"\n        >\n          预览图片\n        </van-button>\n\n        <van-button\n          v-if=\"editEnabled\"\n          type=\"warning\"\n          size=\"small\"\n          icon=\"edit\"\n          @click=\"$emit('edit')\"\n          class=\"action-btn\"\n        >\n          重新选择\n        </van-button>\n      </div>\n    </MobileCard>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted } from 'vue'\nimport { ImagePreview, Toast } from 'vant'\nimport { MobileCard } from '../mobile'\nimport { ImageSizeUtils } from '../../config/imageSizeConfig.js'\n\n// Props\nconst props = defineProps({\n  imageUrl: {\n    type: String,\n    required: true\n  },\n  title: {\n    type: String,\n    default: '图片预览'\n  },\n  showImageInfo: {\n    type: Boolean,\n    default: true\n  },\n  showActions: {\n    type: Boolean,\n    default: true\n  },\n  downloadEnabled: {\n    type: Boolean,\n    default: true\n  },\n  previewEnabled: {\n    type: Boolean,\n    default: true\n  },\n  editEnabled: {\n    type: Boolean,\n    default: true\n  }\n})\n\n// Events\nconst emit = defineEmits(['edit', 'download'])\n\n// 响应式数据\nconst loading = ref(true)\nconst error = ref(false)\nconst isMobile = ref(false)\nconst imageInfo = ref(null)\n\n// 计算属性\nconst containerStyle = computed(() => {\n  return ImageSizeUtils.getContainerStyle('preview', isMobile.value)\n})\n\nconst imageStyle = computed(() => {\n  return ImageSizeUtils.getImageStyle('preview', isMobile.value)\n})\n\n// 方法\nconst onImageLoad = (event) => {\n  loading.value = false\n  error.value = false\n\n  const img = event.target\n  imageInfo.value = {\n    width: img.naturalWidth,\n    height: img.naturalHeight,\n    size: formatFileSize(getImageSize(img))\n  }\n}\n\nconst onImageError = () => {\n  loading.value = false\n  error.value = true\n}\n\nconst previewImage = () => {\n  if (!error.value && props.imageUrl) {\n    ImagePreview({\n      images: [props.imageUrl],\n      showIndex: false,\n      closeable: true\n    })\n  }\n}\n\nconst downloadImage = async () => {\n  try {\n    // 获取文件扩展名\n    const url = props.imageUrl\n    const extension = url.split('.').pop()?.toLowerCase() || 'jpg'\n    const fileName = `AI_Magic_${Date.now()}.${extension}`\n\n    // 使用 fetch 获取图片数据，确保强制下载\n    const response = await fetch(url)\n    if (!response.ok) {\n      throw new Error('网络请求失败')\n    }\n\n    const blob = await response.blob()\n    const blobUrl = window.URL.createObjectURL(blob)\n\n    // 创建下载链接\n    const link = document.createElement('a')\n    link.href = blobUrl\n    link.download = fileName\n    link.style.display = 'none'\n\n    // 添加到DOM，点击，然后移除\n    document.body.appendChild(link)\n    link.click()\n    document.body.removeChild(link)\n\n    // 清理blob URL\n    window.URL.revokeObjectURL(blobUrl)\n\n    Toast.success('图片已保存到本地')\n    emit('download', props.imageUrl)\n  } catch (error) {\n    console.error('下载失败:', error)\n    Toast.fail('下载失败，请重试')\n  }\n}\n\n// 工具函数\nconst formatFileSize = (bytes) => {\n  if (!bytes) return ''\n  if (bytes === 0) return '0 B'\n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\nconst getImageSize = (img) => {\n  // 估算图片文件大小（这是一个近似值）\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  canvas.width = img.naturalWidth\n  canvas.height = img.naturalHeight\n  ctx.drawImage(img, 0, 0)\n\n  try {\n    const dataURL = canvas.toDataURL('image/jpeg', 0.8)\n    return Math.round((dataURL.length - 'data:image/jpeg;base64,'.length) * 3 / 4)\n  } catch {\n    return 0\n  }\n}\n\n// 响应式检测\nconst updateMobileStatus = () => {\n  isMobile.value = ImageSizeUtils.isMobile()\n}\n\n// 生命周期\nonMounted(() => {\n  updateMobileStatus()\n  window.addEventListener('resize', updateMobileStatus)\n})\n\nonUnmounted(() => {\n  window.removeEventListener('resize', updateMobileStatus)\n})\n</script>\n\n<style scoped>\n.image-preview-display {\n  width: 100%;\n}\n\n.preview-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n}\n\n.image-wrapper {\n  position: relative;\n  border-radius: 12px;\n  overflow: hidden;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.image-wrapper:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n}\n\n.preview-image {\n  display: block;\n  border-radius: 12px;\n}\n\n.loading-overlay,\n.error-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.7);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n\n.error-text {\n  color: rgba(255, 255, 255, 0.8);\n  font-size: 14px;\n}\n\n.image-info {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 12px;\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.info-item {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n  color: rgba(255, 255, 255, 0.8);\n  font-size: 12px;\n}\n\n.action-buttons {\n  display: flex;\n  gap: 8px;\n  margin-top: 16px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.action-btn {\n  flex: 1;\n  min-width: 0;\n}\n\n/* 移动端优化 */\n@media (max-width: 768px) {\n  .preview-container {\n    gap: 12px;\n  }\n\n  .action-buttons {\n    gap: 6px;\n  }\n\n  .action-btn {\n    font-size: 13px;\n  }\n\n  .info-item {\n    font-size: 11px;\n  }\n}\n</style>\n"
        }
    ]
}