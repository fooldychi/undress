{
    "sourceFile": "client/src/utils/progressStageManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753532700663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753532716402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n           currentNode: 0,\n           totalNodes: 0,\n           percentage: 0\n         }\n+        this.executedNodes.clear()\n       }\n \n       this._notifyCallbacks()\n     }\n"
                },
                {
                    "date": 1753532735623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,24 +109,39 @@\n     this._notifyCallbacks()\n   }\n \n   /**\n+   * 设置工作流节点列表\n+   * @param {Array} nodeIds - 所有节点ID列表\n+   */\n+  setWorkflowNodes(nodeIds) {\n+    this.allNodeIds = [...nodeIds]\n+    this.workflowProgress.totalNodes = nodeIds.length\n+    console.log(`📊 设置工作流节点列表: ${nodeIds.length}个节点`, nodeIds)\n+  }\n+\n+  /**\n    * 从节点ID解析进度（ComfyUI节点执行消息）\n    * @param {string} nodeId - 节点ID\n-   * @param {number} totalNodes - 总节点数（可选，如果已知）\n    */\n-  updateFromNodeExecution(nodeId, totalNodes = null) {\n-    // 尝试从节点ID中提取数字作为当前节点\n-    const nodeNumber = parseInt(nodeId) || 0\n+  updateFromNodeExecution(nodeId) {\n+    if (!nodeId) return\n \n-    if (totalNodes !== null) {\n-      this.updateWorkflowProgress(nodeNumber, totalNodes)\n+    // 记录已执行的节点\n+    this.executedNodes.add(nodeId)\n+\n+    // 计算当前进度\n+    const currentNode = this.executedNodes.size\n+    const totalNodes = this.workflowProgress.totalNodes || this.allNodeIds.length\n+\n+    if (totalNodes > 0) {\n+      this.updateWorkflowProgress(currentNode, totalNodes)\n     } else {\n       // 如果不知道总节点数，只更新当前节点\n       this.currentStage = PROGRESS_STAGES.PROCESSING\n-      this.workflowProgress.currentNode = nodeNumber\n+      this.workflowProgress.currentNode = currentNode\n \n-      console.log(`📊 工作流执行节点: ${nodeId}`)\n+      console.log(`📊 工作流执行节点: ${nodeId} (已执行: ${currentNode})`)\n       this._notifyCallbacks()\n     }\n   }\n \n"
                },
                {
                    "date": 1753532751054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,8 +182,10 @@\n       currentNode: 0,\n       totalNodes: 0,\n       percentage: 0\n     }\n+    this.executedNodes.clear()\n+    this.allNodeIds = []\n     console.log('🔄 进度状态已重置')\n   }\n \n   /**\n"
                },
                {
                    "date": 1753532767567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,27 +217,36 @@\n   return new ProgressStageManager()\n }\n \n /**\n- * 解析ComfyUI工作流JSON，获取总节点数\n+ * 解析ComfyUI工作流JSON，获取所有节点ID\n  * @param {Object} workflow - 工作流JSON对象\n- * @returns {number} 总节点数\n+ * @returns {Array} 节点ID列表\n  */\n-export function getWorkflowTotalNodes(workflow) {\n+export function getWorkflowNodeIds(workflow) {\n   if (!workflow || typeof workflow !== 'object') {\n-    return 0\n+    return []\n   }\n \n   // ComfyUI工作流的节点存储在根级别，每个键是节点ID\n   const nodeIds = Object.keys(workflow).filter(key => {\n     const node = workflow[key]\n     return node && typeof node === 'object' && node.class_type\n   })\n \n-  return nodeIds.length\n+  return nodeIds\n }\n \n /**\n+ * 解析ComfyUI工作流JSON，获取总节点数\n+ * @param {Object} workflow - 工作流JSON对象\n+ * @returns {number} 总节点数\n+ */\n+export function getWorkflowTotalNodes(workflow) {\n+  return getWorkflowNodeIds(workflow).length\n+}\n+\n+/**\n  * 从节点ID提取数字\n  * @param {string} nodeId - 节点ID\n  * @returns {number} 提取的数字，如果无法提取则返回0\n  */\n"
                },
                {
                    "date": 1753556136642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,15 +59,18 @@\n    * 触发所有回调\n    */\n   _notifyCallbacks() {\n     const message = this.getCurrentMessage()\n-    this.callbacks.forEach(callback => {\n-      try {\n-        callback(this.currentStage, message, { ...this.workflowProgress })\n-      } catch (error) {\n-        console.error('进度回调执行错误:', error)\n-      }\n-    })\n+    // 使用 setTimeout 避免递归更新\n+    setTimeout(() => {\n+      this.callbacks.forEach(callback => {\n+        try {\n+          callback(this.currentStage, message, { ...this.workflowProgress })\n+        } catch (error) {\n+          console.error('进度回调执行错误:', error)\n+        }\n+      })\n+    }, 0)\n   }\n \n   /**\n    * 设置当前阶段\n"
                }
            ],
            "date": 1753532700663,
            "name": "Commit-0",
            "content": "/**\n * 图片处理进度阶段管理器\n * 实现基于实际阶段的进度显示，而不是误导性的百分比\n */\n\n// 进度阶段定义\nexport const PROGRESS_STAGES = {\n  UPLOADING: 'uploading',\n  SUBMITTING: 'submitting',\n  QUEUING: 'queuing',\n  PROCESSING: 'processing',\n  COMPLETED: 'completed',\n  ERROR: 'error'\n}\n\n// 阶段显示文本映射\nexport const STAGE_TEXTS = {\n  [PROGRESS_STAGES.UPLOADING]: '图片上传中...',\n  [PROGRESS_STAGES.SUBMITTING]: '提交任务中...',\n  [PROGRESS_STAGES.QUEUING]: '队列中...',\n  [PROGRESS_STAGES.PROCESSING]: '工作流执行中...',\n  [PROGRESS_STAGES.COMPLETED]: '处理完成',\n  [PROGRESS_STAGES.ERROR]: '处理失败'\n}\n\n/**\n * 进度阶段管理器类\n */\nexport class ProgressStageManager {\n  constructor() {\n    this.currentStage = null\n    this.workflowProgress = {\n      currentNode: 0,\n      totalNodes: 0,\n      percentage: 0\n    }\n    this.callbacks = new Set()\n    this.executedNodes = new Set() // 记录已执行的节点ID\n    this.allNodeIds = [] // 存储所有节点ID列表\n  }\n\n  /**\n   * 添加进度回调\n   * @param {Function} callback - 回调函数 (stage, message, workflowProgress) => void\n   */\n  addCallback(callback) {\n    this.callbacks.add(callback)\n  }\n\n  /**\n   * 移除进度回调\n   * @param {Function} callback - 回调函数\n   */\n  removeCallback(callback) {\n    this.callbacks.delete(callback)\n  }\n\n  /**\n   * 触发所有回调\n   */\n  _notifyCallbacks() {\n    const message = this.getCurrentMessage()\n    this.callbacks.forEach(callback => {\n      try {\n        callback(this.currentStage, message, { ...this.workflowProgress })\n      } catch (error) {\n        console.error('进度回调执行错误:', error)\n      }\n    })\n  }\n\n  /**\n   * 设置当前阶段\n   * @param {string} stage - 阶段标识\n   */\n  setStage(stage) {\n    if (this.currentStage !== stage) {\n      this.currentStage = stage\n      console.log(`🔄 进度阶段更新: ${stage}`)\n\n      // 重置工作流进度（除非是处理阶段）\n      if (stage !== PROGRESS_STAGES.PROCESSING) {\n        this.workflowProgress = {\n          currentNode: 0,\n          totalNodes: 0,\n          percentage: 0\n        }\n      }\n\n      this._notifyCallbacks()\n    }\n  }\n\n  /**\n   * 更新工作流执行进度\n   * @param {number} currentNode - 当前节点数\n   * @param {number} totalNodes - 总节点数\n   */\n  updateWorkflowProgress(currentNode, totalNodes) {\n    this.currentStage = PROGRESS_STAGES.PROCESSING\n    this.workflowProgress = {\n      currentNode: Math.max(0, currentNode),\n      totalNodes: Math.max(0, totalNodes),\n      percentage: totalNodes > 0 ? Math.round((currentNode / totalNodes) * 100) : 0\n    }\n\n    console.log(`📊 工作流进度: ${currentNode}/${totalNodes} (${this.workflowProgress.percentage}%)`)\n    this._notifyCallbacks()\n  }\n\n  /**\n   * 从节点ID解析进度（ComfyUI节点执行消息）\n   * @param {string} nodeId - 节点ID\n   * @param {number} totalNodes - 总节点数（可选，如果已知）\n   */\n  updateFromNodeExecution(nodeId, totalNodes = null) {\n    // 尝试从节点ID中提取数字作为当前节点\n    const nodeNumber = parseInt(nodeId) || 0\n\n    if (totalNodes !== null) {\n      this.updateWorkflowProgress(nodeNumber, totalNodes)\n    } else {\n      // 如果不知道总节点数，只更新当前节点\n      this.currentStage = PROGRESS_STAGES.PROCESSING\n      this.workflowProgress.currentNode = nodeNumber\n\n      console.log(`📊 工作流执行节点: ${nodeId}`)\n      this._notifyCallbacks()\n    }\n  }\n\n  /**\n   * 获取当前显示消息\n   * @returns {string} 显示消息\n   */\n  getCurrentMessage() {\n    if (this.currentStage === PROGRESS_STAGES.PROCESSING && this.workflowProgress.totalNodes > 0) {\n      // 工作流执行阶段显示详细进度\n      const { currentNode, totalNodes, percentage } = this.workflowProgress\n      return `${percentage}%（${currentNode}/${totalNodes}）`\n    } else {\n      // 其他阶段显示阶段文本\n      return STAGE_TEXTS[this.currentStage] || '处理中...'\n    }\n  }\n\n  /**\n   * 获取当前状态\n   * @returns {Object} 当前状态对象\n   */\n  getCurrentState() {\n    return {\n      stage: this.currentStage,\n      message: this.getCurrentMessage(),\n      workflowProgress: { ...this.workflowProgress },\n      isWorkflowStage: this.currentStage === PROGRESS_STAGES.PROCESSING && this.workflowProgress.totalNodes > 0\n    }\n  }\n\n  /**\n   * 重置进度状态\n   */\n  reset() {\n    this.currentStage = null\n    this.workflowProgress = {\n      currentNode: 0,\n      totalNodes: 0,\n      percentage: 0\n    }\n    console.log('🔄 进度状态已重置')\n  }\n\n  /**\n   * 设置错误状态\n   * @param {string} errorMessage - 错误消息\n   */\n  setError(errorMessage = '处理失败') {\n    this.currentStage = PROGRESS_STAGES.ERROR\n    this.errorMessage = errorMessage\n    console.log(`❌ 进度错误: ${errorMessage}`)\n    this._notifyCallbacks()\n  }\n\n  /**\n   * 设置完成状态\n   */\n  setCompleted() {\n    this.currentStage = PROGRESS_STAGES.COMPLETED\n    console.log('✅ 进度完成')\n    this._notifyCallbacks()\n  }\n}\n\n/**\n * 创建进度阶段管理器实例\n * @returns {ProgressStageManager} 管理器实例\n */\nexport function createProgressStageManager() {\n  return new ProgressStageManager()\n}\n\n/**\n * 解析ComfyUI工作流JSON，获取总节点数\n * @param {Object} workflow - 工作流JSON对象\n * @returns {number} 总节点数\n */\nexport function getWorkflowTotalNodes(workflow) {\n  if (!workflow || typeof workflow !== 'object') {\n    return 0\n  }\n\n  // ComfyUI工作流的节点存储在根级别，每个键是节点ID\n  const nodeIds = Object.keys(workflow).filter(key => {\n    const node = workflow[key]\n    return node && typeof node === 'object' && node.class_type\n  })\n\n  return nodeIds.length\n}\n\n/**\n * 从节点ID提取数字\n * @param {string} nodeId - 节点ID\n * @returns {number} 提取的数字，如果无法提取则返回0\n */\nexport function extractNodeNumber(nodeId) {\n  if (!nodeId) return 0\n\n  // 尝试直接转换为数字\n  const directNumber = parseInt(nodeId)\n  if (!isNaN(directNumber)) {\n    return directNumber\n  }\n\n  // 尝试从字符串中提取数字\n  const match = nodeId.toString().match(/\\d+/)\n  return match ? parseInt(match[0]) : 0\n}\n"
        }
    ]
}