{
    "sourceFile": "client/src/utils/workflowConfig.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752812618314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752812647403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,22 +112,20 @@\n  * @returns {Promise<boolean>} 是否启用\n  */\n export async function isWorkflowEnabled(workflowType) {\n   try {\n-    const config = await getPublicConfig()\n-    const enabledKey = `workflow.${workflowType}.enabled`\n-    const enabled = config[enabledKey]\n+    const response = await fetch('/api/workflow-config/public')\n+    if (!response.ok) {\n+      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n+    }\n \n-    // 处理布尔值\n-    if (typeof enabled === 'boolean') {\n-      return enabled\n+    const result = await response.json()\n+    if (!result.success) {\n+      throw new Error(result.message || '获取配置失败')\n     }\n-    if (typeof enabled === 'string') {\n-      return enabled.toLowerCase() === 'true'\n-    }\n \n-    // 默认启用\n-    return true\n+    const workflowConfig = result.data[workflowType]\n+    return workflowConfig ? workflowConfig.enabled : false\n \n   } catch (error) {\n     console.warn('检查工作流启用状态失败，默认启用:', error)\n     return true\n@@ -140,15 +138,28 @@\n  * @returns {Promise<Object>} 工作流信息\n  */\n export async function getWorkflowInfo(workflowType) {\n   try {\n-    const config = await getPublicConfig()\n+    const response = await fetch('/api/workflow-config/public')\n+    if (!response.ok) {\n+      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n+    }\n \n+    const result = await response.json()\n+    if (!result.success) {\n+      throw new Error(result.message || '获取配置失败')\n+    }\n+\n+    const workflowConfig = result.data[workflowType]\n+    if (!workflowConfig) {\n+      throw new Error(`未找到${workflowType}工作流配置`)\n+    }\n+\n     const info = {\n-      name: config[`workflow.${workflowType}.name`] || `${workflowType} workflow`,\n-      description: config[`workflow.${workflowType}.description`] || '',\n-      enabled: await isWorkflowEnabled(workflowType),\n-      filePath: config[`workflow.${workflowType}.file_path`] || `workflows/${workflowType}.json`\n+      name: workflowConfig.name || `${workflowType} workflow`,\n+      description: workflowConfig.description || '',\n+      enabled: workflowConfig.enabled,\n+      filePath: workflowConfig.filePath || `workflows/${workflowType}.json`\n     }\n \n     console.log(`📋 获取${workflowType}工作流信息:`, info)\n     return info\n"
                }
            ],
            "date": 1752812618314,
            "name": "Commit-0",
            "content": "// 工作流节点配置工具\n\n/**\n * 获取工作流节点配置\n * @param {string} workflowType - 工作流类型 ('faceswap' | 'undress')\n * @returns {Promise<Object>} 节点配置对象\n */\nexport async function getWorkflowNodeConfig(workflowType) {\n  try {\n    console.log(`🔄 获取${workflowType}工作流节点配置...`)\n\n    const response = await fetch('/api/workflow-config/public')\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    const result = await response.json()\n    if (!result.success) {\n      throw new Error(result.message || '获取配置失败')\n    }\n\n    const workflowConfig = result.data[workflowType]\n    if (!workflowConfig) {\n      throw new Error(`未找到${workflowType}工作流配置`)\n    }\n\n    // 转换为前端需要的格式\n    const nodeConfig = {\n      inputNodes: {},\n      outputNodes: { primary: null, secondary: [] }\n    }\n\n    if (workflowType === 'faceswap') {\n      // 换脸工作流节点配置\n      nodeConfig.inputNodes.facePhoto1 = workflowConfig.inputNodes.face_photo_1 || '670'\n      nodeConfig.inputNodes.facePhoto2 = workflowConfig.inputNodes.face_photo_2 || '662'\n      nodeConfig.inputNodes.facePhoto3 = workflowConfig.inputNodes.face_photo_3 || '658'\n      nodeConfig.inputNodes.facePhoto4 = workflowConfig.inputNodes.face_photo_4 || '655'\n      nodeConfig.inputNodes.targetImage = workflowConfig.inputNodes.target_image || '737'\n\n    } else if (workflowType === 'undress') {\n      // 一键褪衣工作流节点配置\n      nodeConfig.inputNodes.mainImage = workflowConfig.inputNodes.main_image || '49'\n      nodeConfig.inputNodes.seedNode = workflowConfig.inputNodes.seed_node || '174'\n    }\n\n    // 处理输出节点\n    if (workflowConfig.outputNodes && workflowConfig.outputNodes.length > 0) {\n      // 按优先级排序\n      const sortedOutputs = workflowConfig.outputNodes.sort((a, b) => a.order - b.order)\n\n      // 第一个是主要输出节点\n      nodeConfig.outputNodes.primary = sortedOutputs[0].nodeId\n\n      // 其余是备用输出节点\n      nodeConfig.outputNodes.secondary = sortedOutputs.slice(1).map(node => node.nodeId)\n    }\n\n    console.log(`📋 获取${workflowType}工作流节点配置成功:`, nodeConfig)\n    return nodeConfig\n\n  } catch (error) {\n    console.warn('获取工作流节点配置失败，使用默认配置:', error)\n    return getDefaultNodeConfig(workflowType)\n  }\n}\n\n/**\n * 获取默认节点配置（降级机制）\n * @param {string} workflowType - 工作流类型\n * @returns {Object} 默认节点配置\n */\nexport function getDefaultNodeConfig(workflowType) {\n  const defaultConfigs = {\n    faceswap: {\n      inputNodes: {\n        facePhoto1: '670',\n        facePhoto2: '662',\n        facePhoto3: '658',\n        facePhoto4: '655',\n        targetImage: '737'\n      },\n      outputNodes: {\n        primary: '812',\n        secondary: ['813', '746', '710']\n      }\n    },\n    undress: {\n      inputNodes: {\n        mainImage: '49',\n        seedNode: '174'\n      },\n      outputNodes: {\n        primary: '730',\n        secondary: ['812', '813', '746', '710']\n      }\n    }\n  }\n\n  const config = defaultConfigs[workflowType]\n  if (!config) {\n    throw new Error(`未知的工作流类型: ${workflowType}`)\n  }\n\n  console.log(`📋 使用${workflowType}工作流默认配置:`, config)\n  return config\n}\n\n/**\n * 检查工作流是否启用\n * @param {string} workflowType - 工作流类型\n * @returns {Promise<boolean>} 是否启用\n */\nexport async function isWorkflowEnabled(workflowType) {\n  try {\n    const config = await getPublicConfig()\n    const enabledKey = `workflow.${workflowType}.enabled`\n    const enabled = config[enabledKey]\n\n    // 处理布尔值\n    if (typeof enabled === 'boolean') {\n      return enabled\n    }\n    if (typeof enabled === 'string') {\n      return enabled.toLowerCase() === 'true'\n    }\n\n    // 默认启用\n    return true\n\n  } catch (error) {\n    console.warn('检查工作流启用状态失败，默认启用:', error)\n    return true\n  }\n}\n\n/**\n * 获取工作流基础信息\n * @param {string} workflowType - 工作流类型\n * @returns {Promise<Object>} 工作流信息\n */\nexport async function getWorkflowInfo(workflowType) {\n  try {\n    const config = await getPublicConfig()\n\n    const info = {\n      name: config[`workflow.${workflowType}.name`] || `${workflowType} workflow`,\n      description: config[`workflow.${workflowType}.description`] || '',\n      enabled: await isWorkflowEnabled(workflowType),\n      filePath: config[`workflow.${workflowType}.file_path`] || `workflows/${workflowType}.json`\n    }\n\n    console.log(`📋 获取${workflowType}工作流信息:`, info)\n    return info\n\n  } catch (error) {\n    console.warn('获取工作流信息失败，使用默认信息:', error)\n    return {\n      name: `${workflowType} workflow`,\n      description: '',\n      enabled: true,\n      filePath: `workflows/${workflowType}.json`\n    }\n  }\n}\n"
        }
    ]
}