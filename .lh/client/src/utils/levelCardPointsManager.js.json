{
    "sourceFile": "client/src/utils/levelCardPointsManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752288021271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752288511571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,11 @@\n   }\n \n   // 获取积分状态\n   async getPointsStatus() {\n+    // 首先检查登录状态\n     if (!this.isLoggedIn()) {\n-      return {\n-        current: 0,\n-        total_points: 0,\n-        cards_count: 0,\n-        cards_breakdown: [],\n-        canGenerate: false,\n-        generationCost: 20,\n-        isLoggedIn: false\n-      }\n+      return this.getDefaultStatus()\n     }\n \n     try {\n       // 如果缓存还有效，直接返回缓存数据\n"
                },
                {
                    "date": 1752288528460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,17 +80,18 @@\n   }\n \n   // 获取默认状态\n   getDefaultStatus() {\n+    const loggedIn = this.isLoggedIn()\n     return {\n       current: 0,\n       total_points: 0,\n       purchased_points: 0,\n       cards_count: 0,\n       cards_breakdown: [],\n       canGenerate: false,\n       generationCost: 20,\n-      isLoggedIn: this.isLoggedIn(),\n+      isLoggedIn: loggedIn,\n       dailyRemaining: 0,\n       dailyFreePoints: 0,\n       totalUsedToday: 0,\n       experienceCardPoints: 0\n"
                },
                {
                    "date": 1752334538178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,18 +98,25 @@\n     }\n   }\n \n   // 消耗积分\n-  async consumePoints(amount, description = '生成图片') {\n+  async consumePoints(amount, description = '生成图片', mediaUrl = null) {\n     if (!this.isLoggedIn()) {\n       throw new Error('请先登录')\n     }\n \n     try {\n+      console.log(`💰 开始消耗积分: ${amount}点, 描述: ${description}`)\n+      if (mediaUrl) {\n+        console.log(`🎬 关联媒体URL: ${mediaUrl}`)\n+      }\n+\n       // 调用后端API消耗积分\n-      const response = await pointsApi.consumePoints(amount, description)\n+      const response = await pointsApi.consumePoints(amount, description, mediaUrl)\n \n       if (response.success) {\n+        console.log(`✅ 积分消耗成功: 消耗${amount}点, 剩余${response.data.remaining_points}点`)\n+\n         // 清除缓存，强制下次获取最新数据\n         this.pointsInfo = null\n         this.lastUpdateTime = 0\n \n"
                },
                {
                    "date": 1752342614789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,15 @@\n     this.lastUpdateTime = 0\n     return await this.getPointsStatus()\n   }\n \n+  // 强制清除缓存\n+  clearCache() {\n+    this.pointsInfo = null\n+    this.lastUpdateTime = 0\n+    console.log('🗑️ 积分缓存已清除')\n+  }\n+\n   // 绑定等级卡\n   async bindLevelCard(cardNumber, cardPassword) {\n     if (!this.isLoggedIn()) {\n       throw new Error('请先登录')\n"
                }
            ],
            "date": 1752288021271,
            "name": "Commit-0",
            "content": "/**\n * 等级卡积分管理系统\n * 基于后端API的积分管理，替代原有的本地积分系统\n */\n\nimport { pointsApi, levelCardApi } from '../services/api.js'\nimport { authApi } from '../services/api.js'\n\nclass LevelCardPointsManager {\n  constructor() {\n    this.pointsInfo = null\n    this.lastUpdateTime = 0\n    this.updateInterval = 30000 // 30秒更新一次\n  }\n\n  // 检查用户是否已登录\n  isLoggedIn() {\n    return authApi.isLoggedIn()\n  }\n\n  // 获取积分状态\n  async getPointsStatus() {\n    if (!this.isLoggedIn()) {\n      return {\n        current: 0,\n        total_points: 0,\n        cards_count: 0,\n        cards_breakdown: [],\n        canGenerate: false,\n        generationCost: 20,\n        isLoggedIn: false\n      }\n    }\n\n    try {\n      // 如果缓存还有效，直接返回缓存数据\n      const now = Date.now()\n      if (this.pointsInfo && (now - this.lastUpdateTime) < this.updateInterval) {\n        return this.formatPointsStatus(this.pointsInfo)\n      }\n\n      // 从API获取最新积分信息\n      const response = await pointsApi.getUserPoints()\n\n      if (response.success) {\n        this.pointsInfo = response.data\n        this.lastUpdateTime = now\n        return this.formatPointsStatus(this.pointsInfo)\n      } else {\n        console.error('获取积分信息失败:', response.message)\n        // 如果是认证错误，返回未登录状态\n        if (response.message && response.message.includes('令牌')) {\n          return this.getDefaultStatus()\n        }\n        return this.getDefaultStatus()\n      }\n    } catch (error) {\n      console.error('获取积分状态失败:', error)\n      // 如果是认证错误，返回未登录状态\n      if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n        return this.getDefaultStatus()\n      }\n      return this.getDefaultStatus()\n    }\n  }\n\n  // 格式化积分状态\n  formatPointsStatus(pointsInfo) {\n    const totalPoints = pointsInfo.total_points || 0\n    const generationCost = 20 // 每次生成消耗20积分\n\n    return {\n      current: totalPoints,\n      total_points: totalPoints,\n      purchased_points: pointsInfo.purchased_points || 0,\n      cards_count: pointsInfo.cards_count || 0,\n      cards_breakdown: pointsInfo.cards_breakdown || [],\n      canGenerate: totalPoints >= generationCost,\n      generationCost: generationCost,\n      isLoggedIn: true,\n      // 兼容原有字段\n      dailyRemaining: 0, // 等级卡系统没有每日免费概念\n      dailyFreePoints: 0,\n      totalUsedToday: 0,\n      experienceCardPoints: 0\n    }\n  }\n\n  // 获取默认状态\n  getDefaultStatus() {\n    return {\n      current: 0,\n      total_points: 0,\n      purchased_points: 0,\n      cards_count: 0,\n      cards_breakdown: [],\n      canGenerate: false,\n      generationCost: 20,\n      isLoggedIn: this.isLoggedIn(),\n      dailyRemaining: 0,\n      dailyFreePoints: 0,\n      totalUsedToday: 0,\n      experienceCardPoints: 0\n    }\n  }\n\n  // 消耗积分\n  async consumePoints(amount, description = '生成图片') {\n    if (!this.isLoggedIn()) {\n      throw new Error('请先登录')\n    }\n\n    try {\n      // 调用后端API消耗积分\n      const response = await pointsApi.consumePoints(amount, description)\n\n      if (response.success) {\n        // 清除缓存，强制下次获取最新数据\n        this.pointsInfo = null\n        this.lastUpdateTime = 0\n\n        return {\n          success: true,\n          message: '积分消耗成功',\n          consumed: amount,\n          remaining: response.data.remaining_points || 0\n        }\n      } else {\n        throw new Error(response.message || '积分不足')\n      }\n    } catch (error) {\n      console.error('消耗积分失败:', error)\n      throw error\n    }\n  }\n\n  // 刷新积分信息\n  async refreshPoints() {\n    this.pointsInfo = null\n    this.lastUpdateTime = 0\n    return await this.getPointsStatus()\n  }\n\n  // 绑定等级卡\n  async bindLevelCard(cardNumber, cardPassword) {\n    if (!this.isLoggedIn()) {\n      throw new Error('请先登录')\n    }\n\n    try {\n      const response = await levelCardApi.bindCard(cardNumber, cardPassword)\n\n      if (response.success) {\n        // 清除缓存，强制刷新积分信息\n        this.pointsInfo = null\n        this.lastUpdateTime = 0\n\n        return {\n          success: true,\n          message: response.message,\n          data: response.data\n        }\n      } else {\n        throw new Error(response.message || '绑定失败')\n      }\n    } catch (error) {\n      console.error('绑定等级卡失败:', error)\n      throw error\n    }\n  }\n\n  // 获取等级卡类型\n  async getCardTypes() {\n    try {\n      const response = await levelCardApi.getCardTypes()\n\n      if (response.success) {\n        return response.data.cardTypes || []\n      } else {\n        console.error('获取等级卡类型失败:', response.message)\n        return []\n      }\n    } catch (error) {\n      console.error('获取等级卡类型失败:', error)\n      return []\n    }\n  }\n\n  // 获取用户的等级卡列表\n  async getMyCards() {\n    if (!this.isLoggedIn()) {\n      return []\n    }\n\n    try {\n      const response = await levelCardApi.getMyCards()\n\n      if (response.success) {\n        return response.data.cards || []\n      } else {\n        console.error('获取我的等级卡失败:', response.message)\n        return []\n      }\n    } catch (error) {\n      console.error('获取我的等级卡失败:', error)\n      return []\n    }\n  }\n\n  // 检查是否可以生成\n  async canGenerate() {\n    const status = await this.getPointsStatus()\n    return status.canGenerate\n  }\n\n  // 获取生成成本\n  getGenerationCost() {\n    return 20 // 固定20积分\n  }\n\n  // 兼容原有接口 - 添加体验卡点数（现在通过等级卡系统）\n  addExperienceCardPoints() {\n    // 这个方法在等级卡系统中不再使用\n    // 积分通过绑定等级卡获得\n    return {\n      success: false,\n      message: '请使用等级卡绑定功能',\n      added: 0\n    }\n  }\n\n  // 兼容原有接口 - 获取购买历史\n  getPurchaseHistory() {\n    // 等级卡系统中，购买历史通过API获取\n    return []\n  }\n\n  // 兼容原有接口 - 获取统计信息\n  getStatistics() {\n    return {\n      totalPurchased: 0,\n      totalUsed: 0,\n      totalCards: 0\n    }\n  }\n}\n\n// 创建单例实例\nconst levelCardPointsManager = new LevelCardPointsManager()\n\nexport default levelCardPointsManager\n"
        }
    ]
}