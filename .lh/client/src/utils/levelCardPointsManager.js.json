{
    "sourceFile": "client/src/utils/levelCardPointsManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1752288021271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752288511571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,18 +19,11 @@\n   }\n \n   // 获取积分状态\n   async getPointsStatus() {\n+    // 首先检查登录状态\n     if (!this.isLoggedIn()) {\n-      return {\n-        current: 0,\n-        total_points: 0,\n-        cards_count: 0,\n-        cards_breakdown: [],\n-        canGenerate: false,\n-        generationCost: 20,\n-        isLoggedIn: false\n-      }\n+      return this.getDefaultStatus()\n     }\n \n     try {\n       // 如果缓存还有效，直接返回缓存数据\n"
                },
                {
                    "date": 1752288528460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,17 +80,18 @@\n   }\n \n   // 获取默认状态\n   getDefaultStatus() {\n+    const loggedIn = this.isLoggedIn()\n     return {\n       current: 0,\n       total_points: 0,\n       purchased_points: 0,\n       cards_count: 0,\n       cards_breakdown: [],\n       canGenerate: false,\n       generationCost: 20,\n-      isLoggedIn: this.isLoggedIn(),\n+      isLoggedIn: loggedIn,\n       dailyRemaining: 0,\n       dailyFreePoints: 0,\n       totalUsedToday: 0,\n       experienceCardPoints: 0\n"
                },
                {
                    "date": 1752334538178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,18 +98,25 @@\n     }\n   }\n \n   // 消耗积分\n-  async consumePoints(amount, description = '生成图片') {\n+  async consumePoints(amount, description = '生成图片', mediaUrl = null) {\n     if (!this.isLoggedIn()) {\n       throw new Error('请先登录')\n     }\n \n     try {\n+      console.log(`💰 开始消耗积分: ${amount}点, 描述: ${description}`)\n+      if (mediaUrl) {\n+        console.log(`🎬 关联媒体URL: ${mediaUrl}`)\n+      }\n+\n       // 调用后端API消耗积分\n-      const response = await pointsApi.consumePoints(amount, description)\n+      const response = await pointsApi.consumePoints(amount, description, mediaUrl)\n \n       if (response.success) {\n+        console.log(`✅ 积分消耗成功: 消耗${amount}点, 剩余${response.data.remaining_points}点`)\n+\n         // 清除缓存，强制下次获取最新数据\n         this.pointsInfo = null\n         this.lastUpdateTime = 0\n \n"
                },
                {
                    "date": 1752342614789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,15 @@\n     this.lastUpdateTime = 0\n     return await this.getPointsStatus()\n   }\n \n+  // 强制清除缓存\n+  clearCache() {\n+    this.pointsInfo = null\n+    this.lastUpdateTime = 0\n+    console.log('🗑️ 积分缓存已清除')\n+  }\n+\n   // 绑定等级卡\n   async bindLevelCard(cardNumber, cardPassword) {\n     if (!this.isLoggedIn()) {\n       throw new Error('请先登录')\n"
                },
                {
                    "date": 1752376526264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,11 @@\n   constructor() {\n     this.pointsInfo = null\n     this.lastUpdateTime = 0\n     this.updateInterval = 30000 // 30秒更新一次\n+    this.retryCount = 0\n+    this.maxRetries = 3\n+    this.retryDelay = 1000 // 初始重试延迟1秒\n   }\n \n   // 检查用户是否已登录\n   isLoggedIn() {\n"
                },
                {
                    "date": 1752376570327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,28 +35,37 @@\n         return this.formatPointsStatus(this.pointsInfo)\n       }\n \n       // 从API获取最新积分信息\n-      const response = await pointsApi.getUserPoints()\n+      const response = await this.fetchPointsWithRetry()\n \n       if (response.success) {\n         this.pointsInfo = response.data\n         this.lastUpdateTime = now\n+        this.retryCount = 0 // 重置重试计数\n         return this.formatPointsStatus(this.pointsInfo)\n       } else {\n         console.error('获取积分信息失败:', response.message)\n         // 如果是认证错误，返回未登录状态\n         if (response.message && response.message.includes('令牌')) {\n           return this.getDefaultStatus()\n         }\n+        // 使用缓存数据（如果有）\n+        if (this.pointsInfo) {\n+          return this.formatPointsStatus(this.pointsInfo)\n+        }\n         return this.getDefaultStatus()\n       }\n     } catch (error) {\n       console.error('获取积分状态失败:', error)\n       // 如果是认证错误，返回未登录状态\n       if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n         return this.getDefaultStatus()\n       }\n+      // 使用缓存数据（如果有）\n+      if (this.pointsInfo) {\n+        return this.formatPointsStatus(this.pointsInfo)\n+      }\n       return this.getDefaultStatus()\n     }\n   }\n \n"
                },
                {
                    "date": 1752376585399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,27 @@\n       return this.getDefaultStatus()\n     }\n   }\n \n+  // 带重试机制的积分获取\n+  async fetchPointsWithRetry(attempt = 0) {\n+    try {\n+      return await pointsApi.getUserPoints()\n+    } catch (error) {\n+      if (attempt < this.maxRetries &&\n+          (error.message.includes('网络') ||\n+           error.message.includes('超时') ||\n+           error.message.includes('认证验证失败'))) {\n+        // 指数退避重试\n+        const delay = this.retryDelay * Math.pow(2, attempt)\n+        console.log(`积分获取失败，${delay}ms后重试 (${attempt + 1}/${this.maxRetries})`)\n+        await new Promise(resolve => setTimeout(resolve, delay))\n+        return this.fetchPointsWithRetry(attempt + 1)\n+      }\n+      throw error\n+    }\n+  }\n+\n   // 格式化积分状态\n   formatPointsStatus(pointsInfo) {\n     const totalPoints = pointsInfo.total_points || 0\n     const generationCost = 20 // 每次生成消耗20积分\n"
                },
                {
                    "date": 1752424440614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,22 @@\n         throw new Error(response.message || '积分不足')\n       }\n     } catch (error) {\n       console.error('消耗积分失败:', error)\n-      throw error\n+\n+      // 提供更详细的错误信息\n+      let errorMessage = error.message\n+      if (errorMessage.includes('服务器返回非JSON响应')) {\n+        errorMessage = '后端服务连接异常，积分扣除失败'\n+      } else if (errorMessage.includes('API接口不存在')) {\n+        errorMessage = '积分系统接口异常，请联系管理员'\n+      } else if (errorMessage.includes('网络连接异常')) {\n+        errorMessage = '网络连接异常，积分扣除失败'\n+      } else if (errorMessage.includes('登录已过期')) {\n+        errorMessage = '登录已过期，请重新登录后重试'\n+      }\n+\n+      throw new Error(errorMessage)\n     }\n   }\n \n   // 刷新积分信息\n"
                },
                {
                    "date": 1752424930335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,22 +161,9 @@\n         throw new Error(response.message || '积分不足')\n       }\n     } catch (error) {\n       console.error('消耗积分失败:', error)\n-\n-      // 提供更详细的错误信息\n-      let errorMessage = error.message\n-      if (errorMessage.includes('服务器返回非JSON响应')) {\n-        errorMessage = '后端服务连接异常，积分扣除失败'\n-      } else if (errorMessage.includes('API接口不存在')) {\n-        errorMessage = '积分系统接口异常，请联系管理员'\n-      } else if (errorMessage.includes('网络连接异常')) {\n-        errorMessage = '网络连接异常，积分扣除失败'\n-      } else if (errorMessage.includes('登录已过期')) {\n-        errorMessage = '登录已过期，请重新登录后重试'\n-      }\n-\n-      throw new Error(errorMessage)\n+      throw error\n     }\n   }\n \n   // 刷新积分信息\n"
                },
                {
                    "date": 1752834919573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class LevelCardPointsManager {\n   constructor() {\n     this.pointsInfo = null\n     this.lastUpdateTime = 0\n-    this.updateInterval = 30000 // 30秒更新一次\n+    this.cacheTimeout = 60000 // 缓存有效期1分钟（仅用于减少重复请求）\n     this.retryCount = 0\n     this.maxRetries = 3\n     this.retryDelay = 1000 // 初始重试延迟1秒\n   }\n"
                },
                {
                    "date": 1752834936734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n       return this.getDefaultStatus()\n     }\n \n     try {\n-      // 如果缓存还有效，直接返回缓存数据\n+      // 如果缓存还有效，直接返回缓存数据（减少重复请求）\n       const now = Date.now()\n-      if (this.pointsInfo && (now - this.lastUpdateTime) < this.updateInterval) {\n+      if (this.pointsInfo && (now - this.lastUpdateTime) < this.cacheTimeout) {\n         return this.formatPointsStatus(this.pointsInfo)\n       }\n \n       // 从API获取最新积分信息\n"
                },
                {
                    "date": 1753639306032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,290 +1,291 @@\n-/**\n- * 等级卡积分管理系统\n- * 基于后端API的积分管理，替代原有的本地积分系统\n- */\n-\n-import { pointsApi, levelCardApi } from '../services/api.js'\n-import { authApi } from '../services/api.js'\n-\n-class LevelCardPointsManager {\n-  constructor() {\n-    this.pointsInfo = null\n-    this.lastUpdateTime = 0\n-    this.cacheTimeout = 60000 // 缓存有效期1分钟（仅用于减少重复请求）\n-    this.retryCount = 0\n-    this.maxRetries = 3\n-    this.retryDelay = 1000 // 初始重试延迟1秒\n-  }\n-\n-  // 检查用户是否已登录\n-  isLoggedIn() {\n-    return authApi.isLoggedIn()\n-  }\n-\n-  // 获取积分状态\n-  async getPointsStatus() {\n-    // 首先检查登录状态\n-    if (!this.isLoggedIn()) {\n-      return this.getDefaultStatus()\n-    }\n-\n-    try {\n-      // 如果缓存还有效，直接返回缓存数据（减少重复请求）\n-      const now = Date.now()\n-      if (this.pointsInfo && (now - this.lastUpdateTime) < this.cacheTimeout) {\n-        return this.formatPointsStatus(this.pointsInfo)\n-      }\n-\n-      // 从API获取最新积分信息\n-      const response = await this.fetchPointsWithRetry()\n-\n-      if (response.success) {\n-        this.pointsInfo = response.data\n-        this.lastUpdateTime = now\n-        this.retryCount = 0 // 重置重试计数\n-        return this.formatPointsStatus(this.pointsInfo)\n-      } else {\n-        console.error('获取积分信息失败:', response.message)\n-        // 如果是认证错误，返回未登录状态\n-        if (response.message && response.message.includes('令牌')) {\n-          return this.getDefaultStatus()\n-        }\n-        // 使用缓存数据（如果有）\n-        if (this.pointsInfo) {\n-          return this.formatPointsStatus(this.pointsInfo)\n-        }\n-        return this.getDefaultStatus()\n-      }\n-    } catch (error) {\n-      console.error('获取积分状态失败:', error)\n-      // 如果是认证错误，返回未登录状态\n-      if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n-        return this.getDefaultStatus()\n-      }\n-      // 使用缓存数据（如果有）\n-      if (this.pointsInfo) {\n-        return this.formatPointsStatus(this.pointsInfo)\n-      }\n-      return this.getDefaultStatus()\n-    }\n-  }\n-\n-  // 带重试机制的积分获取\n-  async fetchPointsWithRetry(attempt = 0) {\n-    try {\n-      return await pointsApi.getUserPoints()\n-    } catch (error) {\n-      if (attempt < this.maxRetries &&\n-          (error.message.includes('网络') ||\n-           error.message.includes('超时') ||\n-           error.message.includes('认证验证失败'))) {\n-        // 指数退避重试\n-        const delay = this.retryDelay * Math.pow(2, attempt)\n-        console.log(`积分获取失败，${delay}ms后重试 (${attempt + 1}/${this.maxRetries})`)\n-        await new Promise(resolve => setTimeout(resolve, delay))\n-        return this.fetchPointsWithRetry(attempt + 1)\n-      }\n-      throw error\n-    }\n-  }\n-\n-  // 格式化积分状态\n-  formatPointsStatus(pointsInfo) {\n-    const totalPoints = pointsInfo.total_points || 0\n-    const generationCost = 20 // 每次生成消耗20积分\n-\n-    return {\n-      current: totalPoints,\n-      total_points: totalPoints,\n-      purchased_points: pointsInfo.purchased_points || 0,\n-      cards_count: pointsInfo.cards_count || 0,\n-      cards_breakdown: pointsInfo.cards_breakdown || [],\n-      canGenerate: totalPoints >= generationCost,\n-      generationCost: generationCost,\n-      isLoggedIn: true,\n-      // 兼容原有字段\n-      dailyRemaining: 0, // 等级卡系统没有每日免费概念\n-      dailyFreePoints: 0,\n-      totalUsedToday: 0,\n-      experienceCardPoints: 0\n-    }\n-  }\n-\n-  // 获取默认状态\n-  getDefaultStatus() {\n-    const loggedIn = this.isLoggedIn()\n-    return {\n-      current: 0,\n-      total_points: 0,\n-      purchased_points: 0,\n-      cards_count: 0,\n-      cards_breakdown: [],\n-      canGenerate: false,\n-      generationCost: 20,\n-      isLoggedIn: loggedIn,\n-      dailyRemaining: 0,\n-      dailyFreePoints: 0,\n-      totalUsedToday: 0,\n-      experienceCardPoints: 0\n-    }\n-  }\n-\n-  // 消耗积分\n-  async consumePoints(amount, description = '生成图片', mediaUrl = null) {\n-    if (!this.isLoggedIn()) {\n-      throw new Error('请先登录')\n-    }\n-\n-    try {\n-      console.log(`💰 开始消耗积分: ${amount}点, 描述: ${description}`)\n-      if (mediaUrl) {\n-        console.log(`🎬 关联媒体URL: ${mediaUrl}`)\n-      }\n-\n-      // 调用后端API消耗积分\n-      const response = await pointsApi.consumePoints(amount, description, mediaUrl)\n-\n-      if (response.success) {\n-        console.log(`✅ 积分消耗成功: 消耗${amount}点, 剩余${response.data.remaining_points}点`)\n-\n-        // 清除缓存，强制下次获取最新数据\n-        this.pointsInfo = null\n-        this.lastUpdateTime = 0\n-\n-        return {\n-          success: true,\n-          message: '积分消耗成功',\n-          consumed: amount,\n-          remaining: response.data.remaining_points || 0\n-        }\n-      } else {\n-        throw new Error(response.message || '积分不足')\n-      }\n-    } catch (error) {\n-      console.error('消耗积分失败:', error)\n-      throw error\n-    }\n-  }\n-\n-  // 刷新积分信息\n-  async refreshPoints() {\n-    this.pointsInfo = null\n-    this.lastUpdateTime = 0\n-    return await this.getPointsStatus()\n-  }\n-\n-  // 强制清除缓存\n-  clearCache() {\n-    this.pointsInfo = null\n-    this.lastUpdateTime = 0\n-    console.log('🗑️ 积分缓存已清除')\n-  }\n-\n-  // 绑定等级卡\n-  async bindLevelCard(cardNumber, cardPassword) {\n-    if (!this.isLoggedIn()) {\n-      throw new Error('请先登录')\n-    }\n-\n-    try {\n-      const response = await levelCardApi.bindCard(cardNumber, cardPassword)\n-\n-      if (response.success) {\n-        // 清除缓存，强制刷新积分信息\n-        this.pointsInfo = null\n-        this.lastUpdateTime = 0\n-\n-        return {\n-          success: true,\n-          message: response.message,\n-          data: response.data\n-        }\n-      } else {\n-        throw new Error(response.message || '绑定失败')\n-      }\n-    } catch (error) {\n-      console.error('绑定等级卡失败:', error)\n-      throw error\n-    }\n-  }\n-\n-  // 获取等级卡类型\n-  async getCardTypes() {\n-    try {\n-      const response = await levelCardApi.getCardTypes()\n-\n-      if (response.success) {\n-        return response.data.cardTypes || []\n-      } else {\n-        console.error('获取等级卡类型失败:', response.message)\n-        return []\n-      }\n-    } catch (error) {\n-      console.error('获取等级卡类型失败:', error)\n-      return []\n-    }\n-  }\n-\n-  // 获取用户的等级卡列表\n-  async getMyCards() {\n-    if (!this.isLoggedIn()) {\n-      return []\n-    }\n-\n-    try {\n-      const response = await levelCardApi.getMyCards()\n-\n-      if (response.success) {\n-        return response.data.cards || []\n-      } else {\n-        console.error('获取我的等级卡失败:', response.message)\n-        return []\n-      }\n-    } catch (error) {\n-      console.error('获取我的等级卡失败:', error)\n-      return []\n-    }\n-  }\n-\n-  // 检查是否可以生成\n-  async canGenerate() {\n-    const status = await this.getPointsStatus()\n-    return status.canGenerate\n-  }\n-\n-  // 获取生成成本\n-  getGenerationCost() {\n-    return 20 // 固定20积分\n-  }\n-\n-  // 兼容原有接口 - 添加体验卡点数（现在通过等级卡系统）\n-  addExperienceCardPoints() {\n-    // 这个方法在等级卡系统中不再使用\n-    // 积分通过绑定等级卡获得\n-    return {\n-      success: false,\n-      message: '请使用等级卡绑定功能',\n-      added: 0\n-    }\n-  }\n-\n-  // 兼容原有接口 - 获取购买历史\n-  getPurchaseHistory() {\n-    // 等级卡系统中，购买历史通过API获取\n-    return []\n-  }\n-\n-  // 兼容原有接口 - 获取统计信息\n-  getStatistics() {\n-    return {\n-      totalPurchased: 0,\n-      totalUsed: 0,\n-      totalCards: 0\n-    }\n-  }\n-}\n-\n-// 创建单例实例\n-const levelCardPointsManager = new LevelCardPointsManager()\n-\n-export default levelCardPointsManager\n+/**\r\n+ * 等级卡积分管理系统\r\n+ * 基于后端API的积分管理，替代原有的本地积分系统\r\n+ */\r\n+\r\n+import { pointsApi, levelCardApi } from '../services/api.js'\r\n+import { authApi } from '../services/api.js'\r\n+import eventBus, { EVENTS } from './eventBus.js'\r\n+\r\n+class LevelCardPointsManager {\r\n+  constructor() {\r\n+    this.pointsInfo = null\r\n+    this.lastUpdateTime = 0\r\n+    this.cacheTimeout = 60000 // 缓存有效期1分钟（仅用于减少重复请求）\r\n+    this.retryCount = 0\r\n+    this.maxRetries = 3\r\n+    this.retryDelay = 1000 // 初始重试延迟1秒\r\n+  }\r\n+\r\n+  // 检查用户是否已登录\r\n+  isLoggedIn() {\r\n+    return authApi.isLoggedIn()\r\n+  }\r\n+\r\n+  // 获取积分状态\r\n+  async getPointsStatus() {\r\n+    // 首先检查登录状态\r\n+    if (!this.isLoggedIn()) {\r\n+      return this.getDefaultStatus()\r\n+    }\r\n+\r\n+    try {\r\n+      // 如果缓存还有效，直接返回缓存数据（减少重复请求）\r\n+      const now = Date.now()\r\n+      if (this.pointsInfo && (now - this.lastUpdateTime) < this.cacheTimeout) {\r\n+        return this.formatPointsStatus(this.pointsInfo)\r\n+      }\r\n+\r\n+      // 从API获取最新积分信息\r\n+      const response = await this.fetchPointsWithRetry()\r\n+\r\n+      if (response.success) {\r\n+        this.pointsInfo = response.data\r\n+        this.lastUpdateTime = now\r\n+        this.retryCount = 0 // 重置重试计数\r\n+        return this.formatPointsStatus(this.pointsInfo)\r\n+      } else {\r\n+        console.error('获取积分信息失败:', response.message)\r\n+        // 如果是认证错误，返回未登录状态\r\n+        if (response.message && response.message.includes('令牌')) {\r\n+          return this.getDefaultStatus()\r\n+        }\r\n+        // 使用缓存数据（如果有）\r\n+        if (this.pointsInfo) {\r\n+          return this.formatPointsStatus(this.pointsInfo)\r\n+        }\r\n+        return this.getDefaultStatus()\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('获取积分状态失败:', error)\r\n+      // 如果是认证错误，返回未登录状态\r\n+      if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\r\n+        return this.getDefaultStatus()\r\n+      }\r\n+      // 使用缓存数据（如果有）\r\n+      if (this.pointsInfo) {\r\n+        return this.formatPointsStatus(this.pointsInfo)\r\n+      }\r\n+      return this.getDefaultStatus()\r\n+    }\r\n+  }\r\n+\r\n+  // 带重试机制的积分获取\r\n+  async fetchPointsWithRetry(attempt = 0) {\r\n+    try {\r\n+      return await pointsApi.getUserPoints()\r\n+    } catch (error) {\r\n+      if (attempt < this.maxRetries &&\r\n+          (error.message.includes('网络') ||\r\n+           error.message.includes('超时') ||\r\n+           error.message.includes('认证验证失败'))) {\r\n+        // 指数退避重试\r\n+        const delay = this.retryDelay * Math.pow(2, attempt)\r\n+        console.log(`积分获取失败，${delay}ms后重试 (${attempt + 1}/${this.maxRetries})`)\r\n+        await new Promise(resolve => setTimeout(resolve, delay))\r\n+        return this.fetchPointsWithRetry(attempt + 1)\r\n+      }\r\n+      throw error\r\n+    }\r\n+  }\r\n+\r\n+  // 格式化积分状态\r\n+  formatPointsStatus(pointsInfo) {\r\n+    const totalPoints = pointsInfo.total_points || 0\r\n+    const generationCost = 20 // 每次生成消耗20积分\r\n+\r\n+    return {\r\n+      current: totalPoints,\r\n+      total_points: totalPoints,\r\n+      purchased_points: pointsInfo.purchased_points || 0,\r\n+      cards_count: pointsInfo.cards_count || 0,\r\n+      cards_breakdown: pointsInfo.cards_breakdown || [],\r\n+      canGenerate: totalPoints >= generationCost,\r\n+      generationCost: generationCost,\r\n+      isLoggedIn: true,\r\n+      // 兼容原有字段\r\n+      dailyRemaining: 0, // 等级卡系统没有每日免费概念\r\n+      dailyFreePoints: 0,\r\n+      totalUsedToday: 0,\r\n+      experienceCardPoints: 0\r\n+    }\r\n+  }\r\n+\r\n+  // 获取默认状态\r\n+  getDefaultStatus() {\r\n+    const loggedIn = this.isLoggedIn()\r\n+    return {\r\n+      current: 0,\r\n+      total_points: 0,\r\n+      purchased_points: 0,\r\n+      cards_count: 0,\r\n+      cards_breakdown: [],\r\n+      canGenerate: false,\r\n+      generationCost: 20,\r\n+      isLoggedIn: loggedIn,\r\n+      dailyRemaining: 0,\r\n+      dailyFreePoints: 0,\r\n+      totalUsedToday: 0,\r\n+      experienceCardPoints: 0\r\n+    }\r\n+  }\r\n+\r\n+  // 消耗积分\r\n+  async consumePoints(amount, description = '生成图片', mediaUrl = null) {\r\n+    if (!this.isLoggedIn()) {\r\n+      throw new Error('请先登录')\r\n+    }\r\n+\r\n+    try {\r\n+      console.log(`💰 开始消耗积分: ${amount}点, 描述: ${description}`)\r\n+      if (mediaUrl) {\r\n+        console.log(`🎬 关联媒体URL: ${mediaUrl}`)\r\n+      }\r\n+\r\n+      // 调用后端API消耗积分\r\n+      const response = await pointsApi.consumePoints(amount, description, mediaUrl)\r\n+\r\n+      if (response.success) {\r\n+        console.log(`✅ 积分消耗成功: 消耗${amount}点, 剩余${response.data.remaining_points}点`)\r\n+\r\n+        // 清除缓存，强制下次获取最新数据\r\n+        this.pointsInfo = null\r\n+        this.lastUpdateTime = 0\r\n+\r\n+        return {\r\n+          success: true,\r\n+          message: '积分消耗成功',\r\n+          consumed: amount,\r\n+          remaining: response.data.remaining_points || 0\r\n+        }\r\n+      } else {\r\n+        throw new Error(response.message || '积分不足')\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('消耗积分失败:', error)\r\n+      throw error\r\n+    }\r\n+  }\r\n+\r\n+  // 刷新积分信息\r\n+  async refreshPoints() {\r\n+    this.pointsInfo = null\r\n+    this.lastUpdateTime = 0\r\n+    return await this.getPointsStatus()\r\n+  }\r\n+\r\n+  // 强制清除缓存\r\n+  clearCache() {\r\n+    this.pointsInfo = null\r\n+    this.lastUpdateTime = 0\r\n+    console.log('🗑️ 积分缓存已清除')\r\n+  }\r\n+\r\n+  // 绑定等级卡\r\n+  async bindLevelCard(cardNumber, cardPassword) {\r\n+    if (!this.isLoggedIn()) {\r\n+      throw new Error('请先登录')\r\n+    }\r\n+\r\n+    try {\r\n+      const response = await levelCardApi.bindCard(cardNumber, cardPassword)\r\n+\r\n+      if (response.success) {\r\n+        // 清除缓存，强制刷新积分信息\r\n+        this.pointsInfo = null\r\n+        this.lastUpdateTime = 0\r\n+\r\n+        return {\r\n+          success: true,\r\n+          message: response.message,\r\n+          data: response.data\r\n+        }\r\n+      } else {\r\n+        throw new Error(response.message || '绑定失败')\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('绑定等级卡失败:', error)\r\n+      throw error\r\n+    }\r\n+  }\r\n+\r\n+  // 获取等级卡类型\r\n+  async getCardTypes() {\r\n+    try {\r\n+      const response = await levelCardApi.getCardTypes()\r\n+\r\n+      if (response.success) {\r\n+        return response.data.cardTypes || []\r\n+      } else {\r\n+        console.error('获取等级卡类型失败:', response.message)\r\n+        return []\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('获取等级卡类型失败:', error)\r\n+      return []\r\n+    }\r\n+  }\r\n+\r\n+  // 获取用户的等级卡列表\r\n+  async getMyCards() {\r\n+    if (!this.isLoggedIn()) {\r\n+      return []\r\n+    }\r\n+\r\n+    try {\r\n+      const response = await levelCardApi.getMyCards()\r\n+\r\n+      if (response.success) {\r\n+        return response.data.cards || []\r\n+      } else {\r\n+        console.error('获取我的等级卡失败:', response.message)\r\n+        return []\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('获取我的等级卡失败:', error)\r\n+      return []\r\n+    }\r\n+  }\r\n+\r\n+  // 检查是否可以生成\r\n+  async canGenerate() {\r\n+    const status = await this.getPointsStatus()\r\n+    return status.canGenerate\r\n+  }\r\n+\r\n+  // 获取生成成本\r\n+  getGenerationCost() {\r\n+    return 20 // 固定20积分\r\n+  }\r\n+\r\n+  // 兼容原有接口 - 添加体验卡点数（现在通过等级卡系统）\r\n+  addExperienceCardPoints() {\r\n+    // 这个方法在等级卡系统中不再使用\r\n+    // 积分通过绑定等级卡获得\r\n+    return {\r\n+      success: false,\r\n+      message: '请使用等级卡绑定功能',\r\n+      added: 0\r\n+    }\r\n+  }\r\n+\r\n+  // 兼容原有接口 - 获取购买历史\r\n+  getPurchaseHistory() {\r\n+    // 等级卡系统中，购买历史通过API获取\r\n+    return []\r\n+  }\r\n+\r\n+  // 兼容原有接口 - 获取统计信息\r\n+  getStatistics() {\r\n+    return {\r\n+      totalPurchased: 0,\r\n+      totalUsed: 0,\r\n+      totalCards: 0\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// 创建单例实例\r\n+const levelCardPointsManager = new LevelCardPointsManager()\r\n+\r\n+export default levelCardPointsManager\r\n"
                },
                {
                    "date": 1753639327524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,8 +151,22 @@\n         // 清除缓存，强制下次获取最新数据\r\n         this.pointsInfo = null\r\n         this.lastUpdateTime = 0\r\n \r\n+        // 触发积分消耗事件，通知其他组件更新\r\n+        eventBus.emit(EVENTS.POINTS_CONSUMED, {\r\n+          consumed: amount,\r\n+          remaining: response.data.remaining_points || 0,\r\n+          description,\r\n+          mediaUrl\r\n+        })\r\n+\r\n+        // 触发积分更新事件，让积分显示组件刷新\r\n+        eventBus.emit(EVENTS.POINTS_UPDATED, {\r\n+          current: response.data.remaining_points || 0,\r\n+          consumed: amount\r\n+        })\r\n+\r\n         return {\r\n           success: true,\r\n           message: '积分消耗成功',\r\n           consumed: amount,\r\n"
                }
            ],
            "date": 1752288021271,
            "name": "Commit-0",
            "content": "/**\n * 等级卡积分管理系统\n * 基于后端API的积分管理，替代原有的本地积分系统\n */\n\nimport { pointsApi, levelCardApi } from '../services/api.js'\nimport { authApi } from '../services/api.js'\n\nclass LevelCardPointsManager {\n  constructor() {\n    this.pointsInfo = null\n    this.lastUpdateTime = 0\n    this.updateInterval = 30000 // 30秒更新一次\n  }\n\n  // 检查用户是否已登录\n  isLoggedIn() {\n    return authApi.isLoggedIn()\n  }\n\n  // 获取积分状态\n  async getPointsStatus() {\n    if (!this.isLoggedIn()) {\n      return {\n        current: 0,\n        total_points: 0,\n        cards_count: 0,\n        cards_breakdown: [],\n        canGenerate: false,\n        generationCost: 20,\n        isLoggedIn: false\n      }\n    }\n\n    try {\n      // 如果缓存还有效，直接返回缓存数据\n      const now = Date.now()\n      if (this.pointsInfo && (now - this.lastUpdateTime) < this.updateInterval) {\n        return this.formatPointsStatus(this.pointsInfo)\n      }\n\n      // 从API获取最新积分信息\n      const response = await pointsApi.getUserPoints()\n\n      if (response.success) {\n        this.pointsInfo = response.data\n        this.lastUpdateTime = now\n        return this.formatPointsStatus(this.pointsInfo)\n      } else {\n        console.error('获取积分信息失败:', response.message)\n        // 如果是认证错误，返回未登录状态\n        if (response.message && response.message.includes('令牌')) {\n          return this.getDefaultStatus()\n        }\n        return this.getDefaultStatus()\n      }\n    } catch (error) {\n      console.error('获取积分状态失败:', error)\n      // 如果是认证错误，返回未登录状态\n      if (error.message && (error.message.includes('令牌') || error.message.includes('401'))) {\n        return this.getDefaultStatus()\n      }\n      return this.getDefaultStatus()\n    }\n  }\n\n  // 格式化积分状态\n  formatPointsStatus(pointsInfo) {\n    const totalPoints = pointsInfo.total_points || 0\n    const generationCost = 20 // 每次生成消耗20积分\n\n    return {\n      current: totalPoints,\n      total_points: totalPoints,\n      purchased_points: pointsInfo.purchased_points || 0,\n      cards_count: pointsInfo.cards_count || 0,\n      cards_breakdown: pointsInfo.cards_breakdown || [],\n      canGenerate: totalPoints >= generationCost,\n      generationCost: generationCost,\n      isLoggedIn: true,\n      // 兼容原有字段\n      dailyRemaining: 0, // 等级卡系统没有每日免费概念\n      dailyFreePoints: 0,\n      totalUsedToday: 0,\n      experienceCardPoints: 0\n    }\n  }\n\n  // 获取默认状态\n  getDefaultStatus() {\n    return {\n      current: 0,\n      total_points: 0,\n      purchased_points: 0,\n      cards_count: 0,\n      cards_breakdown: [],\n      canGenerate: false,\n      generationCost: 20,\n      isLoggedIn: this.isLoggedIn(),\n      dailyRemaining: 0,\n      dailyFreePoints: 0,\n      totalUsedToday: 0,\n      experienceCardPoints: 0\n    }\n  }\n\n  // 消耗积分\n  async consumePoints(amount, description = '生成图片') {\n    if (!this.isLoggedIn()) {\n      throw new Error('请先登录')\n    }\n\n    try {\n      // 调用后端API消耗积分\n      const response = await pointsApi.consumePoints(amount, description)\n\n      if (response.success) {\n        // 清除缓存，强制下次获取最新数据\n        this.pointsInfo = null\n        this.lastUpdateTime = 0\n\n        return {\n          success: true,\n          message: '积分消耗成功',\n          consumed: amount,\n          remaining: response.data.remaining_points || 0\n        }\n      } else {\n        throw new Error(response.message || '积分不足')\n      }\n    } catch (error) {\n      console.error('消耗积分失败:', error)\n      throw error\n    }\n  }\n\n  // 刷新积分信息\n  async refreshPoints() {\n    this.pointsInfo = null\n    this.lastUpdateTime = 0\n    return await this.getPointsStatus()\n  }\n\n  // 绑定等级卡\n  async bindLevelCard(cardNumber, cardPassword) {\n    if (!this.isLoggedIn()) {\n      throw new Error('请先登录')\n    }\n\n    try {\n      const response = await levelCardApi.bindCard(cardNumber, cardPassword)\n\n      if (response.success) {\n        // 清除缓存，强制刷新积分信息\n        this.pointsInfo = null\n        this.lastUpdateTime = 0\n\n        return {\n          success: true,\n          message: response.message,\n          data: response.data\n        }\n      } else {\n        throw new Error(response.message || '绑定失败')\n      }\n    } catch (error) {\n      console.error('绑定等级卡失败:', error)\n      throw error\n    }\n  }\n\n  // 获取等级卡类型\n  async getCardTypes() {\n    try {\n      const response = await levelCardApi.getCardTypes()\n\n      if (response.success) {\n        return response.data.cardTypes || []\n      } else {\n        console.error('获取等级卡类型失败:', response.message)\n        return []\n      }\n    } catch (error) {\n      console.error('获取等级卡类型失败:', error)\n      return []\n    }\n  }\n\n  // 获取用户的等级卡列表\n  async getMyCards() {\n    if (!this.isLoggedIn()) {\n      return []\n    }\n\n    try {\n      const response = await levelCardApi.getMyCards()\n\n      if (response.success) {\n        return response.data.cards || []\n      } else {\n        console.error('获取我的等级卡失败:', response.message)\n        return []\n      }\n    } catch (error) {\n      console.error('获取我的等级卡失败:', error)\n      return []\n    }\n  }\n\n  // 检查是否可以生成\n  async canGenerate() {\n    const status = await this.getPointsStatus()\n    return status.canGenerate\n  }\n\n  // 获取生成成本\n  getGenerationCost() {\n    return 20 // 固定20积分\n  }\n\n  // 兼容原有接口 - 添加体验卡点数（现在通过等级卡系统）\n  addExperienceCardPoints() {\n    // 这个方法在等级卡系统中不再使用\n    // 积分通过绑定等级卡获得\n    return {\n      success: false,\n      message: '请使用等级卡绑定功能',\n      added: 0\n    }\n  }\n\n  // 兼容原有接口 - 获取购买历史\n  getPurchaseHistory() {\n    // 等级卡系统中，购买历史通过API获取\n    return []\n  }\n\n  // 兼容原有接口 - 获取统计信息\n  getStatistics() {\n    return {\n      totalPurchased: 0,\n      totalUsed: 0,\n      totalCards: 0\n    }\n  }\n}\n\n// 创建单例实例\nconst levelCardPointsManager = new LevelCardPointsManager()\n\nexport default levelCardPointsManager\n"
        }
    ]
}