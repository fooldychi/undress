{
    "sourceFile": "client/src/utils/testConfig.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752333103132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752333134815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,17 +118,113 @@\n     console.error('❌ 获取配置状态失败:', error)\n   }\n }\n \n+/**\n+ * 测试负载均衡器功能\n+ */\n+export async function testLoadBalancer() {\n+  console.log('🧪 开始测试负载均衡器...')\n+\n+  try {\n+    // 1. 测试负载均衡器初始化\n+    console.log('\\n1️⃣ 测试负载均衡器初始化...')\n+    await loadBalancer.initialize()\n+    console.log('✅ 负载均衡器初始化成功')\n+\n+    // 2. 获取服务器统计信息\n+    console.log('\\n2️⃣ 获取服务器统计信息...')\n+    const stats = loadBalancer.getServerStats()\n+    console.log('✅ 服务器统计:', stats)\n+\n+    // 3. 测试服务器选择\n+    console.log('\\n3️⃣ 测试服务器选择...')\n+    for (let i = 0; i < 3; i++) {\n+      const selectedServer = await loadBalancer.getOptimalServer()\n+      console.log(`   第${i + 1}次选择: ${selectedServer}`)\n+    }\n+\n+    // 4. 测试服务器健康检查\n+    console.log('\\n4️⃣ 测试服务器健康检查...')\n+    for (const server of stats.servers) {\n+      const health = await loadBalancer.checkServerHealth(server.url)\n+      console.log(`   ${server.url}: ${health.healthy ? '✅ 健康' : '❌ 不健康'}`)\n+    }\n+\n+    // 5. 测试队列信息获取\n+    console.log('\\n5️⃣ 测试队列信息获取...')\n+    for (const server of stats.servers) {\n+      const queue = await loadBalancer.getServerQueueInfo(server.url)\n+      console.log(`   ${server.url}: 队列=${queue.total}, 支持API=${queue.supportsQueueAPI}`)\n+    }\n+\n+    console.log('\\n🎉 负载均衡器测试完成！')\n+    return true\n+\n+  } catch (error) {\n+    console.error('❌ 负载均衡器测试失败:', error)\n+    return false\n+  }\n+}\n+\n+/**\n+ * 模拟服务器故障测试\n+ */\n+export async function testServerFailover() {\n+  console.log('🧪 开始测试服务器故障转移...')\n+\n+  try {\n+    const stats = loadBalancer.getServerStats()\n+\n+    if (stats.servers.length < 2) {\n+      console.warn('⚠️ 需要至少2个服务器才能测试故障转移')\n+      return false\n+    }\n+\n+    // 1. 获取当前选择的服务器\n+    console.log('\\n1️⃣ 获取当前服务器...')\n+    const currentServer = await loadBalancer.getOptimalServer()\n+    console.log(`当前服务器: ${currentServer}`)\n+\n+    // 2. 模拟服务器故障\n+    console.log('\\n2️⃣ 模拟服务器故障...')\n+    await loadBalancer.recordFailure(currentServer)\n+    console.log(`已记录服务器故障: ${currentServer}`)\n+\n+    // 3. 重新选择服务器\n+    console.log('\\n3️⃣ 重新选择服务器...')\n+    const newServer = await loadBalancer.getOptimalServer()\n+    console.log(`新选择的服务器: ${newServer}`)\n+\n+    if (newServer !== currentServer) {\n+      console.log('✅ 故障转移测试成功')\n+      return true\n+    } else {\n+      console.log('❌ 故障转移测试失败 - 仍然选择了相同的服务器')\n+      return false\n+    }\n+\n+  } catch (error) {\n+    console.error('❌ 故障转移测试失败:', error)\n+    return false\n+  }\n+}\n+\n // 在开发环境下自动暴露到全局\n if (import.meta.env.DEV) {\n   window.testConfigService = testConfigService\n+  window.testLoadBalancer = testLoadBalancer\n+  window.testServerFailover = testServerFailover\n   window.compareConfigs = compareConfigs\n   window.showAllConfigs = showAllConfigs\n   window.configService = configService\n+  window.loadBalancer = loadBalancer\n \n   console.log('🛠️ 配置测试工具已加载到全局:')\n   console.log('  - window.testConfigService() - 测试配置服务')\n+  console.log('  - window.testLoadBalancer() - 测试负载均衡器')\n+  console.log('  - window.testServerFailover() - 测试故障转移')\n   console.log('  - window.showAllConfigs() - 显示所有配置')\n   console.log('  - window.compareConfigs(c1, c2) - 比较配置')\n   console.log('  - window.configService - 配置服务实例')\n+  console.log('  - window.loadBalancer - 负载均衡器实例')\n }\n"
                }
            ],
            "date": 1752333103132,
            "name": "Commit-0",
            "content": "// 配置测试工具\nimport configService from '../services/configService.js'\nimport loadBalancer from '../services/loadBalancer.js'\nimport { getCurrentConfig } from '../services/comfyui.js'\nimport { API_CONFIG } from '../services/api.js'\n\n/**\n * 测试配置服务功能\n */\nexport async function testConfigService() {\n  console.log('🧪 开始测试配置服务...')\n\n  try {\n    // 1. 测试获取服务端配置\n    console.log('\\n1️⃣ 测试获取服务端配置...')\n    const serverConfig = await configService.getConfig(true) // 强制刷新\n    console.log('✅ 服务端配置:', serverConfig)\n\n    // 2. 测试同步ComfyUI配置\n    console.log('\\n2️⃣ 测试同步ComfyUI配置...')\n    const syncResult = await configService.syncComfyUIConfig()\n    console.log('✅ 同步结果:', syncResult)\n\n    // 3. 检查本地ComfyUI配置\n    console.log('\\n3️⃣ 检查本地ComfyUI配置...')\n    const localConfig = getCurrentConfig()\n    console.log('✅ 本地配置:', localConfig)\n\n    // 4. 检查API配置是否已更新\n    console.log('\\n4️⃣ 检查API配置...')\n    console.log('✅ API配置:', {\n      BASE_URL: API_CONFIG.BASE_URL,\n      CLIENT_ID: API_CONFIG.CLIENT_ID,\n      TIMEOUT: API_CONFIG.TIMEOUT\n    })\n\n    // 5. 测试AI积分配置\n    console.log('\\n5️⃣ 测试AI积分配置...')\n    const pointsConfig = await configService.getAIPointsConfig()\n    console.log('✅ AI积分配置:', pointsConfig)\n\n    // 6. 测试前端配置\n    console.log('\\n6️⃣ 测试前端配置...')\n    const frontendConfig = await configService.getFrontendConfig()\n    console.log('✅ 前端配置:', frontendConfig)\n\n    console.log('\\n🎉 配置服务测试完成！')\n    return true\n\n  } catch (error) {\n    console.error('❌ 配置服务测试失败:', error)\n    return false\n  }\n}\n\n/**\n * 比较配置差异\n */\nexport function compareConfigs(config1, config2, label1 = '配置1', label2 = '配置2') {\n  console.log(`\\n🔍 比较 ${label1} 和 ${label2}:`)\n\n  const keys = new Set([...Object.keys(config1), ...Object.keys(config2)])\n\n  for (const key of keys) {\n    const val1 = config1[key]\n    const val2 = config2[key]\n\n    if (val1 !== val2) {\n      console.log(`  🔄 ${key}:`)\n      console.log(`    ${label1}: ${val1}`)\n      console.log(`    ${label2}: ${val2}`)\n    } else {\n      console.log(`  ✅ ${key}: ${val1}`)\n    }\n  }\n}\n\n/**\n * 显示当前所有配置状态\n */\nexport async function showAllConfigs() {\n  console.log('\\n📋 当前所有配置状态:')\n\n  try {\n    // 服务端配置\n    const serverConfig = await configService.getConfig()\n    console.log('\\n🌐 服务端配置:')\n    Object.entries(serverConfig).forEach(([key, value]) => {\n      console.log(`  ${key}: ${value}`)\n    })\n\n    // 本地ComfyUI配置\n    const localConfig = getCurrentConfig()\n    console.log('\\n💾 本地ComfyUI配置:')\n    Object.entries(localConfig).forEach(([key, value]) => {\n      console.log(`  ${key}: ${value}`)\n    })\n\n    // API配置\n    console.log('\\n🔗 API配置:')\n    console.log(`  BASE_URL: ${API_CONFIG.BASE_URL}`)\n    console.log(`  CLIENT_ID: ${API_CONFIG.CLIENT_ID}`)\n    console.log(`  TIMEOUT: ${API_CONFIG.TIMEOUT}`)\n\n    // localStorage中的配置\n    const savedConfig = localStorage.getItem('comfyui_config')\n    if (savedConfig) {\n      console.log('\\n💿 localStorage配置:')\n      const parsed = JSON.parse(savedConfig)\n      Object.entries(parsed).forEach(([key, value]) => {\n        console.log(`  ${key}: ${value}`)\n      })\n    } else {\n      console.log('\\n💿 localStorage: 无保存的配置')\n    }\n\n  } catch (error) {\n    console.error('❌ 获取配置状态失败:', error)\n  }\n}\n\n// 在开发环境下自动暴露到全局\nif (import.meta.env.DEV) {\n  window.testConfigService = testConfigService\n  window.compareConfigs = compareConfigs\n  window.showAllConfigs = showAllConfigs\n  window.configService = configService\n\n  console.log('🛠️ 配置测试工具已加载到全局:')\n  console.log('  - window.testConfigService() - 测试配置服务')\n  console.log('  - window.showAllConfigs() - 显示所有配置')\n  console.log('  - window.compareConfigs(c1, c2) - 比较配置')\n  console.log('  - window.configService - 配置服务实例')\n}\n"
        }
    ]
}