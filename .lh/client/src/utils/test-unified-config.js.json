{
    "sourceFile": "client/src/utils/test-unified-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752548124489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752548124489,
            "name": "Commit-0",
            "content": "// 测试统一的ComfyUI配置\nimport comfyUIConfig from '../config/comfyui.config.js'\n\n/**\n * 测试统一配置的健康检测功能\n */\nexport async function testUnifiedHealthCheck(serverUrl = 'https://l9s75ay3rp-8188.cnb.run') {\n  console.log('🧪 测试统一的ComfyUI健康检测配置')\n  console.log('=' .repeat(60))\n\n  // 1. 测试配置获取\n  console.log('\\n📋 配置信息:')\n  console.log('   官方端点:', comfyUIConfig.HEALTH_CHECK.ENDPOINTS)\n  console.log('   超时时间:', comfyUIConfig.HEALTH_CHECK.TIMEOUT + 'ms')\n  console.log('   请求头:', Object.keys(comfyUIConfig.HEALTH_CHECK.HEADERS))\n\n  // 2. 测试端点列表获取\n  const endpoints = comfyUIConfig.getHealthCheckEndpoints()\n  console.log('\\n🔗 健康检测端点列表:', endpoints)\n\n  // 3. 测试实际健康检测\n  console.log(`\\n🏥 测试服务器健康检测: ${serverUrl}`)\n\n  const results = []\n\n  for (const endpoint of endpoints) {\n    const fullUrl = `${serverUrl.replace(/\\/$/, '')}${endpoint}`\n    console.log(`\\n🔍 测试端点: ${endpoint}`)\n\n    try {\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), comfyUIConfig.HEALTH_CHECK.TIMEOUT)\n\n      const startTime = Date.now()\n      const response = await fetch(fullUrl, {\n        method: 'GET',\n        signal: controller.signal,\n        headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\n        mode: 'cors',\n        credentials: 'omit'\n      })\n\n      clearTimeout(timeoutId)\n      const responseTime = Date.now() - startTime\n\n      const result = {\n        endpoint,\n        status: response.status,\n        ok: response.ok,\n        responseTime,\n        success: false,\n        validated: false\n      }\n\n      if (response.ok) {\n        console.log(`   ✅ 状态: ${response.status} (${responseTime}ms)`)\n\n        try {\n          const data = await response.json()\n          const isValid = comfyUIConfig.validateResponse(endpoint, data)\n\n          result.success = true\n          result.validated = isValid\n          result.dataKeys = Object.keys(data)\n\n          if (isValid) {\n            console.log(`   🎯 验证成功: 确认为有效的ComfyUI响应`)\n            console.log(`   📊 数据字段:`, result.dataKeys.slice(0, 5).join(', '))\n          } else {\n            console.log(`   ⚠️ 验证失败: 不是预期的ComfyUI响应格式`)\n          }\n        } catch (jsonError) {\n          result.success = true\n          result.validated = false\n          result.note = '非JSON响应但连接正常'\n          console.log(`   ⚠️ JSON解析失败但连接正常: ${jsonError.message}`)\n        }\n      } else {\n        console.log(`   ❌ 状态: ${response.status} ${response.statusText} (${responseTime}ms)`)\n      }\n\n      results.push(result)\n\n    } catch (error) {\n      console.log(`   💥 请求失败: ${error.message}`)\n      results.push({\n        endpoint,\n        success: false,\n        error: error.message,\n        errorType: error.name\n      })\n    }\n  }\n\n  // 4. 汇总结果\n  console.log('\\n📊 测试结果汇总:')\n  console.log('=' .repeat(40))\n\n  const successfulEndpoints = results.filter(r => r.success)\n  const validatedEndpoints = results.filter(r => r.validated)\n\n  console.log(`   总端点数: ${results.length}`)\n  console.log(`   成功连接: ${successfulEndpoints.length}`)\n  console.log(`   验证通过: ${validatedEndpoints.length}`)\n\n  if (validatedEndpoints.length > 0) {\n    console.log(`   ✅ 服务器健康状态: 正常`)\n    console.log(`   🎯 推荐端点: ${validatedEndpoints[0].endpoint}`)\n  } else if (successfulEndpoints.length > 0) {\n    console.log(`   ⚠️ 服务器健康状态: 部分正常`)\n    console.log(`   🔗 可用端点: ${successfulEndpoints[0].endpoint}`)\n  } else {\n    console.log(`   ❌ 服务器健康状态: 异常`)\n  }\n\n  return {\n    serverUrl,\n    totalEndpoints: results.length,\n    successfulEndpoints: successfulEndpoints.length,\n    validatedEndpoints: validatedEndpoints.length,\n    isHealthy: validatedEndpoints.length > 0,\n    results\n  }\n}\n\n/**\n * 在浏览器控制台中运行测试\n */\nif (typeof window !== 'undefined') {\n  window.testUnifiedHealthCheck = testUnifiedHealthCheck\n  console.log('🔧 统一配置测试工具已加载，使用 testUnifiedHealthCheck() 进行测试')\n}\n"
        }
    ]
}