{
    "sourceFile": "client/src/utils/apiConfig.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753720973172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753720973172,
            "name": "Commit-0",
            "content": "// 统一API配置管理工具\n// 解决多处配置不一致的问题\n\n/**\n * 获取API基础URL\n * 统一管理所有API调用的基础地址\n * @returns {string} API基础URL\n */\nexport function getAPIBaseURL() {\n  if (import.meta.env.MODE === 'development') {\n    console.log('🔧 开发环境：使用代理模式')\n    return '' // 开发环境使用代理\n  }\n\n  // 生产环境：从环境变量获取\n  const apiUrl = import.meta.env.VITE_API_BASE_URL || 'http://114.132.50.71:3007/api'\n  let baseUrl = apiUrl.replace('/api', '')\n\n  // 强制使用HTTP协议（防止意外的HTTPS配置）\n  if (baseUrl.startsWith('https://')) {\n    console.warn('⚠️ 检测到HTTPS配置，强制转换为HTTP:', baseUrl)\n    baseUrl = baseUrl.replace('https://', 'http://')\n  }\n\n  // 确保没有尾部斜杠\n  baseUrl = baseUrl.replace(/\\/$/, '')\n\n  console.log('🌐 生产环境API基础URL:', baseUrl)\n  return baseUrl\n}\n\n/**\n * 构建完整的API URL\n * @param {string} endpoint - API端点路径（如：'/api/config'）\n * @returns {string} 完整的API URL\n */\nexport function buildAPIURL(endpoint) {\n  const baseUrl = getAPIBaseURL()\n\n  // 确保endpoint以/开头\n  if (!endpoint.startsWith('/')) {\n    endpoint = '/' + endpoint\n  }\n\n  const fullUrl = baseUrl + endpoint\n  console.log(`🔗 构建API URL: ${endpoint} -> ${fullUrl}`)\n  return fullUrl\n}\n\n/**\n * 获取后端API配置对象\n * @returns {Object} API配置对象\n */\nexport function getBackendAPIConfig() {\n  return {\n    BASE_URL: getAPIBaseURL(),\n    TIMEOUT: 30000 // 30秒\n  }\n}\n\n/**\n * 创建标准的fetch请求配置\n * @param {Object} options - 请求选项\n * @returns {Object} fetch配置对象\n */\nexport function createFetchConfig(options = {}) {\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...options\n  }\n\n  // 添加认证token（如果存在）\n  const token = localStorage.getItem('auth_token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n\n  return config\n}\n\n/**\n * 统一的API请求函数\n * @param {string} endpoint - API端点\n * @param {Object} options - 请求选项\n * @returns {Promise} fetch Promise\n */\nexport async function apiRequest(endpoint, options = {}) {\n  const url = buildAPIURL(endpoint)\n  const config = createFetchConfig(options)\n\n  console.log(`🚀 API请求: ${config.method} ${url}`)\n\n  try {\n    const response = await fetch(url, config)\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n    }\n\n    const data = await response.json()\n    console.log(`✅ API响应成功: ${endpoint}`)\n    return data\n\n  } catch (error) {\n    console.error(`❌ API请求失败: ${endpoint}`, error)\n    throw error\n  }\n}\n\n// 导出常用的API端点\nexport const API_ENDPOINTS = {\n  // 配置相关\n  PUBLIC_CONFIG: '/api/public-config',\n  CONFIG: '/api/config',\n\n  // 工作流相关\n  WORKFLOW_CONFIG_PUBLIC: '/api/workflow-config/public',\n  WORKFLOW_CONFIG_FEATURES: '/api/workflow-config/features',\n\n  // 认证相关\n  AUTH_LOGIN: '/api/auth/login',\n  AUTH_REGISTER: '/api/auth/register',\n  AUTH_PROFILE: '/api/auth/profile',\n  AUTH_ME: '/api/auth/me',\n  AUTH_LOGOUT: '/api/auth/logout',\n\n  // 用户相关\n  USER_PROFILE: '/api/user/profile',\n  USER_POINTS: '/api/user/points',\n\n  // 积分和等级卡相关\n  LEVEL_CARDS_USER_POINTS: '/api/level-cards/user-points',\n  LEVEL_CARDS_POINT_LOGS: '/api/level-cards/point-logs',\n  LEVEL_CARDS_MY_CARDS: '/api/level-cards/my-cards',\n  LEVEL_CARDS_CONSUME_POINTS: '/api/level-cards/consume-points',\n  LEVEL_CARDS_TYPES: '/api/level-cards/types',\n\n  // AI处理相关\n  AI_UNDRESS: '/api/ai/undress',\n  AI_FACESWAP: '/api/ai/faceswap'\n}\n\n// 调试信息\nconsole.log('📋 API配置工具已加载')\nconsole.log('🔧 当前环境:', import.meta.env.MODE)\nconsole.log('🌐 API基础URL:', getAPIBaseURL())\n"
        }
    ]
}