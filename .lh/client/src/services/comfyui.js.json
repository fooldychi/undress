{
    "sourceFile": "client/src/services/comfyui.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 235,
            "patches": [
                {
                    "date": 1752326450066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752326477059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,27 +31,48 @@\n \r\n // 配置缓存\r\n let configCache = null\r\n \r\n-// 从localStorage获取配置，如果没有则使用默认配置\r\n-function getComfyUIConfig(forceRefresh = false) {\r\n+// 从服务器和localStorage获取配置\r\n+async function getComfyUIConfig(forceRefresh = false) {\r\n   // 如果强制刷新或缓存为空，重新读取配置\r\n   if (forceRefresh || !configCache) {\r\n-    const savedConfig = localStorage.getItem('comfyui_config')\r\n-    if (savedConfig) {\r\n-      try {\r\n-        const parsed = JSON.parse(savedConfig)\r\n-        configCache = { ...DEFAULT_CONFIG, ...parsed }\r\n-        console.log('🔄 配置已刷新:', configCache)\r\n-      } catch (error) {\r\n-        console.warn('解析保存的配置失败，使用默认配置:', error)\r\n-        configCache = { ...DEFAULT_CONFIG }\r\n+    try {\r\n+      // 首先获取服务器配置作为基础\r\n+      const serverConfig = await getDefaultConfig();\r\n+\r\n+      // 然后检查localStorage中的用户自定义配置\r\n+      const savedConfig = localStorage.getItem('comfyui_config');\r\n+      if (savedConfig) {\r\n+        try {\r\n+          const parsed = JSON.parse(savedConfig);\r\n+          // 合并服务器配置和用户配置，用户配置优先\r\n+          configCache = { ...serverConfig, ...parsed };\r\n+          console.log('🔄 配置已刷新（服务器+用户）:', configCache);\r\n+        } catch (error) {\r\n+          console.warn('解析保存的配置失败，使用服务器配置:', error);\r\n+          configCache = { ...serverConfig };\r\n+        }\r\n+      } else {\r\n+        configCache = { ...serverConfig };\r\n+        console.log('🔄 使用服务器配置:', configCache);\r\n       }\r\n-    } else {\r\n-      configCache = { ...DEFAULT_CONFIG }\r\n+    } catch (error) {\r\n+      console.error('❌ 获取配置失败，使用缓存或默认配置:', error);\r\n+      if (!configCache) {\r\n+        // 如果连缓存都没有，使用硬编码的默认配置\r\n+        configCache = {\r\n+          COMFYUI_SERVER_URL: 'https://hwf0p724ub-8188.cnb.run',\r\n+          CLIENT_ID: 'abc1373d4ad648a3a81d0587fbe5534b',\r\n+          TIMEOUT: 300000,\r\n+          BACKUP_SERVERS: [],\r\n+          AUTO_SWITCH: true,\r\n+          MAX_RETRIES: 3\r\n+        };\r\n+      }\r\n     }\r\n   }\r\n-  return { ...configCache }\r\n+  return { ...configCache };\r\n }\r\n \r\n // 保存配置到localStorage\r\n function saveComfyUIConfig(config) {\r\n"
                },
                {
                    "date": 1752326498699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,21 +182,21 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 直连模式\r\n-function getApiBaseUrl() {\r\n-  const config = getComfyUIConfig(true)\r\n-  console.log('🎯 直连ComfyUI服务器:', config.COMFYUI_SERVER_URL)\r\n+// 获取API基础URL - 动态配置模式\r\n+async function getApiBaseUrl() {\r\n+  const config = await getComfyUIConfig(true);\r\n+  console.log('🎯 使用ComfyUI服务器:', config.COMFYUI_SERVER_URL);\r\n \r\n-  let baseUrl = config.COMFYUI_SERVER_URL\r\n+  let baseUrl = config.COMFYUI_SERVER_URL;\r\n \r\n   // 确保URL格式正确，移除末尾的斜杠\r\n   if (baseUrl && baseUrl.endsWith('/')) {\r\n-    baseUrl = baseUrl.slice(0, -1)\r\n+    baseUrl = baseUrl.slice(0, -1);\r\n   }\r\n \r\n-  return baseUrl\r\n+  return baseUrl;\r\n }\r\n \r\n // 重置为默认配置\r\n function resetToDefaultConfig() {\r\n"
                },
                {
                    "date": 1752326513006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,11 +177,11 @@\n     proxyUpdate: proxyUpdateResult\r\n   }\r\n }\r\n \r\n-// 获取当前配置\r\n-function getCurrentConfig(forceRefresh = false) {\r\n-  return getComfyUIConfig(forceRefresh)\r\n+// 获取当前配置（异步）\r\n+async function getCurrentConfig(forceRefresh = false) {\r\n+  return await getComfyUIConfig(forceRefresh);\r\n }\r\n \r\n // 获取API基础URL - 动态配置模式\r\n async function getApiBaseUrl() {\r\n"
                },
                {
                    "date": 1752326535389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,31 +152,31 @@\n }\r\n \r\n // 更新配置\r\n async function updateComfyUIConfig(newConfig) {\r\n-  const currentConfig = getComfyUIConfig(true) // 强制刷新当前配置\r\n-  const updatedConfig = { ...currentConfig, ...newConfig }\r\n+  const currentConfig = await getComfyUIConfig(true); // 强制刷新当前配置\r\n+  const updatedConfig = { ...currentConfig, ...newConfig };\r\n \r\n-  console.log('🔄 更新配置:', updatedConfig)\r\n+  console.log('🔄 更新配置:', updatedConfig);\r\n \r\n   // 保存到localStorage（这会清除缓存）\r\n-  saveComfyUIConfig(updatedConfig)\r\n+  saveComfyUIConfig(updatedConfig);\r\n \r\n   // 强制刷新配置缓存\r\n-  configCache = null\r\n+  configCache = null;\r\n \r\n   // 通知配置变更\r\n-  notifyConfigChange(updatedConfig)\r\n+  notifyConfigChange(updatedConfig);\r\n \r\n   // 同时更新代理服务器配置\r\n-  const proxyUpdateResult = await updateProxyServerConfig(updatedConfig)\r\n+  const proxyUpdateResult = await updateProxyServerConfig(updatedConfig);\r\n \r\n-  console.log('✅ 配置更新完成，新配置已生效')\r\n+  console.log('✅ 配置更新完成，新配置已生效');\r\n \r\n   return {\r\n     config: updatedConfig,\r\n     proxyUpdate: proxyUpdateResult\r\n-  }\r\n+  };\r\n }\r\n \r\n // 获取当前配置（异步）\r\n async function getCurrentConfig(forceRefresh = false) {\r\n"
                },
                {
                    "date": 1752326556632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,13 +314,13 @@\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n-    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n+    const config = await getComfyUIConfig();\r\n+    const apiBaseUrl = await getApiBaseUrl();\r\n+    console.log('🔄 第二步：提交工作流到ComfyUI');\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/prompt`);\r\n+    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否');\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n"
                },
                {
                    "date": 1752326596152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,12 +211,12 @@\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image) {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n+    const config = await getComfyUIConfig();\r\n+    const apiBaseUrl = await getApiBaseUrl();\r\n+    console.log('🔄 第一步：上传图片到ComfyUI服务器');\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`);\r\n \r\n     // 验证base64格式\r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的base64图片格式')\r\n"
                },
                {
                    "date": 1752326636874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,12 +374,12 @@\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n-    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n+    const config = await getComfyUIConfig();\r\n+    const apiBaseUrl = await getApiBaseUrl();\r\n+    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`);\r\n+    const response = await fetch(`${apiBaseUrl}/history/${promptId}`);\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n"
                },
                {
                    "date": 1752326655020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,10 +395,10 @@\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const config = await getComfyUIConfig();\r\n+    const apiBaseUrl = await getApiBaseUrl();\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n"
                },
                {
                    "date": 1752327478336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,13 +16,13 @@\n       AUTO_SWITCH: config.AUTO_SWITCH,\r\n       MAX_RETRIES: config.MAX_RETRIES\r\n     };\r\n   } catch (error) {\r\n-    console.warn('⚠️ 获取服务器配置失败，使用硬编码默认值:', error);\r\n+    console.warn('⚠️ 获取服务器配置失败，使用环境变量或默认值:', error);\r\n     return {\r\n-      COMFYUI_SERVER_URL: 'https://hwf0p724ub-8188.cnb.run',\r\n-      CLIENT_ID: 'abc1373d4ad648a3a81d0587fbe5534b',\r\n-      TIMEOUT: 300000,\r\n+      COMFYUI_SERVER_URL: import.meta.env.VITE_COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\r\n+      CLIENT_ID: import.meta.env.VITE_COMFYUI_CLIENT_ID || 'your-comfyui-client-id',\r\n+      TIMEOUT: parseInt(import.meta.env.VITE_COMFYUI_TIMEOUT) || 300000,\r\n       BACKUP_SERVERS: [],\r\n       AUTO_SWITCH: true,\r\n       MAX_RETRIES: 3\r\n     };\r\n"
                },
                {
                    "date": 1752327494435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,13 +58,13 @@\n       }\r\n     } catch (error) {\r\n       console.error('❌ 获取配置失败，使用缓存或默认配置:', error);\r\n       if (!configCache) {\r\n-        // 如果连缓存都没有，使用硬编码的默认配置\r\n+        // 如果连缓存都没有，使用环境变量或默认配置\r\n         configCache = {\r\n-          COMFYUI_SERVER_URL: 'https://hwf0p724ub-8188.cnb.run',\r\n-          CLIENT_ID: 'abc1373d4ad648a3a81d0587fbe5534b',\r\n-          TIMEOUT: 300000,\r\n+          COMFYUI_SERVER_URL: import.meta.env.VITE_COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\r\n+          CLIENT_ID: import.meta.env.VITE_COMFYUI_CLIENT_ID || 'your-comfyui-client-id',\r\n+          TIMEOUT: parseInt(import.meta.env.VITE_COMFYUI_TIMEOUT) || 300000,\r\n           BACKUP_SERVERS: [],\r\n           AUTO_SWITCH: true,\r\n           MAX_RETRIES: 3\r\n         };\r\n"
                },
                {
                    "date": 1752328761857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,34 +31,73 @@\n \r\n // 配置缓存\r\n let configCache = null\r\n \r\n+// 检查并清理旧的硬编码配置\r\n+function cleanupOldHardcodedConfig() {\r\n+  const savedConfig = localStorage.getItem('comfyui_config');\r\n+  if (savedConfig) {\r\n+    try {\r\n+      const parsed = JSON.parse(savedConfig);\r\n+      const hardcodedUrls = [\r\n+        'https://5gke5y9mzc-8188.cnb.run',\r\n+        'https://hwf0p724ub-8188.cnb.run',\r\n+        'https://dzqgp58z0s-8188.cnb.run'\r\n+      ];\r\n+      const hardcodedIds = [\r\n+        'abc1373d4ad648a3a81d0587fbe5534b'\r\n+      ];\r\n+\r\n+      // 检查是否包含硬编码配置\r\n+      const hasHardcodedUrl = hardcodedUrls.includes(parsed.COMFYUI_SERVER_URL);\r\n+      const hasHardcodedId = hardcodedIds.includes(parsed.CLIENT_ID);\r\n+\r\n+      if (hasHardcodedUrl || hasHardcodedId) {\r\n+        console.warn('🧹 检测到旧的硬编码配置，正在清理...');\r\n+        console.warn('旧配置:', parsed);\r\n+        localStorage.removeItem('comfyui_config');\r\n+        console.log('✅ 已清理旧的硬编码配置');\r\n+        return true;\r\n+      }\r\n+    } catch (error) {\r\n+      console.warn('解析localStorage配置失败，清理配置:', error);\r\n+      localStorage.removeItem('comfyui_config');\r\n+      return true;\r\n+    }\r\n+  }\r\n+  return false;\r\n+}\r\n+\r\n // 从服务器和localStorage获取配置\r\n async function getComfyUIConfig(forceRefresh = false) {\r\n-  // 如果强制刷新或缓存为空，重新读取配置\r\n-  if (forceRefresh || !configCache) {\r\n+  // 首先清理旧的硬编码配置\r\n+  const wasCleanedUp = cleanupOldHardcodedConfig();\r\n+\r\n+  // 如果强制刷新、缓存为空或刚清理了配置，重新读取配置\r\n+  if (forceRefresh || !configCache || wasCleanedUp) {\r\n     try {\r\n       // 首先获取服务器配置作为基础\r\n       const serverConfig = await getDefaultConfig();\r\n+      console.log('🌐 从服务器获取的配置:', serverConfig);\r\n \r\n-      // 然后检查localStorage中的用户自定义配置\r\n+      // 然后检查localStorage中的用户自定义配置（已清理硬编码）\r\n       const savedConfig = localStorage.getItem('comfyui_config');\r\n       if (savedConfig) {\r\n         try {\r\n           const parsed = JSON.parse(savedConfig);\r\n-          // 合并服务器配置和用户配置，用户配置优先\r\n-          configCache = { ...serverConfig, ...parsed };\r\n-          console.log('🔄 配置已刷新（服务器+用户）:', configCache);\r\n+          // 服务器配置优先，用户配置作为补充\r\n+          configCache = { ...parsed, ...serverConfig };\r\n+          console.log('🔄 配置已刷新（服务器优先+用户补充）:', configCache);\r\n         } catch (error) {\r\n           console.warn('解析保存的配置失败，使用服务器配置:', error);\r\n           configCache = { ...serverConfig };\r\n         }\r\n       } else {\r\n         configCache = { ...serverConfig };\r\n-        console.log('🔄 使用服务器配置:', configCache);\r\n+        console.log('🔄 使用纯服务器配置:', configCache);\r\n       }\r\n     } catch (error) {\r\n-      console.error('❌ 获取配置失败，使用缓存或默认配置:', error);\r\n+      console.error('❌ 获取配置失败，使用环境变量或默认配置:', error);\r\n       if (!configCache) {\r\n         // 如果连缓存都没有，使用环境变量或默认配置\r\n         configCache = {\r\n           COMFYUI_SERVER_URL: import.meta.env.VITE_COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\r\n"
                },
                {
                    "date": 1752328900466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,42 @@\n-// ComfyUI工作流服务 - 动态配置模式\r\n+// ComfyUI工作流服务 - 直连模式\r\n import undressWorkflow from '../workflows/undress.json'\r\n import faceSwapWorkflow from '../workflows/faceswap2.0.json'\r\n import comfyUIConfig from '../config/comfyui.config.js'\r\n import pointsManager from '../utils/pointsManager.js'\r\n \r\n-// 获取动态配置的默认值\r\n-async function getDefaultConfig() {\r\n-  try {\r\n-    const config = await comfyUIConfig.getConfig();\r\n-    return {\r\n-      COMFYUI_SERVER_URL: config.BASE_URL,\r\n-      CLIENT_ID: config.CLIENT_ID,\r\n-      TIMEOUT: config.REQUEST_TIMEOUT,\r\n-      BACKUP_SERVERS: config.BACKUP_SERVERS,\r\n-      AUTO_SWITCH: config.AUTO_SWITCH,\r\n-      MAX_RETRIES: config.MAX_RETRIES\r\n-    };\r\n-  } catch (error) {\r\n-    console.warn('⚠️ 获取服务器配置失败，使用环境变量或默认值:', error);\r\n-    return {\r\n-      COMFYUI_SERVER_URL: import.meta.env.VITE_COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\r\n-      CLIENT_ID: import.meta.env.VITE_COMFYUI_CLIENT_ID || 'your-comfyui-client-id',\r\n-      TIMEOUT: parseInt(import.meta.env.VITE_COMFYUI_TIMEOUT) || 300000,\r\n-      BACKUP_SERVERS: [],\r\n-      AUTO_SWITCH: true,\r\n-      MAX_RETRIES: 3\r\n-    };\r\n-  }\r\n+// API配置 - 直连模式\r\n+const DEFAULT_CONFIG = {\r\n+  // ComfyUI服务器URL（用户可配置）\r\n+  COMFYUI_SERVER_URL: comfyUIConfig.BASE_URL,\r\n+  CLIENT_ID: comfyUIConfig.CLIENT_ID,\r\n+  TIMEOUT: 300000 // 5分钟\r\n }\r\n \r\n // 配置缓存\r\n let configCache = null\r\n \r\n-// 检查并清理旧的硬编码配置\r\n-function cleanupOldHardcodedConfig() {\r\n-  const savedConfig = localStorage.getItem('comfyui_config');\r\n-  if (savedConfig) {\r\n-    try {\r\n-      const parsed = JSON.parse(savedConfig);\r\n-      const hardcodedUrls = [\r\n-        'https://5gke5y9mzc-8188.cnb.run',\r\n-        'https://hwf0p724ub-8188.cnb.run',\r\n-        'https://dzqgp58z0s-8188.cnb.run'\r\n-      ];\r\n-      const hardcodedIds = [\r\n-        'abc1373d4ad648a3a81d0587fbe5534b'\r\n-      ];\r\n-\r\n-      // 检查是否包含硬编码配置\r\n-      const hasHardcodedUrl = hardcodedUrls.includes(parsed.COMFYUI_SERVER_URL);\r\n-      const hasHardcodedId = hardcodedIds.includes(parsed.CLIENT_ID);\r\n-\r\n-      if (hasHardcodedUrl || hasHardcodedId) {\r\n-        console.warn('🧹 检测到旧的硬编码配置，正在清理...');\r\n-        console.warn('旧配置:', parsed);\r\n-        localStorage.removeItem('comfyui_config');\r\n-        console.log('✅ 已清理旧的硬编码配置');\r\n-        return true;\r\n+// 从localStorage获取配置，如果没有则使用默认配置\r\n+function getComfyUIConfig(forceRefresh = false) {\r\n+  // 如果强制刷新或缓存为空，重新读取配置\r\n+  if (forceRefresh || !configCache) {\r\n+    const savedConfig = localStorage.getItem('comfyui_config')\r\n+    if (savedConfig) {\r\n+      try {\r\n+        const parsed = JSON.parse(savedConfig)\r\n+        configCache = { ...DEFAULT_CONFIG, ...parsed }\r\n+        console.log('🔄 配置已刷新:', configCache)\r\n+      } catch (error) {\r\n+        console.warn('解析保存的配置失败，使用默认配置:', error)\r\n+        configCache = { ...DEFAULT_CONFIG }\r\n       }\r\n-    } catch (error) {\r\n-      console.warn('解析localStorage配置失败，清理配置:', error);\r\n-      localStorage.removeItem('comfyui_config');\r\n-      return true;\r\n+    } else {\r\n+      configCache = { ...DEFAULT_CONFIG }\r\n     }\r\n   }\r\n-  return false;\r\n+  return { ...configCache }\r\n }\r\n \r\n-// 从服务器和localStorage获取配置\r\n-async function getComfyUIConfig(forceRefresh = false) {\r\n-  // 首先清理旧的硬编码配置\r\n-  const wasCleanedUp = cleanupOldHardcodedConfig();\r\n-\r\n-  // 如果强制刷新、缓存为空或刚清理了配置，重新读取配置\r\n-  if (forceRefresh || !configCache || wasCleanedUp) {\r\n-    try {\r\n-      // 首先获取服务器配置作为基础\r\n-      const serverConfig = await getDefaultConfig();\r\n-      console.log('🌐 从服务器获取的配置:', serverConfig);\r\n-\r\n-      // 然后检查localStorage中的用户自定义配置（已清理硬编码）\r\n-      const savedConfig = localStorage.getItem('comfyui_config');\r\n-      if (savedConfig) {\r\n-        try {\r\n-          const parsed = JSON.parse(savedConfig);\r\n-          // 服务器配置优先，用户配置作为补充\r\n-          configCache = { ...parsed, ...serverConfig };\r\n-          console.log('🔄 配置已刷新（服务器优先+用户补充）:', configCache);\r\n-        } catch (error) {\r\n-          console.warn('解析保存的配置失败，使用服务器配置:', error);\r\n-          configCache = { ...serverConfig };\r\n-        }\r\n-      } else {\r\n-        configCache = { ...serverConfig };\r\n-        console.log('🔄 使用纯服务器配置:', configCache);\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('❌ 获取配置失败，使用环境变量或默认配置:', error);\r\n-      if (!configCache) {\r\n-        // 如果连缓存都没有，使用环境变量或默认配置\r\n-        configCache = {\r\n-          COMFYUI_SERVER_URL: import.meta.env.VITE_COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\r\n-          CLIENT_ID: import.meta.env.VITE_COMFYUI_CLIENT_ID || 'your-comfyui-client-id',\r\n-          TIMEOUT: parseInt(import.meta.env.VITE_COMFYUI_TIMEOUT) || 300000,\r\n-          BACKUP_SERVERS: [],\r\n-          AUTO_SWITCH: true,\r\n-          MAX_RETRIES: 3\r\n-        };\r\n-      }\r\n-    }\r\n-  }\r\n-  return { ...configCache };\r\n-}\r\n-\r\n // 保存配置到localStorage\r\n function saveComfyUIConfig(config) {\r\n   try {\r\n     localStorage.setItem('comfyui_config', JSON.stringify(config))\r\n@@ -191,51 +114,51 @@\n }\r\n \r\n // 更新配置\r\n async function updateComfyUIConfig(newConfig) {\r\n-  const currentConfig = await getComfyUIConfig(true); // 强制刷新当前配置\r\n-  const updatedConfig = { ...currentConfig, ...newConfig };\r\n+  const currentConfig = getComfyUIConfig(true) // 强制刷新当前配置\r\n+  const updatedConfig = { ...currentConfig, ...newConfig }\r\n \r\n-  console.log('🔄 更新配置:', updatedConfig);\r\n+  console.log('🔄 更新配置:', updatedConfig)\r\n \r\n   // 保存到localStorage（这会清除缓存）\r\n-  saveComfyUIConfig(updatedConfig);\r\n+  saveComfyUIConfig(updatedConfig)\r\n \r\n   // 强制刷新配置缓存\r\n-  configCache = null;\r\n+  configCache = null\r\n \r\n   // 通知配置变更\r\n-  notifyConfigChange(updatedConfig);\r\n+  notifyConfigChange(updatedConfig)\r\n \r\n   // 同时更新代理服务器配置\r\n-  const proxyUpdateResult = await updateProxyServerConfig(updatedConfig);\r\n+  const proxyUpdateResult = await updateProxyServerConfig(updatedConfig)\r\n \r\n-  console.log('✅ 配置更新完成，新配置已生效');\r\n+  console.log('✅ 配置更新完成，新配置已生效')\r\n \r\n   return {\r\n     config: updatedConfig,\r\n     proxyUpdate: proxyUpdateResult\r\n-  };\r\n+  }\r\n }\r\n \r\n-// 获取当前配置（异步）\r\n-async function getCurrentConfig(forceRefresh = false) {\r\n-  return await getComfyUIConfig(forceRefresh);\r\n+// 获取当前配置\r\n+function getCurrentConfig(forceRefresh = false) {\r\n+  return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 动态配置模式\r\n-async function getApiBaseUrl() {\r\n-  const config = await getComfyUIConfig(true);\r\n-  console.log('🎯 使用ComfyUI服务器:', config.COMFYUI_SERVER_URL);\r\n+// 获取API基础URL - 直连模式\r\n+function getApiBaseUrl() {\r\n+  const config = getComfyUIConfig(true)\r\n+  console.log('🎯 直连ComfyUI服务器:', config.COMFYUI_SERVER_URL)\r\n \r\n-  let baseUrl = config.COMFYUI_SERVER_URL;\r\n+  let baseUrl = config.COMFYUI_SERVER_URL\r\n \r\n   // 确保URL格式正确，移除末尾的斜杠\r\n   if (baseUrl && baseUrl.endsWith('/')) {\r\n-    baseUrl = baseUrl.slice(0, -1);\r\n+    baseUrl = baseUrl.slice(0, -1)\r\n   }\r\n \r\n-  return baseUrl;\r\n+  return baseUrl\r\n }\r\n \r\n // 重置为默认配置\r\n function resetToDefaultConfig() {\r\n@@ -250,12 +173,12 @@\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image) {\r\n   try {\r\n-    const config = await getComfyUIConfig();\r\n-    const apiBaseUrl = await getApiBaseUrl();\r\n-    console.log('🔄 第一步：上传图片到ComfyUI服务器');\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`);\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = getApiBaseUrl()\r\n+    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n     // 验证base64格式\r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的base64图片格式')\r\n@@ -353,13 +276,13 @@\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n   try {\r\n-    const config = await getComfyUIConfig();\r\n-    const apiBaseUrl = await getApiBaseUrl();\r\n-    console.log('🔄 第二步：提交工作流到ComfyUI');\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/prompt`);\r\n-    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否');\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = getApiBaseUrl()\r\n+    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n+    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n@@ -413,12 +336,12 @@\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n   try {\r\n-    const config = await getComfyUIConfig();\r\n-    const apiBaseUrl = await getApiBaseUrl();\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`);\r\n-    const response = await fetch(`${apiBaseUrl}/history/${promptId}`);\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = getApiBaseUrl()\r\n+    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n+    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n@@ -434,10 +357,10 @@\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n   try {\r\n-    const config = await getComfyUIConfig();\r\n-    const apiBaseUrl = await getApiBaseUrl();\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = getApiBaseUrl()\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n"
                },
                {
                    "date": 1752330205149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import undressWorkflow from '../workflows/undress.json'\r\n import faceSwapWorkflow from '../workflows/faceswap2.0.json'\r\n import comfyUIConfig from '../config/comfyui.config.js'\r\n import pointsManager from '../utils/pointsManager.js'\r\n+import { updateAPIConfig } from './api.js'\r\n \r\n // API配置 - 直连模式\r\n const DEFAULT_CONFIG = {\r\n   // ComfyUI服务器URL（用户可配置）\r\n"
                },
                {
                    "date": 1752330218715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,15 @@\n }\r\n \r\n // 通知配置变更\r\n function notifyConfigChange(config) {\r\n+  // 同步更新API配置\r\n+  try {\r\n+    updateAPIConfig(config)\r\n+  } catch (error) {\r\n+    console.error('更新API配置失败:', error)\r\n+  }\r\n+\r\n   configChangeListeners.forEach(listener => {\r\n     try {\r\n       listener(config)\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1752332190423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,10 +183,10 @@\n async function uploadImageToComfyUI(base64Image) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n+    console.log('🔄 第一步：通过后端负载均衡上传图片到ComfyUI服务器')\r\n+    console.log('📡 后端API地址:', '/api/comfyui/upload')\r\n \r\n     // 验证base64格式\r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的base64图片格式')\r\n"
                },
                {
                    "date": 1752332206742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,18 +214,18 @@\n       type: mimeType,\r\n       size: `${(blob.size / 1024).toFixed(2)} KB`\r\n     })\r\n \r\n-    // 直连上传图片\r\n+    // 通过后端负载均衡上传图片\r\n     const formData = new FormData()\r\n     formData.append('image', blob, filename)\r\n     formData.append('type', 'input')\r\n     formData.append('subfolder', '')\r\n     formData.append('overwrite', 'false')\r\n \r\n-    console.log('🔄 开始上传图片...')\r\n+    console.log('🔄 开始通过后端负载均衡上传图片...')\r\n \r\n-    const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n+    const response = await fetch('/api/comfyui/upload', {\r\n       method: 'POST',\r\n       body: formData\r\n     })\r\n \r\n"
                },
                {
                    "date": 1752332222579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,13 +239,13 @@\n     const result = await response.json()\r\n     console.log('✅ 图片上传成功:', result)\r\n \r\n     // 验证返回结果\r\n-    if (!result.name) {\r\n+    if (!result.success || !result.data?.name) {\r\n       throw new Error('上传响应中缺少文件名')\r\n     }\r\n \r\n-    return result.name\r\n+    return result.data.name\r\n \r\n   } catch (error) {\r\n     console.error('❌ 图片上传失败:', error)\r\n     throw new Error(`图片上传失败: ${error.message}`)\r\n"
                },
                {
                    "date": 1752332246255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,11 +286,10 @@\n async function submitWorkflow(workflowPrompt) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n-    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n+    console.log('🔄 第二步：通过后端负载均衡提交工作流到ComfyUI')\r\n+    console.log('📡 后端API地址:', '/api/comfyui/prompt')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n"
                },
                {
                    "date": 1752332262277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,20 +302,17 @@\n       node_49_exists: !!requestBody.prompt['49'],\r\n       node_49_image: requestBody.prompt['49']?.inputs?.image\r\n     })\r\n \r\n-    // 第二步API调用：提交工作流到ComfyUI\r\n-    const promptUrl = `${apiBaseUrl}/prompt`\r\n-    console.log('🌐 调用工作流API:', promptUrl)\r\n+    // 第二步API调用：通过后端负载均衡提交工作流到ComfyUI\r\n+    console.log('🌐 调用后端负载均衡工作流API: /api/comfyui/prompt')\r\n \r\n-    const response = await fetch(promptUrl, {\r\n+    const response = await fetch('/api/comfyui/prompt', {\r\n       method: 'POST',\r\n       headers: {\r\n         'Content-Type': 'application/json'\r\n       },\r\n-      body: JSON.stringify(requestBody),\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n+      body: JSON.stringify(requestBody)\r\n     })\r\n \r\n     console.log('📥 工作流响应状态:', response.status, response.statusText)\r\n \r\n"
                },
                {
                    "date": 1752332278398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,13 +325,13 @@\n     const result = await response.json()\r\n     console.log('✅ 工作流提交成功:', result)\r\n \r\n     // 验证返回结果\r\n-    if (!result.prompt_id) {\r\n+    if (!result.success || !result.data?.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n     }\r\n \r\n-    return result.prompt_id // 返回任务ID\r\n+    return result.data.prompt_id // 返回任务ID\r\n \r\n   } catch (error) {\r\n     console.error('❌ 工作流提交失败:', error)\r\n     throw new Error(`工作流提交失败: ${error.message}`)\r\n"
                },
                {
                    "date": 1752332302531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,10 +342,10 @@\n async function checkTaskStatus(promptId) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n-    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n+    console.log('🔍 通过后端负载均衡查询任务状态:', `/api/comfyui/history/${promptId}`)\r\n+    const response = await fetch(`/api/comfyui/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n"
                },
                {
                    "date": 1752332316415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,10 +350,16 @@\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n \r\n     const result = await response.json()\r\n-    return result[promptId] || null\r\n \r\n+    // 处理后端API响应格式\r\n+    if (result.success && result.data) {\r\n+      return result.data[promptId] || null\r\n+    } else {\r\n+      return result[promptId] || null\r\n+    }\r\n+\r\n   } catch (error) {\r\n     console.error('状态查询失败:', error)\r\n     throw new Error(`状态查询失败: ${error.message}`)\r\n   }\r\n"
                },
                {
                    "date": 1752332340881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,17 +414,17 @@\n     }\r\n \r\n     console.log('📷 最终选择的图片:', imageInfo)\r\n \r\n-    // 构建图片URL - 按照ComfyUI API文档格式\r\n+    // 构建图片URL - 通过后端负载均衡\r\n     const params = new URLSearchParams({\r\n       filename: imageInfo.filename,\r\n       type: imageInfo.type,\r\n       subfolder: imageInfo.subfolder || ''\r\n     })\r\n-    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n+    const imageUrl = `/api/comfyui/view?${params.toString()}`\r\n \r\n-    console.log('🌐 获取图片URL:', imageUrl)\r\n+    console.log('🌐 通过后端负载均衡获取图片URL:', imageUrl)\r\n \r\n     // 获取图片数据并转换为base64\r\n     const imageResponse = await fetch(imageUrl)\r\n     if (!imageResponse.ok) {\r\n"
                },
                {
                    "date": 1752332665069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,10 +183,10 @@\n async function uploadImageToComfyUI(base64Image) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第一步：通过后端负载均衡上传图片到ComfyUI服务器')\r\n-    console.log('📡 后端API地址:', '/api/comfyui/upload')\r\n+    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n     // 验证base64格式\r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的base64图片格式')\r\n@@ -214,18 +214,18 @@\n       type: mimeType,\r\n       size: `${(blob.size / 1024).toFixed(2)} KB`\r\n     })\r\n \r\n-    // 通过后端负载均衡上传图片\r\n+    // 直连上传图片\r\n     const formData = new FormData()\r\n     formData.append('image', blob, filename)\r\n     formData.append('type', 'input')\r\n     formData.append('subfolder', '')\r\n     formData.append('overwrite', 'false')\r\n \r\n-    console.log('🔄 开始通过后端负载均衡上传图片...')\r\n+    console.log('🔄 开始上传图片...')\r\n \r\n-    const response = await fetch('/api/comfyui/upload', {\r\n+    const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n       method: 'POST',\r\n       body: formData\r\n     })\r\n \r\n@@ -239,13 +239,13 @@\n     const result = await response.json()\r\n     console.log('✅ 图片上传成功:', result)\r\n \r\n     // 验证返回结果\r\n-    if (!result.success || !result.data?.name) {\r\n+    if (!result.name) {\r\n       throw new Error('上传响应中缺少文件名')\r\n     }\r\n \r\n-    return result.data.name\r\n+    return result.name\r\n \r\n   } catch (error) {\r\n     console.error('❌ 图片上传失败:', error)\r\n     throw new Error(`图片上传失败: ${error.message}`)\r\n@@ -286,10 +286,11 @@\n async function submitWorkflow(workflowPrompt) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔄 第二步：通过后端负载均衡提交工作流到ComfyUI')\r\n-    console.log('📡 后端API地址:', '/api/comfyui/prompt')\r\n+    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n+    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n@@ -302,17 +303,20 @@\n       node_49_exists: !!requestBody.prompt['49'],\r\n       node_49_image: requestBody.prompt['49']?.inputs?.image\r\n     })\r\n \r\n-    // 第二步API调用：通过后端负载均衡提交工作流到ComfyUI\r\n-    console.log('🌐 调用后端负载均衡工作流API: /api/comfyui/prompt')\r\n+    // 第二步API调用：提交工作流到ComfyUI\r\n+    const promptUrl = `${apiBaseUrl}/prompt`\r\n+    console.log('🌐 调用工作流API:', promptUrl)\r\n \r\n-    const response = await fetch('/api/comfyui/prompt', {\r\n+    const response = await fetch(promptUrl, {\r\n       method: 'POST',\r\n       headers: {\r\n         'Content-Type': 'application/json'\r\n       },\r\n-      body: JSON.stringify(requestBody)\r\n+      body: JSON.stringify(requestBody),\r\n+      mode: 'cors',\r\n+      credentials: 'omit'\r\n     })\r\n \r\n     console.log('📥 工作流响应状态:', response.status, response.statusText)\r\n \r\n@@ -325,13 +329,13 @@\n     const result = await response.json()\r\n     console.log('✅ 工作流提交成功:', result)\r\n \r\n     // 验证返回结果\r\n-    if (!result.success || !result.data?.prompt_id) {\r\n+    if (!result.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n     }\r\n \r\n-    return result.data.prompt_id // 返回任务ID\r\n+    return result.prompt_id // 返回任务ID\r\n \r\n   } catch (error) {\r\n     console.error('❌ 工作流提交失败:', error)\r\n     throw new Error(`工作流提交失败: ${error.message}`)\r\n@@ -342,24 +346,18 @@\n async function checkTaskStatus(promptId) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = getApiBaseUrl()\r\n-    console.log('🔍 通过后端负载均衡查询任务状态:', `/api/comfyui/history/${promptId}`)\r\n-    const response = await fetch(`/api/comfyui/history/${promptId}`)\r\n+    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n+    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n \r\n     const result = await response.json()\r\n+    return result[promptId] || null\r\n \r\n-    // 处理后端API响应格式\r\n-    if (result.success && result.data) {\r\n-      return result.data[promptId] || null\r\n-    } else {\r\n-      return result[promptId] || null\r\n-    }\r\n-\r\n   } catch (error) {\r\n     console.error('状态查询失败:', error)\r\n     throw new Error(`状态查询失败: ${error.message}`)\r\n   }\r\n@@ -414,17 +412,17 @@\n     }\r\n \r\n     console.log('📷 最终选择的图片:', imageInfo)\r\n \r\n-    // 构建图片URL - 通过后端负载均衡\r\n+    // 构建图片URL - 按照ComfyUI API文档格式\r\n     const params = new URLSearchParams({\r\n       filename: imageInfo.filename,\r\n       type: imageInfo.type,\r\n       subfolder: imageInfo.subfolder || ''\r\n     })\r\n-    const imageUrl = `/api/comfyui/view?${params.toString()}`\r\n+    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n \r\n-    console.log('🌐 通过后端负载均衡获取图片URL:', imageUrl)\r\n+    console.log('🌐 获取图片URL:', imageUrl)\r\n \r\n     // 获取图片数据并转换为base64\r\n     const imageResponse = await fetch(imageUrl)\r\n     if (!imageResponse.ok) {\r\n"
                },
                {
                    "date": 1752332884368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import faceSwapWorkflow from '../workflows/faceswap2.0.json'\r\n import comfyUIConfig from '../config/comfyui.config.js'\r\n import pointsManager from '../utils/pointsManager.js'\r\n import { updateAPIConfig } from './api.js'\r\n+import loadBalancer from './loadBalancer.js'\r\n \r\n // API配置 - 直连模式\r\n const DEFAULT_CONFIG = {\r\n   // ComfyUI服务器URL（用户可配置）\r\n"
                },
                {
                    "date": 1752332902461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,21 +153,35 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 直连模式\r\n-function getApiBaseUrl() {\r\n-  const config = getComfyUIConfig(true)\r\n-  console.log('🎯 直连ComfyUI服务器:', config.COMFYUI_SERVER_URL)\r\n+// 获取API基础URL - 使用负载均衡\r\n+async function getApiBaseUrl() {\r\n+  try {\r\n+    // 使用负载均衡器选择最优服务器\r\n+    const optimalServer = await loadBalancer.getOptimalServer()\r\n+    console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n-  let baseUrl = config.COMFYUI_SERVER_URL\r\n+    // 确保URL格式正确，移除末尾的斜杠\r\n+    let baseUrl = optimalServer\r\n+    if (baseUrl && baseUrl.endsWith('/')) {\r\n+      baseUrl = baseUrl.slice(0, -1)\r\n+    }\r\n \r\n-  // 确保URL格式正确，移除末尾的斜杠\r\n-  if (baseUrl && baseUrl.endsWith('/')) {\r\n-    baseUrl = baseUrl.slice(0, -1)\r\n+    return baseUrl\r\n+  } catch (error) {\r\n+    console.warn('⚠️ 负载均衡器失败，使用配置的服务器:', error)\r\n+\r\n+    // 降级到配置的服务器\r\n+    const config = getComfyUIConfig(true)\r\n+    let baseUrl = config.COMFYUI_SERVER_URL\r\n+\r\n+    if (baseUrl && baseUrl.endsWith('/')) {\r\n+      baseUrl = baseUrl.slice(0, -1)\r\n+    }\r\n+\r\n+    return baseUrl\r\n   }\r\n-\r\n-  return baseUrl\r\n }\r\n \r\n // 重置为默认配置\r\n function resetToDefaultConfig() {\r\n"
                },
                {
                    "date": 1752332920823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,14 +298,16 @@\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n+  let selectedServer = null\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    selectedServer = apiBaseUrl // 记录选择的服务器\r\n     console.log('🔄 第二步：提交工作流到ComfyUI')\r\n     console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n-    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n+    console.log('🔧 使用负载均衡:', '是')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n"
                },
                {
                    "date": 1752332934682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,8 +354,15 @@\n     return result.prompt_id // 返回任务ID\r\n \r\n   } catch (error) {\r\n     console.error('❌ 工作流提交失败:', error)\r\n+\r\n+    // 记录服务器失败\r\n+    if (selectedServer) {\r\n+      console.log('📝 记录服务器失败:', selectedServer)\r\n+      await loadBalancer.recordFailure(selectedServer)\r\n+    }\r\n+\r\n     throw new Error(`工作流提交失败: ${error.message}`)\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752332949434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,9 +369,9 @@\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n     console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n     const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n"
                },
                {
                    "date": 1752332964179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -579,9 +579,9 @@\n \r\n // 检查ComfyUI服务器状态\r\n async function checkComfyUIServerStatus() {\r\n   try {\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n     console.log('🔍 检查ComfyUI服务器状态:', apiBaseUrl)\r\n \r\n     const response = await fetch(`${apiBaseUrl}/system_stats`, {\r\n       method: 'GET',\r\n"
                },
                {
                    "date": 1752333462422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n     console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n     console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n     // 验证base64格式\r\n"
                },
                {
                    "date": 1752333492844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,9 +390,9 @@\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = getApiBaseUrl()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n"
                },
                {
                    "date": 1752333507074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -548,9 +548,9 @@\n         type: 'input',\r\n         subfolder: ''\r\n       })\r\n       const config = getComfyUIConfig()\r\n-      const apiBaseUrl = getApiBaseUrl()\r\n+      const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n       originalImage = `${apiBaseUrl}/view?${params.toString()}`\r\n       console.log('📷 获取节点49原图URL:', originalImage)\r\n     } catch (error) {\r\n       console.warn('⚠️ 获取节点49原图失败，使用用户上传的图片:', error)\r\n"
                },
                {
                    "date": 1752334226908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import undressWorkflow from '../workflows/undress.json'\r\n import faceSwapWorkflow from '../workflows/faceswap2.0.json'\r\n import comfyUIConfig from '../config/comfyui.config.js'\r\n import pointsManager from '../utils/pointsManager.js'\r\n+import levelCardPointsManager from '../utils/levelCardPointsManager.js'\r\n import { updateAPIConfig } from './api.js'\r\n import loadBalancer from './loadBalancer.js'\r\n \r\n // API配置 - 直连模式\r\n"
                },
                {
                    "date": 1752334245348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,13 +495,13 @@\n async function processUndressImage(base64Image) {\r\n   try {\r\n     console.log('🚀 开始处理换衣请求...')\r\n \r\n-    // 检查体验点\r\n-    console.log('💎 检查体验点...')\r\n-    if (!pointsManager.hasEnoughPoints()) {\r\n-      const status = pointsManager.getPointsStatus()\r\n-      throw new Error(`体验点不足！当前点数: ${status.current}，需要: ${status.generationCost}`)\r\n+    // 检查积分（优先使用等级卡系统）\r\n+    console.log('💎 检查积分...')\r\n+    const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n+    if (!pointsStatus.canGenerate) {\r\n+      throw new Error(`积分不足！当前积分: ${pointsStatus.current}，需要: ${pointsStatus.generationCost}`)\r\n     }\r\n \r\n     console.log('📋 流程：第一步上传图片 → 第二步提交工作流')\r\n \r\n"
                },
                {
                    "date": 1752334262188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -534,12 +534,12 @@\n     console.log('📥 获取生成的图片...')\r\n     const resultImage = await getGeneratedImage(taskResult)\r\n     console.log('🎉 换衣处理完全成功！')\r\n \r\n-    // 消耗体验点\r\n-    console.log('💎 消耗体验点...')\r\n-    const pointsResult = pointsManager.consumePoints()\r\n-    console.log(`✅ 已消耗 ${pointsResult.consumed} 体验点，剩余: ${pointsResult.remaining}`)\r\n+    // 消耗积分（从等级卡扣除）\r\n+    console.log('💎 消耗积分...')\r\n+    const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', resultImage)\r\n+    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     // 获取节点49的原图用于对比\r\n     let originalImage = null\r\n     try {\r\n"
                },
                {
                    "date": 1752334280632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -715,12 +715,12 @@\n \r\n     const imageUrl = await getGeneratedImage(taskResult)\r\n     console.log('🖼️ 成功获取换脸结果图片URL')\r\n \r\n-    // 消耗体验点\r\n-    console.log('💎 消耗体验点...')\r\n-    const pointsResult = pointsManager.consumePoints()\r\n-    console.log(`✅ 已消耗 ${pointsResult.consumed} 体验点，剩余: ${pointsResult.remaining}`)\r\n+    // 消耗积分（从等级卡扣除）\r\n+    console.log('💎 消耗积分...')\r\n+    const pointsResult = await levelCardPointsManager.consumePoints(20, '极速换脸', imageUrl)\r\n+    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     if (onProgress) onProgress('换脸完成！', 100)\r\n \r\n     console.log('✅ 换脸处理完成')\r\n"
                },
                {
                    "date": 1752334511810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -607,13 +607,13 @@\n async function processFaceSwapImage({ facePhotos, targetImage, onProgress }) {\r\n   try {\r\n     console.log('🚀 开始换脸处理')\r\n \r\n-    // 检查体验点\r\n-    console.log('💎 检查体验点...')\r\n-    if (!pointsManager.hasEnoughPoints()) {\r\n-      const status = pointsManager.getPointsStatus()\r\n-      throw new Error(`体验点不足！当前点数: ${status.current}，需要: ${status.generationCost}`)\r\n+    // 检查积分（优先使用等级卡系统）\r\n+    console.log('💎 检查积分...')\r\n+    const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n+    if (!pointsStatus.canGenerate) {\r\n+      throw new Error(`积分不足！当前积分: ${pointsStatus.current}，需要: ${pointsStatus.generationCost}`)\r\n     }\r\n \r\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n \r\n"
                },
                {
                    "date": 1752335446876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,9 +536,11 @@\n     console.log('🎉 换衣处理完全成功！')\r\n \r\n     // 消耗积分（从等级卡扣除）\r\n     console.log('💎 消耗积分...')\r\n-    const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', resultImage)\r\n+    // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n+    const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n+    const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n     console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     // 获取节点49的原图用于对比\r\n     let originalImage = null\r\n"
                },
                {
                    "date": 1752335464632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -719,9 +719,11 @@\n     console.log('🖼️ 成功获取换脸结果图片URL')\r\n \r\n     // 消耗积分（从等级卡扣除）\r\n     console.log('💎 消耗积分...')\r\n-    const pointsResult = await levelCardPointsManager.consumePoints(20, '极速换脸', imageUrl)\r\n+    // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n+    const imageViewUrl = getComfyUIImageUrl(imageUrl)\r\n+    const pointsResult = await levelCardPointsManager.consumePoints(20, '极速换脸', imageViewUrl)\r\n     console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     if (onProgress) onProgress('换脸完成！', 100)\r\n \r\n"
                },
                {
                    "date": 1752335491803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,47 @@\n     }\r\n   })\r\n }\r\n \r\n+// 获取 ComfyUI 图片访问URL\r\n+function getComfyUIImageUrl(imageData) {\r\n+  try {\r\n+    // 如果已经是 ComfyUI 的 URL 格式，直接返回\r\n+    if (typeof imageData === 'string' && imageData.includes('/view?')) {\r\n+      console.log('🔗 已是 ComfyUI URL 格式:', imageData)\r\n+      return imageData\r\n+    }\r\n+\r\n+    // 如果是 base64 数据，尝试从全局变量或缓存中获取对应的 ComfyUI URL\r\n+    if (typeof imageData === 'string' && imageData.startsWith('data:image/')) {\r\n+      console.log('📸 检测到 base64 图片数据，尝试获取 ComfyUI URL...')\r\n+\r\n+      // 检查是否有存储的 ComfyUI URL（在生成过程中可能已经保存）\r\n+      if (window.lastComfyUIImageUrl) {\r\n+        console.log('🔗 使用缓存的 ComfyUI URL:', window.lastComfyUIImageUrl)\r\n+        return window.lastComfyUIImageUrl\r\n+      }\r\n+\r\n+      // 如果没有缓存的URL，返回一个占位符或者 null\r\n+      console.warn('⚠️ 无法获取 ComfyUI URL，使用占位符')\r\n+      return null\r\n+    }\r\n+\r\n+    // 其他情况，尝试转换为字符串\r\n+    const urlString = String(imageData)\r\n+    if (urlString.includes('/view?')) {\r\n+      return urlString\r\n+    }\r\n+\r\n+    console.warn('⚠️ 无法识别的图片数据格式:', typeof imageData)\r\n+    return null\r\n+\r\n+  } catch (error) {\r\n+    console.error('❌ 获取 ComfyUI 图片URL失败:', error)\r\n+    return null\r\n+  }\r\n+}\r\n+\r\n // 更新配置\r\n async function updateComfyUIConfig(newConfig) {\r\n   const currentConfig = getComfyUIConfig(true) // 强制刷新当前配置\r\n   const updatedConfig = { ...currentConfig, ...newConfig }\r\n"
                },
                {
                    "date": 1752411356027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,10 +194,16 @@\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n // 获取API基础URL - 使用负载均衡\r\n-async function getApiBaseUrl() {\r\n+async function getApiBaseUrl(forceReassessment = false) {\r\n   try {\r\n+    // 如果需要强制重新评估，触发负载均衡器重新评估\r\n+    if (forceReassessment) {\r\n+      console.log('🔄 强制重新评估服务器...')\r\n+      await loadBalancer.forceReassessment()\r\n+    }\r\n+\r\n     // 使用负载均衡器选择最优服务器\r\n     const optimalServer = await loadBalancer.getOptimalServer()\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n@@ -486,8 +492,12 @@\n     const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n \r\n     console.log('🌐 获取图片URL:', imageUrl)\r\n \r\n+    // 保存 ComfyUI 原始URL到全局变量，供积分扣除时使用\r\n+    window.lastComfyUIImageUrl = imageUrl\r\n+    console.log('💾 保存 ComfyUI 图片URL 供积分记录使用:', imageUrl)\r\n+\r\n     // 获取图片数据并转换为base64\r\n     const imageResponse = await fetch(imageUrl)\r\n     if (!imageResponse.ok) {\r\n       throw new Error(`图片获取失败: ${imageResponse.status}`)\r\n"
                },
                {
                    "date": 1752411374142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,8 +308,16 @@\n     return result.name\r\n \r\n   } catch (error) {\r\n     console.error('❌ 图片上传失败:', error)\r\n+\r\n+    // 如果是网络错误或服务器错误，记录失败并可能触发重新评估\r\n+    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n+      const currentServer = await getApiBaseUrl()\r\n+      console.log('📝 记录服务器上传失败:', currentServer)\r\n+      await loadBalancer.recordFailure(currentServer)\r\n+    }\r\n+\r\n     throw new Error(`图片上传失败: ${error.message}`)\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752411390149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -436,8 +436,16 @@\n     return result[promptId] || null\r\n \r\n   } catch (error) {\r\n     console.error('状态查询失败:', error)\r\n+\r\n+    // 如果是网络错误或服务器错误，记录失败\r\n+    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n+      const currentServer = await getApiBaseUrl()\r\n+      console.log('📝 记录服务器状态查询失败:', currentServer)\r\n+      await loadBalancer.recordFailure(currentServer)\r\n+    }\r\n+\r\n     throw new Error(`状态查询失败: ${error.message}`)\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752411410623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -560,8 +560,17 @@\n async function processUndressImage(base64Image) {\r\n   try {\r\n     console.log('🚀 开始处理换衣请求...')\r\n \r\n+    // 预检查服务器状态\r\n+    console.log('🔍 预检查服务器状态...')\r\n+    const serverStatus = await checkComfyUIServerStatus()\r\n+    if (serverStatus.status === 'error') {\r\n+      console.warn('⚠️ 当前服务器状态异常，触发重新评估...')\r\n+      // 强制重新评估服务器\r\n+      await getApiBaseUrl(true)\r\n+    }\r\n+\r\n     // 检查积分（优先使用等级卡系统）\r\n     console.log('💎 检查积分...')\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n"
                },
                {
                    "date": 1752424351055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,14 +608,20 @@\n     console.log('📥 获取生成的图片...')\r\n     const resultImage = await getGeneratedImage(taskResult)\r\n     console.log('🎉 换衣处理完全成功！')\r\n \r\n-    // 消耗积分（从等级卡扣除）\r\n-    console.log('💎 消耗积分...')\r\n-    // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n-    const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n-    const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n-    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n+    // 消耗积分（从等级卡扣除）- 不影响主要功能\r\n+    let pointsResult = { consumed: 0, remaining: 0 }\r\n+    try {\r\n+      console.log('💎 消耗积分...')\r\n+      // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n+      const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n+      pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n+      console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n+    } catch (pointsError) {\r\n+      console.warn('⚠️ 积分扣除失败，但不影响图片处理结果:', pointsError.message)\r\n+      // 积分扣除失败不影响主要功能，继续返回处理结果\r\n+    }\r\n \r\n     // 获取节点49的原图用于对比\r\n     let originalImage = null\r\n     try {\r\n"
                },
                {
                    "date": 1752424930329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -608,20 +608,14 @@\n     console.log('📥 获取生成的图片...')\r\n     const resultImage = await getGeneratedImage(taskResult)\r\n     console.log('🎉 换衣处理完全成功！')\r\n \r\n-    // 消耗积分（从等级卡扣除）- 不影响主要功能\r\n-    let pointsResult = { consumed: 0, remaining: 0 }\r\n-    try {\r\n-      console.log('💎 消耗积分...')\r\n-      // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n-      const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n-      pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n-      console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n-    } catch (pointsError) {\r\n-      console.warn('⚠️ 积分扣除失败，但不影响图片处理结果:', pointsError.message)\r\n-      // 积分扣除失败不影响主要功能，继续返回处理结果\r\n-    }\r\n+    // 消耗积分（从等级卡扣除）\r\n+    console.log('💎 消耗积分...')\r\n+    // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n+    const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n+    const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n+    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     // 获取节点49的原图用于对比\r\n     let originalImage = null\r\n     try {\r\n"
                },
                {
                    "date": 1752433200356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,16 @@\n     // 如果是网络错误或服务器错误，记录失败并可能触发重新评估\r\n     if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n       const currentServer = await getApiBaseUrl()\r\n       console.log('📝 记录服务器上传失败:', currentServer)\r\n-      await loadBalancer.recordFailure(currentServer)\r\n+\r\n+      // 确定错误类型\r\n+      let errorType = 'upload_error'\r\n+      if (error.message.includes('timeout')) errorType = 'timeout'\r\n+      else if (error.message.includes('network')) errorType = 'network'\r\n+      else if (error.message.includes('fetch')) errorType = 'connection'\r\n+\r\n+      await loadBalancer.recordFailure(currentServer, errorType)\r\n     }\r\n \r\n     throw new Error(`图片上传失败: ${error.message}`)\r\n   }\r\n"
                },
                {
                    "date": 1752433216313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,9 +419,17 @@\n \r\n     // 记录服务器失败\r\n     if (selectedServer) {\r\n       console.log('📝 记录服务器失败:', selectedServer)\r\n-      await loadBalancer.recordFailure(selectedServer)\r\n+\r\n+      // 确定错误类型\r\n+      let errorType = 'workflow_error'\r\n+      if (error.message.includes('timeout')) errorType = 'timeout'\r\n+      else if (error.message.includes('network')) errorType = 'network'\r\n+      else if (error.message.includes('fetch')) errorType = 'connection'\r\n+      else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) errorType = 'server_error'\r\n+\r\n+      await loadBalancer.recordFailure(selectedServer, errorType)\r\n     }\r\n \r\n     throw new Error(`工作流提交失败: ${error.message}`)\r\n   }\r\n"
                },
                {
                    "date": 1752433232169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,9 +456,16 @@\n     // 如果是网络错误或服务器错误，记录失败\r\n     if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n       const currentServer = await getApiBaseUrl()\r\n       console.log('📝 记录服务器状态查询失败:', currentServer)\r\n-      await loadBalancer.recordFailure(currentServer)\r\n+\r\n+      // 确定错误类型\r\n+      let errorType = 'status_check_error'\r\n+      if (error.message.includes('timeout')) errorType = 'timeout'\r\n+      else if (error.message.includes('network')) errorType = 'network'\r\n+      else if (error.message.includes('fetch')) errorType = 'connection'\r\n+\r\n+      await loadBalancer.recordFailure(currentServer, errorType)\r\n     }\r\n \r\n     throw new Error(`状态查询失败: ${error.message}`)\r\n   }\r\n"
                },
                {
                    "date": 1752433338914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,18 +194,25 @@\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n // 获取API基础URL - 使用负载均衡\r\n-async function getApiBaseUrl(forceReassessment = false) {\r\n+async function getApiBaseUrl(forceReassessment = false, excludeUrls = []) {\r\n   try {\r\n     // 如果需要强制重新评估，触发负载均衡器重新评估\r\n     if (forceReassessment) {\r\n       console.log('🔄 强制重新评估服务器...')\r\n       await loadBalancer.forceReassessment()\r\n     }\r\n \r\n     // 使用负载均衡器选择最优服务器\r\n-    const optimalServer = await loadBalancer.getOptimalServer()\r\n+    let optimalServer\r\n+    if (excludeUrls.length > 0) {\r\n+      console.log('🔄 获取下一个可用服务器，排除:', excludeUrls)\r\n+      optimalServer = await loadBalancer.getNextAvailableServer(excludeUrls)\r\n+    } else {\r\n+      optimalServer = await loadBalancer.getOptimalServer()\r\n+    }\r\n+\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n@@ -228,8 +235,54 @@\n     return baseUrl\r\n   }\r\n }\r\n \r\n+// 带重试的API调用包装器\r\n+async function callWithRetry(apiCall, maxRetries = 2, excludeUrls = []) {\r\n+  let lastError = null\r\n+\r\n+  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n+    try {\r\n+      const result = await apiCall()\r\n+      return result\r\n+    } catch (error) {\r\n+      lastError = error\r\n+      console.warn(`⚠️ API调用失败 (尝试 ${attempt + 1}/${maxRetries + 1}):`, error.message)\r\n+\r\n+      // 如果不是最后一次尝试，且是网络相关错误，尝试下一个服务器\r\n+      if (attempt < maxRetries &&\r\n+          (error.message.includes('fetch') ||\r\n+           error.message.includes('network') ||\r\n+           error.message.includes('timeout') ||\r\n+           error.message.includes('500') ||\r\n+           error.message.includes('502') ||\r\n+           error.message.includes('503'))) {\r\n+\r\n+        // 获取当前失败的服务器URL\r\n+        const currentServer = await getApiBaseUrl()\r\n+        if (currentServer) {\r\n+          excludeUrls.push(currentServer)\r\n+          console.log(`🔄 添加失败服务器到排除列表: ${currentServer}`)\r\n+\r\n+          // 记录失败\r\n+          let errorType = 'api_error'\r\n+          if (error.message.includes('timeout')) errorType = 'timeout'\r\n+          else if (error.message.includes('network')) errorType = 'network'\r\n+          else if (error.message.includes('fetch')) errorType = 'connection'\r\n+          else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) errorType = 'server_error'\r\n+\r\n+          await loadBalancer.recordFailure(currentServer, errorType)\r\n+        }\r\n+\r\n+        // 等待一段时间再重试\r\n+        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  throw lastError\r\n+}\r\n+\r\n // 重置为默认配置\r\n function resetToDefaultConfig() {\r\n   localStorage.removeItem('comfyui_config')\r\n   return { ...DEFAULT_CONFIG }\r\n"
                },
                {
                    "date": 1752462837261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -607,29 +607,269 @@\n     throw new Error(`图片获取失败: ${error.message}`)\r\n   }\r\n }\r\n \r\n-// 等待任务完成\r\n+// WebSocket 连接管理\r\n+let wsConnection = null\r\n+let wsReconnectTimer = null\r\n+let isWsConnected = false\r\n+let wsMessageHandlers = new Map()\r\n+let pendingTasks = new Map()\r\n+\r\n+// 初始化 WebSocket 连接\r\n+async function initializeWebSocket() {\r\n+  try {\r\n+    if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n+      console.log('WebSocket 已连接，无需重新初始化')\r\n+      return true\r\n+    }\r\n+\r\n+    const config = getComfyUIConfig()\r\n+    const baseUrl = await getApiBaseUrl()\r\n+    const wsUrl = baseUrl.replace(/^http/, 'ws') + '/ws?clientId=' + config.CLIENT_ID\r\n+\r\n+    console.log(`🔌 连接 ComfyUI WebSocket: ${wsUrl}`)\r\n+\r\n+    wsConnection = new WebSocket(wsUrl)\r\n+\r\n+    return new Promise((resolve, reject) => {\r\n+      const timeout = setTimeout(() => {\r\n+        reject(new Error('WebSocket 连接超时'))\r\n+      }, 10000)\r\n+\r\n+      wsConnection.onopen = () => {\r\n+        console.log('✅ ComfyUI WebSocket 连接成功')\r\n+        isWsConnected = true\r\n+        clearTimeout(timeout)\r\n+        clearTimeout(wsReconnectTimer)\r\n+        resolve(true)\r\n+      }\r\n+\r\n+      wsConnection.onclose = (event) => {\r\n+        console.log(`❌ ComfyUI WebSocket 连接关闭: ${event.code} ${event.reason}`)\r\n+        isWsConnected = false\r\n+        clearTimeout(timeout)\r\n+\r\n+        // 尝试重新连接\r\n+        if (!wsReconnectTimer) {\r\n+          wsReconnectTimer = setTimeout(() => {\r\n+            wsReconnectTimer = null\r\n+            console.log('🔄 尝试重新连接 ComfyUI WebSocket...')\r\n+            initializeWebSocket().catch(error => {\r\n+              console.error('❌ WebSocket 重连失败:', error)\r\n+            })\r\n+          }, 5000)\r\n+        }\r\n+      }\r\n+\r\n+      wsConnection.onerror = (error) => {\r\n+        console.error('❌ ComfyUI WebSocket 错误:', error)\r\n+        clearTimeout(timeout)\r\n+        reject(error)\r\n+      }\r\n+\r\n+      wsConnection.onmessage = (event) => {\r\n+        try {\r\n+          const message = JSON.parse(event.data)\r\n+          handleWebSocketMessage(message)\r\n+        } catch (error) {\r\n+          console.error('❌ 解析 WebSocket 消息失败:', error, event.data)\r\n+        }\r\n+      }\r\n+    })\r\n+  } catch (error) {\r\n+    console.error('❌ 初始化 WebSocket 失败:', error)\r\n+    throw error\r\n+  }\r\n+}\r\n+\r\n+// 处理 WebSocket 消息\r\n+function handleWebSocketMessage(message) {\r\n+  try {\r\n+    const { type, data } = message\r\n+\r\n+    console.log(`📨 收到 WebSocket 消息: ${type}`, data)\r\n+\r\n+    switch (type) {\r\n+      case 'status':\r\n+        handleStatusMessage(data)\r\n+        break\r\n+      case 'progress':\r\n+        handleProgressMessage(data)\r\n+        break\r\n+      case 'executed':\r\n+        handleExecutedMessage(data)\r\n+        break\r\n+      case 'execution_error':\r\n+        handleExecutionErrorMessage(data)\r\n+        break\r\n+      case 'executing':\r\n+        handleExecutingMessage(data)\r\n+        break\r\n+      default:\r\n+        console.log(`🔍 未处理的消息类型: ${type}`, data)\r\n+    }\r\n+\r\n+    // 触发注册的消息处理器\r\n+    if (wsMessageHandlers.has(type)) {\r\n+      wsMessageHandlers.get(type).forEach(handler => {\r\n+        try {\r\n+          handler(data)\r\n+        } catch (error) {\r\n+          console.error(`❌ 处理 ${type} 消息时出错:`, error)\r\n+        }\r\n+      })\r\n+    }\r\n+  } catch (error) {\r\n+    console.error('❌ 处理 WebSocket 消息失败:', error)\r\n+  }\r\n+}\r\n+\r\n+// 处理状态消息\r\n+function handleStatusMessage(data) {\r\n+  if (data && data.sid) {\r\n+    console.log(`📊 队列状态更新: 执行中=${data.status?.exec_info?.queue_remaining || 0}`)\r\n+  }\r\n+}\r\n+\r\n+// 处理进度消息\r\n+function handleProgressMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const task = pendingTasks.get(data.prompt_id)\r\n+    if (task && task.onProgress) {\r\n+      const progress = Math.round((data.value / data.max) * 100)\r\n+      console.log(`📈 任务 ${data.prompt_id} 进度: ${progress}%`)\r\n+      task.onProgress(progress, 'processing')\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// 处理执行完成消息\r\n+function handleExecutedMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const task = pendingTasks.get(data.prompt_id)\r\n+    if (task) {\r\n+      console.log(`✅ 任务 ${data.prompt_id} 执行完成`)\r\n+\r\n+      // 获取完整的历史记录\r\n+      checkTaskStatus(data.prompt_id).then(result => {\r\n+        if (task.onComplete) {\r\n+          task.onComplete(result)\r\n+        }\r\n+        pendingTasks.delete(data.prompt_id)\r\n+      }).catch(error => {\r\n+        console.error('❌ 获取任务结果失败:', error)\r\n+        if (task.onError) {\r\n+          task.onError(error.message)\r\n+        }\r\n+        pendingTasks.delete(data.prompt_id)\r\n+      })\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// 处理执行错误消息\r\n+function handleExecutionErrorMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const task = pendingTasks.get(data.prompt_id)\r\n+    if (task) {\r\n+      console.error(`❌ 任务 ${data.prompt_id} 执行失败:`, data)\r\n+      if (task.onError) {\r\n+        task.onError(data.exception_message || data.traceback || '任务执行失败')\r\n+      }\r\n+      pendingTasks.delete(data.prompt_id)\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// 处理正在执行消息\r\n+function handleExecutingMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const task = pendingTasks.get(data.prompt_id)\r\n+    if (task && task.onProgress) {\r\n+      console.log(`🔄 任务 ${data.prompt_id} 正在执行节点: ${data.node}`)\r\n+      task.onProgress(10, 'executing')\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// 等待任务完成 - 使用 WebSocket\r\n async function waitForTaskCompletion(promptId, maxWaitTime = 300000) {\r\n+  console.log(`⏳ 等待任务完成: ${promptId}`)\r\n+\r\n+  // 确保 WebSocket 连接\r\n+  await initializeWebSocket()\r\n+\r\n+  return new Promise((resolve, reject) => {\r\n+    // 设置超时\r\n+    const timeout = setTimeout(() => {\r\n+      pendingTasks.delete(promptId)\r\n+      reject(new Error(`任务 ${promptId} 执行超时`))\r\n+    }, maxWaitTime)\r\n+\r\n+    // 创建任务跟踪对象\r\n+    const task = {\r\n+      id: promptId,\r\n+      onProgress: (progress, status) => {\r\n+        console.log(`📈 任务 ${promptId} 进度: ${progress}% (${status})`)\r\n+      },\r\n+      onComplete: (result) => {\r\n+        clearTimeout(timeout)\r\n+        console.log(`✅ 任务 ${promptId} 完成`)\r\n+        resolve(result)\r\n+      },\r\n+      onError: (error) => {\r\n+        clearTimeout(timeout)\r\n+        console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n+        reject(new Error(error))\r\n+      }\r\n+    }\r\n+\r\n+    // 注册任务\r\n+    pendingTasks.set(promptId, task)\r\n+\r\n+    // 如果 WebSocket 未连接，回退到轮询模式\r\n+    if (!isWsConnected) {\r\n+      console.log('⚠️ WebSocket 未连接，使用轮询模式')\r\n+      fallbackToPolling(promptId, task, timeout)\r\n+    }\r\n+  })\r\n+}\r\n+\r\n+// 回退到轮询模式\r\n+async function fallbackToPolling(promptId, task, timeout) {\r\n+  const pollInterval = 2000\r\n   const startTime = Date.now()\r\n-  const pollInterval = 2000 // 2秒轮询一次\r\n \r\n-  while (Date.now() - startTime < maxWaitTime) {\r\n-    const taskResult = await checkTaskStatus(promptId)\r\n+  const poll = async () => {\r\n+    try {\r\n+      if (Date.now() - startTime > 300000) { // 5分钟超时\r\n+        return\r\n+      }\r\n \r\n-    if (taskResult) {\r\n-      if (taskResult.status && taskResult.status.completed) {\r\n-        return taskResult\r\n-      } else if (taskResult.status && taskResult.status.status_str === 'error') {\r\n-        throw new Error(`任务执行失败: ${JSON.stringify(taskResult.status)}`)\r\n+      const result = await checkTaskStatus(promptId)\r\n+\r\n+      if (result) {\r\n+        if (result.status && result.status.completed) {\r\n+          clearTimeout(timeout)\r\n+          task.onComplete(result)\r\n+          return\r\n+        } else if (result.status && result.status.status_str === 'error') {\r\n+          clearTimeout(timeout)\r\n+          task.onError(`任务执行失败: ${result.status.status_str}`)\r\n+          return\r\n+        }\r\n       }\r\n+\r\n+      // 继续轮询\r\n+      setTimeout(poll, pollInterval)\r\n+    } catch (error) {\r\n+      console.error('❌ 轮询任务状态失败:', error)\r\n+      setTimeout(poll, pollInterval)\r\n     }\r\n-\r\n-    // 等待下次轮询\r\n-    await new Promise(resolve => setTimeout(resolve, pollInterval))\r\n   }\r\n \r\n-  throw new Error('任务执行超时')\r\n+  poll()\r\n }\r\n \r\n // 主要的换衣API函数 - 两步流程\r\n async function processUndressImage(base64Image) {\r\n"
                },
                {
                    "date": 1752462898147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,14 +414,18 @@\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n   let selectedServer = null\r\n   try {\r\n+    // 确保 WebSocket 连接\r\n+    await initializeWebSocket()\r\n+\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n     selectedServer = apiBaseUrl // 记录选择的服务器\r\n     console.log('🔄 第二步：提交工作流到ComfyUI')\r\n     console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n     console.log('🔧 使用负载均衡:', '是')\r\n+    console.log('🔌 WebSocket状态:', isWsConnected ? '已连接' : '未连接')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n"
                },
                {
                    "date": 1752462927197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1150,6 +1150,9 @@\n   getApiBaseUrl,\r\n   addConfigChangeListener,\r\n   removeConfigChangeListener,\r\n   processUndressImage,\r\n-  processFaceSwapImage\r\n+  processFaceSwapImage,\r\n+  initializeWebSocket,\r\n+  wsConnection,\r\n+  isWsConnected\r\n }\r\n"
                },
                {
                    "date": 1752463049368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -795,10 +795,10 @@\n     }\r\n   }\r\n }\r\n \r\n-// 等待任务完成 - 使用 WebSocket\r\n-async function waitForTaskCompletion(promptId, maxWaitTime = 300000) {\r\n+// 等待任务完成 - 使用 WebSocket，支持进度回调\r\n+async function waitForTaskCompletion(promptId, maxWaitTime = 300000, onProgress = null) {\r\n   console.log(`⏳ 等待任务完成: ${promptId}`)\r\n \r\n   // 确保 WebSocket 连接\r\n   await initializeWebSocket()\r\n@@ -814,17 +814,27 @@\n     const task = {\r\n       id: promptId,\r\n       onProgress: (progress, status) => {\r\n         console.log(`📈 任务 ${promptId} 进度: ${progress}% (${status})`)\r\n+        // 调用外部进度回调\r\n+        if (onProgress) {\r\n+          onProgress(`正在处理: ${status}`, progress)\r\n+        }\r\n       },\r\n       onComplete: (result) => {\r\n         clearTimeout(timeout)\r\n         console.log(`✅ 任务 ${promptId} 完成`)\r\n+        if (onProgress) {\r\n+          onProgress('处理完成', 100)\r\n+        }\r\n         resolve(result)\r\n       },\r\n       onError: (error) => {\r\n         clearTimeout(timeout)\r\n         console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n+        if (onProgress) {\r\n+          onProgress('处理失败', 0)\r\n+        }\r\n         reject(new Error(error))\r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752463068283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -929,9 +929,11 @@\n     console.log('✅ 第二步完成，获得任务ID:', promptId)\r\n \r\n     // 等待任务完成\r\n     console.log('⏳ 等待ComfyUI处理任务...')\r\n-    const taskResult = await waitForTaskCompletion(promptId)\r\n+    const taskResult = await waitForTaskCompletion(promptId, 300000, (status, progress) => {\r\n+      console.log(`📊 任务进度: ${status} - ${progress}%`)\r\n+    })\r\n     console.log('✅ 任务处理完成')\r\n \r\n     // 获取生成的图片\r\n     console.log('📥 获取生成的图片...')\r\n"
                },
                {
                    "date": 1752463087783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1109,9 +1109,9 @@\n     // 等待任务完成 - 换脸需要更长时间，设置10分钟超时\r\n     const maxWaitTime = 600000 // 10分钟\r\n     console.log(`⏳ 开始等待换脸任务完成，任务ID: ${promptId}，最大等待时间: ${maxWaitTime/1000}秒`)\r\n \r\n-    const taskResult = await waitForTaskCompletion(promptId, maxWaitTime)\r\n+    const taskResult = await waitForTaskCompletion(promptId, maxWaitTime, onProgress)\r\n     console.log('✅ 换脸任务处理完成，结果:', taskResult)\r\n \r\n     if (onProgress) onProgress('正在获取处理结果...', 95)\r\n \r\n"
                },
                {
                    "date": 1752463551874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,8 +710,16 @@\n         handleExecutingMessage(data)\r\n         break\r\n       default:\r\n         console.log(`🔍 未处理的消息类型: ${type}`, data)\r\n+        // 对于未知消息类型，也尝试处理 prompt_id\r\n+        if (data && data.prompt_id) {\r\n+          console.log(`🔍 检查未知消息类型是否包含任务完成信息: ${type}`)\r\n+          // 可能是任务完成的消息，尝试作为执行完成处理\r\n+          if (type === 'execution_cached' || type === 'execution_success') {\r\n+            handleExecutedMessage(data)\r\n+          }\r\n+        }\r\n     }\r\n \r\n     // 触发注册的消息处理器\r\n     if (wsMessageHandlers.has(type)) {\r\n"
                },
                {
                    "date": 1752463576688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -756,27 +756,48 @@\n }\r\n \r\n // 处理执行完成消息\r\n function handleExecutedMessage(data) {\r\n+  console.log(`🎯 处理执行完成消息:`, data)\r\n+\r\n   if (data && data.prompt_id) {\r\n     const task = pendingTasks.get(data.prompt_id)\r\n     if (task) {\r\n-      console.log(`✅ 任务 ${data.prompt_id} 执行完成`)\r\n+      console.log(`✅ 任务 ${data.prompt_id} 执行完成，开始获取结果`)\r\n \r\n-      // 获取完整的历史记录\r\n-      checkTaskStatus(data.prompt_id).then(result => {\r\n-        if (task.onComplete) {\r\n-          task.onComplete(result)\r\n+      // 延迟一下再获取结果，确保 ComfyUI 已经完全处理完成\r\n+      setTimeout(async () => {\r\n+        try {\r\n+          console.log(`🔍 获取任务 ${data.prompt_id} 的完整历史记录`)\r\n+          const result = await checkTaskStatus(data.prompt_id)\r\n+\r\n+          if (result && result[data.prompt_id]) {\r\n+            console.log(`📋 任务 ${data.prompt_id} 结果:`, result[data.prompt_id])\r\n+\r\n+            if (task.onComplete) {\r\n+              task.onComplete(result[data.prompt_id])\r\n+            }\r\n+          } else {\r\n+            console.warn(`⚠️ 任务 ${data.prompt_id} 结果为空，尝试直接使用 WebSocket 数据`)\r\n+            if (task.onComplete) {\r\n+              task.onComplete(data)\r\n+            }\r\n+          }\r\n+\r\n+          pendingTasks.delete(data.prompt_id)\r\n+        } catch (error) {\r\n+          console.error(`❌ 获取任务 ${data.prompt_id} 结果失败:`, error)\r\n+          if (task.onError) {\r\n+            task.onError(error.message)\r\n+          }\r\n+          pendingTasks.delete(data.prompt_id)\r\n         }\r\n-        pendingTasks.delete(data.prompt_id)\r\n-      }).catch(error => {\r\n-        console.error('❌ 获取任务结果失败:', error)\r\n-        if (task.onError) {\r\n-          task.onError(error.message)\r\n-        }\r\n-        pendingTasks.delete(data.prompt_id)\r\n-      })\r\n+      }, 1000) // 延迟 1 秒\r\n+    } else {\r\n+      console.warn(`⚠️ 收到未跟踪任务的完成消息: ${data.prompt_id}`)\r\n     }\r\n+  } else {\r\n+    console.warn(`⚠️ 执行完成消息缺少 prompt_id:`, data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752463597334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -672,9 +672,11 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n+          console.log(`📨 原始 WebSocket 消息:`, event.data)\r\n           const message = JSON.parse(event.data)\r\n+          console.log(`📨 解析后的 WebSocket 消息:`, message)\r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n           console.error('❌ 解析 WebSocket 消息失败:', error, event.data)\r\n         }\r\n"
                },
                {
                    "date": 1752463614776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -870,13 +870,17 @@\n     }\r\n \r\n     // 注册任务\r\n     pendingTasks.set(promptId, task)\r\n+    console.log(`📝 已注册任务 ${promptId}，当前待处理任务数: ${pendingTasks.size}`)\r\n+    console.log(`🔌 WebSocket 连接状态: ${isWsConnected ? '已连接' : '未连接'}`)\r\n \r\n     // 如果 WebSocket 未连接，回退到轮询模式\r\n     if (!isWsConnected) {\r\n       console.log('⚠️ WebSocket 未连接，使用轮询模式')\r\n       fallbackToPolling(promptId, task, timeout)\r\n+    } else {\r\n+      console.log(`✅ 使用 WebSocket 模式等待任务 ${promptId} 完成`)\r\n     }\r\n   })\r\n }\r\n \r\n"
                },
                {
                    "date": 1752463668612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import pointsManager from '../utils/pointsManager.js'\r\n import levelCardPointsManager from '../utils/levelCardPointsManager.js'\r\n import { updateAPIConfig } from './api.js'\r\n import loadBalancer from './loadBalancer.js'\r\n+import { logWebSocketMessage, logConnectionEvent } from '../utils/websocketDebugger.js'\r\n \r\n // API配置 - 直连模式\r\n const DEFAULT_CONFIG = {\r\n   // ComfyUI服务器URL（用户可配置）\r\n"
                },
                {
                    "date": 1752463688480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,8 +645,9 @@\n         console.log('✅ ComfyUI WebSocket 连接成功')\r\n         isWsConnected = true\r\n         clearTimeout(timeout)\r\n         clearTimeout(wsReconnectTimer)\r\n+        logConnectionEvent('connected', { url: wsUrl })\r\n         resolve(true)\r\n       }\r\n \r\n       wsConnection.onclose = (event) => {\r\n"
                },
                {
                    "date": 1752463711374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -653,16 +653,19 @@\n       wsConnection.onclose = (event) => {\r\n         console.log(`❌ ComfyUI WebSocket 连接关闭: ${event.code} ${event.reason}`)\r\n         isWsConnected = false\r\n         clearTimeout(timeout)\r\n+        logConnectionEvent('disconnected', { code: event.code, reason: event.reason })\r\n \r\n         // 尝试重新连接\r\n         if (!wsReconnectTimer) {\r\n           wsReconnectTimer = setTimeout(() => {\r\n             wsReconnectTimer = null\r\n             console.log('🔄 尝试重新连接 ComfyUI WebSocket...')\r\n+            logConnectionEvent('reconnecting')\r\n             initializeWebSocket().catch(error => {\r\n               console.error('❌ WebSocket 重连失败:', error)\r\n+              logConnectionEvent('reconnect_failed', { error: error.message })\r\n             })\r\n           }, 5000)\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1752463732089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -680,11 +680,16 @@\n         try {\r\n           console.log(`📨 原始 WebSocket 消息:`, event.data)\r\n           const message = JSON.parse(event.data)\r\n           console.log(`📨 解析后的 WebSocket 消息:`, message)\r\n+\r\n+          // 记录消息到调试器\r\n+          logWebSocketMessage(message.type || 'unknown', message.data || message, 'received')\r\n+\r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n           console.error('❌ 解析 WebSocket 消息失败:', error, event.data)\r\n+          logWebSocketMessage('parse_error', { error: error.message, rawData: event.data }, 'error')\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752464153115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n import pointsManager from '../utils/pointsManager.js'\r\n import levelCardPointsManager from '../utils/levelCardPointsManager.js'\r\n import { updateAPIConfig } from './api.js'\r\n import loadBalancer from './loadBalancer.js'\r\n-import { logWebSocketMessage, logConnectionEvent } from '../utils/websocketDebugger.js'\r\n \r\n // API配置 - 直连模式\r\n const DEFAULT_CONFIG = {\r\n   // ComfyUI服务器URL（用户可配置）\r\n@@ -645,27 +644,23 @@\n         console.log('✅ ComfyUI WebSocket 连接成功')\r\n         isWsConnected = true\r\n         clearTimeout(timeout)\r\n         clearTimeout(wsReconnectTimer)\r\n-        logConnectionEvent('connected', { url: wsUrl })\r\n         resolve(true)\r\n       }\r\n \r\n       wsConnection.onclose = (event) => {\r\n         console.log(`❌ ComfyUI WebSocket 连接关闭: ${event.code} ${event.reason}`)\r\n         isWsConnected = false\r\n         clearTimeout(timeout)\r\n-        logConnectionEvent('disconnected', { code: event.code, reason: event.reason })\r\n \r\n         // 尝试重新连接\r\n         if (!wsReconnectTimer) {\r\n           wsReconnectTimer = setTimeout(() => {\r\n             wsReconnectTimer = null\r\n             console.log('🔄 尝试重新连接 ComfyUI WebSocket...')\r\n-            logConnectionEvent('reconnecting')\r\n             initializeWebSocket().catch(error => {\r\n               console.error('❌ WebSocket 重连失败:', error)\r\n-              logConnectionEvent('reconnect_failed', { error: error.message })\r\n             })\r\n           }, 5000)\r\n         }\r\n       }\r\n@@ -677,19 +672,12 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n-          console.log(`📨 原始 WebSocket 消息:`, event.data)\r\n           const message = JSON.parse(event.data)\r\n-          console.log(`📨 解析后的 WebSocket 消息:`, message)\r\n-\r\n-          // 记录消息到调试器\r\n-          logWebSocketMessage(message.type || 'unknown', message.data || message, 'received')\r\n-\r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n           console.error('❌ 解析 WebSocket 消息失败:', error, event.data)\r\n-          logWebSocketMessage('parse_error', { error: error.message, rawData: event.data }, 'error')\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n@@ -722,16 +710,8 @@\n         handleExecutingMessage(data)\r\n         break\r\n       default:\r\n         console.log(`🔍 未处理的消息类型: ${type}`, data)\r\n-        // 对于未知消息类型，也尝试处理 prompt_id\r\n-        if (data && data.prompt_id) {\r\n-          console.log(`🔍 检查未知消息类型是否包含任务完成信息: ${type}`)\r\n-          // 可能是任务完成的消息，尝试作为执行完成处理\r\n-          if (type === 'execution_cached' || type === 'execution_success') {\r\n-            handleExecutedMessage(data)\r\n-          }\r\n-        }\r\n     }\r\n \r\n     // 触发注册的消息处理器\r\n     if (wsMessageHandlers.has(type)) {\r\n@@ -768,48 +748,27 @@\n }\r\n \r\n // 处理执行完成消息\r\n function handleExecutedMessage(data) {\r\n-  console.log(`🎯 处理执行完成消息:`, data)\r\n-\r\n   if (data && data.prompt_id) {\r\n     const task = pendingTasks.get(data.prompt_id)\r\n     if (task) {\r\n-      console.log(`✅ 任务 ${data.prompt_id} 执行完成，开始获取结果`)\r\n+      console.log(`✅ 任务 ${data.prompt_id} 执行完成`)\r\n \r\n-      // 延迟一下再获取结果，确保 ComfyUI 已经完全处理完成\r\n-      setTimeout(async () => {\r\n-        try {\r\n-          console.log(`🔍 获取任务 ${data.prompt_id} 的完整历史记录`)\r\n-          const result = await checkTaskStatus(data.prompt_id)\r\n-\r\n-          if (result && result[data.prompt_id]) {\r\n-            console.log(`📋 任务 ${data.prompt_id} 结果:`, result[data.prompt_id])\r\n-\r\n-            if (task.onComplete) {\r\n-              task.onComplete(result[data.prompt_id])\r\n-            }\r\n-          } else {\r\n-            console.warn(`⚠️ 任务 ${data.prompt_id} 结果为空，尝试直接使用 WebSocket 数据`)\r\n-            if (task.onComplete) {\r\n-              task.onComplete(data)\r\n-            }\r\n-          }\r\n-\r\n-          pendingTasks.delete(data.prompt_id)\r\n-        } catch (error) {\r\n-          console.error(`❌ 获取任务 ${data.prompt_id} 结果失败:`, error)\r\n-          if (task.onError) {\r\n-            task.onError(error.message)\r\n-          }\r\n-          pendingTasks.delete(data.prompt_id)\r\n+      // 获取完整的历史记录\r\n+      checkTaskStatus(data.prompt_id).then(result => {\r\n+        if (task.onComplete) {\r\n+          task.onComplete(result)\r\n         }\r\n-      }, 1000) // 延迟 1 秒\r\n-    } else {\r\n-      console.warn(`⚠️ 收到未跟踪任务的完成消息: ${data.prompt_id}`)\r\n+        pendingTasks.delete(data.prompt_id)\r\n+      }).catch(error => {\r\n+        console.error('❌ 获取任务结果失败:', error)\r\n+        if (task.onError) {\r\n+          task.onError(error.message)\r\n+        }\r\n+        pendingTasks.delete(data.prompt_id)\r\n+      })\r\n     }\r\n-  } else {\r\n-    console.warn(`⚠️ 执行完成消息缺少 prompt_id:`, data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n@@ -880,17 +839,13 @@\n     }\r\n \r\n     // 注册任务\r\n     pendingTasks.set(promptId, task)\r\n-    console.log(`📝 已注册任务 ${promptId}，当前待处理任务数: ${pendingTasks.size}`)\r\n-    console.log(`🔌 WebSocket 连接状态: ${isWsConnected ? '已连接' : '未连接'}`)\r\n \r\n     // 如果 WebSocket 未连接，回退到轮询模式\r\n     if (!isWsConnected) {\r\n       console.log('⚠️ WebSocket 未连接，使用轮询模式')\r\n       fallbackToPolling(promptId, task, timeout)\r\n-    } else {\r\n-      console.log(`✅ 使用 WebSocket 模式等待任务 ${promptId} 完成`)\r\n     }\r\n   })\r\n }\r\n \r\n"
                },
                {
                    "date": 1752464964257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -748,27 +748,43 @@\n }\r\n \r\n // 处理执行完成消息\r\n function handleExecutedMessage(data) {\r\n+  console.log(`📣 收到执行完成消息:`, data)\r\n+\r\n   if (data && data.prompt_id) {\r\n-    const task = pendingTasks.get(data.prompt_id)\r\n+    const promptId = data.prompt_id\r\n+    console.log(`🔍 查找任务: ${promptId}，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+\r\n+    const task = pendingTasks.get(promptId)\r\n     if (task) {\r\n-      console.log(`✅ 任务 ${data.prompt_id} 执行完成`)\r\n+      console.log(`✅ 找到任务 ${promptId}，准备获取结果`)\r\n \r\n       // 获取完整的历史记录\r\n-      checkTaskStatus(data.prompt_id).then(result => {\r\n+      checkTaskStatus(promptId).then(result => {\r\n+        console.log(`📋 获取到任务 ${promptId} 的完整结果:`, result)\r\n+\r\n         if (task.onComplete) {\r\n+          console.log(`🚀 触发任务 ${promptId} 的完成回调`)\r\n           task.onComplete(result)\r\n+        } else {\r\n+          console.warn(`⚠️ 任务 ${promptId} 没有完成回调函数`)\r\n         }\r\n-        pendingTasks.delete(data.prompt_id)\r\n+\r\n+        pendingTasks.delete(promptId)\r\n+        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务:`, pendingTasks.size)\r\n       }).catch(error => {\r\n-        console.error('❌ 获取任务结果失败:', error)\r\n+        console.error(`❌ 获取任务 ${promptId} 结果失败:`, error)\r\n         if (task.onError) {\r\n           task.onError(error.message)\r\n         }\r\n-        pendingTasks.delete(data.prompt_id)\r\n+        pendingTasks.delete(promptId)\r\n       })\r\n+    } else {\r\n+      console.warn(`⚠️ 收到未知任务 ${promptId} 的执行完成消息`)\r\n     }\r\n+  } else {\r\n+    console.warn(`⚠️ 收到无效的执行完成消息:`, data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752465034873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -672,12 +672,30 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n-          const message = JSON.parse(event.data)\r\n+          console.log(`📨 收到WebSocket原始消息:`, event.data.substring(0, 200))\r\n+\r\n+          let message;\r\n+          try {\r\n+            message = JSON.parse(event.data)\r\n+          } catch (parseError) {\r\n+            console.error('❌ WebSocket消息解析失败:', parseError)\r\n+            console.log('原始消息内容:', event.data.substring(0, 500))\r\n+            return\r\n+          }\r\n+\r\n+          console.log(`📨 解析后的WebSocket消息类型: ${message.type}`)\r\n+\r\n+          // 记录关键消息类型的详细内容\r\n+          if (['executed', 'execution_error', 'progress'].includes(message.type)) {\r\n+            console.log(`📋 ${message.type} 消息详情:`, message)\r\n+          }\r\n+\r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n-          console.error('❌ 解析 WebSocket 消息失败:', error, event.data)\r\n+          console.error('❌ 处理WebSocket消息失败:', error)\r\n+          console.log('问题消息内容:', event.data.substring(0, 200))\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752465087389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -829,25 +829,30 @@\n     }\r\n   }\r\n }\r\n \r\n-// 等待任务完成 - 使用 WebSocket，支持进度回调\r\n+// 等待任务完成 - 支持WebSocket和HTTP轮询两种模式\r\n async function waitForTaskCompletion(promptId, maxWaitTime = 300000, onProgress = null) {\r\n   console.log(`⏳ 等待任务完成: ${promptId}`)\r\n \r\n-  // 确保 WebSocket 连接\r\n-  await initializeWebSocket()\r\n+  // 尝试初始化WebSocket连接，但不强制要求成功\r\n+  try {\r\n+    await initializeWebSocket()\r\n+  } catch (error) {\r\n+    console.warn(`⚠️ WebSocket连接初始化失败，将使用HTTP轮询: ${error.message}`)\r\n+  }\r\n \r\n   return new Promise((resolve, reject) => {\r\n     // 设置超时\r\n     const timeout = setTimeout(() => {\r\n+      console.warn(`⏰ 任务 ${promptId} 等待超时`)\r\n       pendingTasks.delete(promptId)\r\n       reject(new Error(`任务 ${promptId} 执行超时`))\r\n     }, maxWaitTime)\r\n \r\n     // 创建任务跟踪对象\r\n     const task = {\r\n-      id: promptId,\r\n+      promptId, // 修复：使用 promptId 而不是 id\r\n       onProgress: (progress, status) => {\r\n         console.log(`📈 任务 ${promptId} 进度: ${progress}% (${status})`)\r\n         // 调用外部进度回调\r\n         if (onProgress) {\r\n@@ -855,9 +860,9 @@\n         }\r\n       },\r\n       onComplete: (result) => {\r\n         clearTimeout(timeout)\r\n-        console.log(`✅ 任务 ${promptId} 完成`)\r\n+        console.log(`✅ 任务 ${promptId} 完成，结果:`, result)\r\n         if (onProgress) {\r\n           onProgress('处理完成', 100)\r\n         }\r\n         resolve(result)\r\n@@ -873,14 +878,18 @@\n     }\r\n \r\n     // 注册任务\r\n     pendingTasks.set(promptId, task)\r\n+    console.log(`📝 已注册任务 ${promptId}，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n \r\n-    // 如果 WebSocket 未连接，回退到轮询模式\r\n-    if (!isWsConnected) {\r\n-      console.log('⚠️ WebSocket 未连接，使用轮询模式')\r\n-      fallbackToPolling(promptId, task, timeout)\r\n+    // 同时使用WebSocket和HTTP轮询，确保至少一种方式能工作\r\n+    if (isWsConnected) {\r\n+      console.log(`🔌 使用WebSocket监听任务 ${promptId} 状态`)\r\n     }\r\n+\r\n+    // 无论WebSocket是否连接，都启动HTTP轮询作为备份\r\n+    console.log(`🔄 启动HTTP轮询作为备份机制`)\r\n+    fallbackToPolling(promptId, task, timeout)\r\n   })\r\n }\r\n \r\n // 回退到轮询模式\r\n"
                },
                {
                    "date": 1752465274612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -622,38 +622,49 @@\n // 初始化 WebSocket 连接\r\n async function initializeWebSocket() {\r\n   try {\r\n     if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n-      console.log('WebSocket 已连接，无需重新初始化')\r\n+      console.log('🎯 WebSocket 已连接，无需重新初始化')\r\n       return true\r\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n     const baseUrl = await getApiBaseUrl()\r\n     const wsUrl = baseUrl.replace(/^http/, 'ws') + '/ws?clientId=' + config.CLIENT_ID\r\n \r\n-    console.log(`🔌 连接 ComfyUI WebSocket: ${wsUrl}`)\r\n+    console.log('🚀🚀🚀 正在初始化 ComfyUI WebSocket 连接 🚀🚀🚀')\r\n+    console.log(`🔗 WebSocket URL: ${wsUrl}`)\r\n+    console.log(`🆔 客户端ID: ${config.CLIENT_ID}`)\r\n \r\n     wsConnection = new WebSocket(wsUrl)\r\n \r\n     return new Promise((resolve, reject) => {\r\n       const timeout = setTimeout(() => {\r\n+        console.error('❌❌❌ WebSocket 连接超时 (10秒) ❌❌❌')\r\n         reject(new Error('WebSocket 连接超时'))\r\n       }, 10000)\r\n \r\n       wsConnection.onopen = () => {\r\n-        console.log('✅ ComfyUI WebSocket 连接成功')\r\n+        console.log('🎉🎉🎉 ComfyUI WebSocket 连接成功建立! 🎉🎉🎉')\r\n+        console.log('📡 实时通信已启用，等待ComfyUI处理结果...')\r\n         isWsConnected = true\r\n         clearTimeout(timeout)\r\n         clearTimeout(wsReconnectTimer)\r\n+\r\n+        // 显示前端通知\r\n+        showWebSocketStatusNotification('WebSocket连接成功', 'success')\r\n+\r\n         resolve(true)\r\n       }\r\n \r\n       wsConnection.onclose = (event) => {\r\n-        console.log(`❌ ComfyUI WebSocket 连接关闭: ${event.code} ${event.reason}`)\r\n+        console.log(`🔌 ComfyUI WebSocket 连接关闭: 代码=${event.code}, 原因=${event.reason}`)\r\n         isWsConnected = false\r\n         clearTimeout(timeout)\r\n \r\n+        // 显示前端通知\r\n+        showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n+\r\n         // 尝试重新连接\r\n         if (!wsReconnectTimer) {\r\n           wsReconnectTimer = setTimeout(() => {\r\n             wsReconnectTimer = null\r\n@@ -665,16 +676,20 @@\n         }\r\n       }\r\n \r\n       wsConnection.onerror = (error) => {\r\n-        console.error('❌ ComfyUI WebSocket 错误:', error)\r\n+        console.error('❌❌❌ ComfyUI WebSocket 连接错误 ❌❌❌', error)\r\n         clearTimeout(timeout)\r\n+\r\n+        // 显示前端通知\r\n+        showWebSocketStatusNotification('WebSocket连接错误', 'error')\r\n+\r\n         reject(error)\r\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n-          console.log(`📨 收到WebSocket原始消息:`, event.data.substring(0, 200))\r\n+          console.log(`📨 收到WebSocket原始消息 (${event.data.length}字符):`, event.data.substring(0, 200))\r\n \r\n           let message;\r\n           try {\r\n             message = JSON.parse(event.data)\r\n@@ -683,13 +698,14 @@\n             console.log('原始消息内容:', event.data.substring(0, 500))\r\n             return\r\n           }\r\n \r\n-          console.log(`📨 解析后的WebSocket消息类型: ${message.type}`)\r\n+          console.log(`📋 WebSocket消息类型: ${message.type}`)\r\n \r\n-          // 记录关键消息类型的详细内容\r\n-          if (['executed', 'execution_error', 'progress'].includes(message.type)) {\r\n-            console.log(`📋 ${message.type} 消息详情:`, message)\r\n+          // 对关键消息类型显示详细信息和明显标记\r\n+          if (['executed', 'execution_error', 'progress', 'executing'].includes(message.type)) {\r\n+            console.log(`🔥🔥🔥 重要消息: ${message.type.toUpperCase()} 🔥🔥🔥`)\r\n+            console.log(`📊 消息详情:`, message)\r\n           }\r\n \r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n@@ -698,9 +714,9 @@\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n-    console.error('❌ 初始化 WebSocket 失败:', error)\r\n+    console.error('❌❌❌ 初始化 WebSocket 失败 ❌❌❌', error)\r\n     throw error\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752465311351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -782,43 +782,73 @@\n }\r\n \r\n // 处理执行完成消息\r\n function handleExecutedMessage(data) {\r\n-  console.log(`📣 收到执行完成消息:`, data)\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log('🎉🎉🎉 ComfyUI 任务执行完成! 🎉🎉🎉')\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log(`📣 执行完成消息详情:`, data)\r\n \r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n-    console.log(`🔍 查找任务: ${promptId}，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+    console.log(`🔍 查找任务: ${promptId}`)\r\n+    console.log(`📋 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n \r\n     const task = pendingTasks.get(promptId)\r\n     if (task) {\r\n-      console.log(`✅ 找到任务 ${promptId}，准备获取结果`)\r\n+      console.log('✅✅✅ 找到对应任务，开始获取处理结果 ✅✅✅')\r\n \r\n+      // 显示前端通知\r\n+      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 处理完成!`, 'success')\r\n+\r\n       // 获取完整的历史记录\r\n       checkTaskStatus(promptId).then(result => {\r\n-        console.log(`📋 获取到任务 ${promptId} 的完整结果:`, result)\r\n+        console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n+        console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n \r\n         if (task.onComplete) {\r\n-          console.log(`🚀 触发任务 ${promptId} 的完成回调`)\r\n+          console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n+          console.log('🎯 即将返回处理结果到前端界面...')\r\n+\r\n+          // 显示成功通知\r\n+          showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n+\r\n           task.onComplete(result)\r\n+\r\n+          console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n         } else {\r\n-          console.warn(`⚠️ 任务 ${promptId} 没有完成回调函数`)\r\n+          console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n         }\r\n \r\n         pendingTasks.delete(promptId)\r\n-        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务:`, pendingTasks.size)\r\n+        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n+\r\n+        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+        console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n+        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+\r\n       }).catch(error => {\r\n-        console.error(`❌ 获取任务 ${promptId} 结果失败:`, error)\r\n+        console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n+        console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n+\r\n+        // 显示错误通知\r\n+        showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n+\r\n         if (task.onError) {\r\n           task.onError(error.message)\r\n         }\r\n         pendingTasks.delete(promptId)\r\n       })\r\n     } else {\r\n+      console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n       console.warn(`⚠️ 收到未知任务 ${promptId} 的执行完成消息`)\r\n+      console.warn('⚠️ 可能的原因: 1) 任务已被清理 2) 任务ID不匹配 3) 重复消息')\r\n+      console.warn(`⚠️ 当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+      console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n     }\r\n   } else {\r\n-    console.warn(`⚠️ 收到无效的执行完成消息:`, data)\r\n+    console.warn('⚠️⚠️⚠️ 收到无效的执行完成消息 ⚠️⚠️⚠️')\r\n+    console.warn('消息内容:', data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752465348669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -875,67 +875,105 @@\n     }\r\n   }\r\n }\r\n \r\n-// 等待任务完成 - 支持WebSocket和HTTP轮询两种模式\r\n+// 等待任务完成 - 专注使用WebSocket机制\r\n async function waitForTaskCompletion(promptId, maxWaitTime = 300000, onProgress = null) {\r\n-  console.log(`⏳ 等待任务完成: ${promptId}`)\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log(`⏳ 开始等待任务完成: ${promptId}`)\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n \r\n-  // 尝试初始化WebSocket连接，但不强制要求成功\r\n+  // 确保WebSocket连接已建立\r\n+  console.log('🔌 确保WebSocket连接已建立...')\r\n   try {\r\n-    await initializeWebSocket()\r\n+    const wsConnected = await initializeWebSocket()\r\n+    if (!wsConnected) {\r\n+      throw new Error('WebSocket连接失败')\r\n+    }\r\n+    console.log('✅ WebSocket连接确认成功')\r\n   } catch (error) {\r\n-    console.warn(`⚠️ WebSocket连接初始化失败，将使用HTTP轮询: ${error.message}`)\r\n+    console.error('❌❌❌ WebSocket连接失败，无法使用实时通信 ❌❌❌', error)\r\n+    throw new Error(`WebSocket连接失败: ${error.message}`)\r\n   }\r\n \r\n   return new Promise((resolve, reject) => {\r\n     // 设置超时\r\n     const timeout = setTimeout(() => {\r\n-      console.warn(`⏰ 任务 ${promptId} 等待超时`)\r\n+      console.warn('⏰⏰⏰ 任务等待超时 ⏰⏰⏰')\r\n+      console.warn(`⏰ 任务 ${promptId} 等待超时 (${maxWaitTime/1000}秒)`)\r\n       pendingTasks.delete(promptId)\r\n+\r\n+      // 显示超时通知\r\n+      showWebSocketStatusNotification('任务处理超时', 'error')\r\n+\r\n       reject(new Error(`任务 ${promptId} 执行超时`))\r\n     }, maxWaitTime)\r\n \r\n     // 创建任务跟踪对象\r\n     const task = {\r\n-      promptId, // 修复：使用 promptId 而不是 id\r\n+      promptId,\r\n       onProgress: (progress, status) => {\r\n         console.log(`📈 任务 ${promptId} 进度: ${progress}% (${status})`)\r\n         // 调用外部进度回调\r\n         if (onProgress) {\r\n           onProgress(`正在处理: ${status}`, progress)\r\n         }\r\n+\r\n+        // 显示进度通知\r\n+        showWebSocketStatusNotification(`处理进度: ${progress}%`, 'info')\r\n       },\r\n       onComplete: (result) => {\r\n         clearTimeout(timeout)\r\n+        console.log('🎉🎉🎉 任务完成回调被触发 🎉🎉🎉')\r\n         console.log(`✅ 任务 ${promptId} 完成，结果:`, result)\r\n+\r\n         if (onProgress) {\r\n           onProgress('处理完成', 100)\r\n         }\r\n+\r\n+        console.log('🚀 正在返回处理结果...')\r\n         resolve(result)\r\n       },\r\n       onError: (error) => {\r\n         clearTimeout(timeout)\r\n+        console.error('❌❌❌ 任务错误回调被触发 ❌❌❌')\r\n         console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n+\r\n         if (onProgress) {\r\n           onProgress('处理失败', 0)\r\n         }\r\n+\r\n+        // 显示错误通知\r\n+        showWebSocketStatusNotification('任务处理失败', 'error')\r\n+\r\n         reject(new Error(error))\r\n       }\r\n     }\r\n \r\n-    // 注册任务\r\n+    // 注册任务到待处理列表\r\n     pendingTasks.set(promptId, task)\r\n-    console.log(`📝 已注册任务 ${promptId}，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+    console.log('📝📝📝 任务已注册到WebSocket监听列表 📝📝📝')\r\n+    console.log(`📝 任务ID: ${promptId}`)\r\n+    console.log(`📝 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n+    console.log(`📝 任务总数: ${pendingTasks.size}`)\r\n \r\n-    // 同时使用WebSocket和HTTP轮询，确保至少一种方式能工作\r\n-    if (isWsConnected) {\r\n-      console.log(`🔌 使用WebSocket监听任务 ${promptId} 状态`)\r\n+    // 确认WebSocket连接状态\r\n+    if (isWsConnected && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n+      console.log('🔌🔌🔌 WebSocket连接状态良好，等待ComfyUI推送结果 🔌🔌🔌')\r\n+      console.log('📡 实时通信已启用，无需轮询')\r\n+\r\n+      // 显示等待通知\r\n+      showWebSocketStatusNotification(`正在等待任务 ${promptId.substring(0, 8)} 完成...`, 'info')\r\n+    } else {\r\n+      console.error('❌❌❌ WebSocket连接状态异常 ❌❌❌')\r\n+      console.error('连接状态:', wsConnection ? wsConnection.readyState : 'null')\r\n+      console.error('连接标志:', isWsConnected)\r\n+\r\n+      // 清理任务并拒绝\r\n+      pendingTasks.delete(promptId)\r\n+      clearTimeout(timeout)\r\n+      reject(new Error('WebSocket连接状态异常，无法监听任务完成'))\r\n     }\r\n-\r\n-    // 无论WebSocket是否连接，都启动HTTP轮询作为备份\r\n-    console.log(`🔄 启动HTTP轮询作为备份机制`)\r\n-    fallbackToPolling(promptId, task, timeout)\r\n   })\r\n }\r\n \r\n // 回退到轮询模式\r\n"
                },
                {
                    "date": 1752465368747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -618,8 +618,41 @@\n let isWsConnected = false\r\n let wsMessageHandlers = new Map()\r\n let pendingTasks = new Map()\r\n \r\n+// 前端通知函数\r\n+function showWebSocketStatusNotification(message, type = 'info') {\r\n+  try {\r\n+    // 在控制台显示明显标记\r\n+    const timestamp = new Date().toLocaleTimeString()\r\n+    const typeEmoji = {\r\n+      'success': '✅',\r\n+      'error': '❌',\r\n+      'warning': '⚠️',\r\n+      'info': 'ℹ️'\r\n+    }\r\n+\r\n+    console.log(`${typeEmoji[type] || 'ℹ️'} [${timestamp}] ${message}`)\r\n+\r\n+    // 尝试显示浏览器通知（如果用户允许）\r\n+    if ('Notification' in window && Notification.permission === 'granted') {\r\n+      new Notification('ComfyUI 处理状态', {\r\n+        body: message,\r\n+        icon: '/favicon.ico'\r\n+      })\r\n+    }\r\n+\r\n+    // 尝试触发自定义事件，供Vue组件监听\r\n+    if (typeof window !== 'undefined') {\r\n+      window.dispatchEvent(new CustomEvent('comfyui-status', {\r\n+        detail: { message, type, timestamp }\r\n+      }))\r\n+    }\r\n+  } catch (error) {\r\n+    console.warn('显示通知失败:', error)\r\n+  }\r\n+}\r\n+\r\n // 初始化 WebSocket 连接\r\n async function initializeWebSocket() {\r\n   try {\r\n     if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n"
                },
                {
                    "date": 1752465450711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -804,14 +804,26 @@\n \r\n // 处理进度消息\r\n function handleProgressMessage(data) {\r\n   if (data && data.prompt_id) {\r\n-    const task = pendingTasks.get(data.prompt_id)\r\n+    const promptId = data.prompt_id\r\n+    const task = pendingTasks.get(promptId)\r\n+\r\n     if (task && task.onProgress) {\r\n       const progress = Math.round((data.value / data.max) * 100)\r\n-      console.log(`📈 任务 ${data.prompt_id} 进度: ${progress}%`)\r\n+      console.log('📈📈📈 ComfyUI 处理进度更新 📈📈📈')\r\n+      console.log(`📈 任务 ${promptId} 进度: ${progress}% (${data.value}/${data.max})`)\r\n+      console.log(`🔄 当前处理节点: ${data.node || '未知'}`)\r\n+\r\n+      // 显示进度通知\r\n+      showWebSocketStatusNotification(`处理进度: ${progress}%`, 'info')\r\n+\r\n       task.onProgress(progress, 'processing')\r\n+    } else {\r\n+      console.log(`📈 收到任务 ${promptId} 的进度消息，但未找到对应任务`)\r\n     }\r\n+  } else {\r\n+    console.warn('⚠️ 收到无效的进度消息:', data)\r\n   }\r\n }\r\n \r\n // 处理执行完成消息\r\n"
                },
                {
                    "date": 1752465466726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -912,13 +912,24 @@\n \r\n // 处理正在执行消息\r\n function handleExecutingMessage(data) {\r\n   if (data && data.prompt_id) {\r\n-    const task = pendingTasks.get(data.prompt_id)\r\n+    const promptId = data.prompt_id\r\n+    const task = pendingTasks.get(promptId)\r\n+\r\n     if (task && task.onProgress) {\r\n-      console.log(`🔄 任务 ${data.prompt_id} 正在执行节点: ${data.node}`)\r\n+      console.log('🔄🔄🔄 ComfyUI 开始执行任务 🔄🔄🔄')\r\n+      console.log(`🔄 任务 ${promptId} 正在执行节点: ${data.node || '未知'}`)\r\n+\r\n+      // 显示执行通知\r\n+      showWebSocketStatusNotification(`正在执行节点: ${data.node || '未知'}`, 'info')\r\n+\r\n       task.onProgress(10, 'executing')\r\n+    } else {\r\n+      console.log(`🔄 收到任务 ${promptId} 的执行消息，但未找到对应任务`)\r\n     }\r\n+  } else {\r\n+    console.warn('⚠️ 收到无效的执行消息:', data)\r\n   }\r\n }\r\n \r\n // 等待任务完成 - 专注使用WebSocket机制\r\n"
                },
                {
                    "date": 1752465482290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1031,44 +1031,11 @@\n     }\r\n   })\r\n }\r\n \r\n-// 回退到轮询模式\r\n-async function fallbackToPolling(promptId, task, timeout) {\r\n-  const pollInterval = 2000\r\n-  const startTime = Date.now()\r\n+// HTTP轮询备份机制已移除，专注使用WebSocket实时通信\r\n+// 如果需要手动检查任务状态，请使用 checkTaskStatus(promptId) 函数\r\n \r\n-  const poll = async () => {\r\n-    try {\r\n-      if (Date.now() - startTime > 300000) { // 5分钟超时\r\n-        return\r\n-      }\r\n-\r\n-      const result = await checkTaskStatus(promptId)\r\n-\r\n-      if (result) {\r\n-        if (result.status && result.status.completed) {\r\n-          clearTimeout(timeout)\r\n-          task.onComplete(result)\r\n-          return\r\n-        } else if (result.status && result.status.status_str === 'error') {\r\n-          clearTimeout(timeout)\r\n-          task.onError(`任务执行失败: ${result.status.status_str}`)\r\n-          return\r\n-        }\r\n-      }\r\n-\r\n-      // 继续轮询\r\n-      setTimeout(poll, pollInterval)\r\n-    } catch (error) {\r\n-      console.error('❌ 轮询任务状态失败:', error)\r\n-      setTimeout(poll, pollInterval)\r\n-    }\r\n-  }\r\n-\r\n-  poll()\r\n-}\r\n-\r\n // 主要的换衣API函数 - 两步流程\r\n async function processUndressImage(base64Image) {\r\n   try {\r\n     console.log('🚀 开始处理换衣请求...')\r\n"
                },
                {
                    "date": 1752465705528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1035,14 +1035,17 @@\n // HTTP轮询备份机制已移除，专注使用WebSocket实时通信\r\n // 如果需要手动检查任务状态，请使用 checkTaskStatus(promptId) 函数\r\n \r\n // 主要的换衣API函数 - 两步流程\r\n-async function processUndressImage(base64Image) {\r\n+async function processUndressImage(base64Image, onProgress = null) {\r\n   try {\r\n-    console.log('🚀 开始处理换衣请求...')\r\n+    console.log('🚀🚀🚀 开始处理换衣请求 🚀🚀🚀')\r\n+    console.log('📱 前端进度回调函数:', onProgress ? '已提供' : '未提供')\r\n \r\n     // 预检查服务器状态\r\n     console.log('🔍 预检查服务器状态...')\r\n+    if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n+\r\n     const serverStatus = await checkComfyUIServerStatus()\r\n     if (serverStatus.status === 'error') {\r\n       console.warn('⚠️ 当前服务器状态异常，触发重新评估...')\r\n       // 强制重新评估服务器\r\n@@ -1050,8 +1053,10 @@\n     }\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n     console.log('💎 检查积分...')\r\n+    if (onProgress) onProgress('正在检查积分...', 10)\r\n+\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n       throw new Error(`积分不足！当前积分: ${pointsStatus.current}，需要: ${pointsStatus.generationCost}`)\r\n     }\r\n@@ -1059,32 +1064,51 @@\n     console.log('📋 流程：第一步上传图片 → 第二步提交工作流')\r\n \r\n     // 验证图片数据格式\r\n     console.log('🔍 验证图片数据格式...')\r\n+    if (onProgress) onProgress('正在验证图片格式...', 15)\r\n+\r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的图片数据格式')\r\n     }\r\n \r\n     // 第一步：上传图片到ComfyUI服务器\r\n     console.log('📤 第一步：上传图片到 /api/upload/image')\r\n+    if (onProgress) onProgress('正在上传图片到ComfyUI...', 20)\r\n+\r\n     const uploadedImageName = await uploadImageToComfyUI(base64Image)\r\n     console.log('✅ 第一步完成，获得文件名:', uploadedImageName)\r\n \r\n     // 创建工作流提示词，将上传的图片关联到节点49\r\n     console.log('🔧 配置工作流，关联图片到节点49...')\r\n+    if (onProgress) onProgress('正在配置工作流...', 30)\r\n+\r\n     const workflowPrompt = createUndressWorkflowPrompt(uploadedImageName)\r\n \r\n     // 第二步：提交工作流\r\n     console.log('🚀 第二步：提交工作流到 /api/prompt')\r\n+    if (onProgress) onProgress('正在提交工作流到ComfyUI...', 40)\r\n+\r\n     const promptId = await submitWorkflow(workflowPrompt)\r\n     console.log('✅ 第二步完成，获得任务ID:', promptId)\r\n \r\n-    // 等待任务完成\r\n+    // 等待任务完成 - 传递前端进度回调\r\n     console.log('⏳ 等待ComfyUI处理任务...')\r\n+    if (onProgress) onProgress('正在等待ComfyUI处理...', 50)\r\n+\r\n     const taskResult = await waitForTaskCompletion(promptId, 300000, (status, progress) => {\r\n-      console.log(`📊 任务进度: ${status} - ${progress}%`)\r\n+      console.log(`📊📊📊 WebSocket进度更新 📊📊📊`)\r\n+      console.log(`任务进度: ${status} - ${progress}%`)\r\n+\r\n+      // 将WebSocket进度传递给前端\r\n+      if (onProgress) {\r\n+        // 确保进度在50-95之间，为最后的图片获取留出空间\r\n+        const adjustedProgress = Math.min(95, Math.max(50, 50 + (progress * 0.45)))\r\n+        console.log(`🔄 传递给前端的调整后进度: ${adjustedProgress}%`)\r\n+        onProgress(status, adjustedProgress)\r\n+      }\r\n     })\r\n-    console.log('✅ 任务处理完成')\r\n+    console.log('✅✅✅ 任务处理完成 ✅✅✅')\r\n \r\n     // 获取生成的图片\r\n     console.log('📥 获取生成的图片...')\r\n     const resultImage = await getGeneratedImage(taskResult)\r\n"
                },
                {
                    "date": 1752465732525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1110,13 +1110,17 @@\n     console.log('✅✅✅ 任务处理完成 ✅✅✅')\r\n \r\n     // 获取生成的图片\r\n     console.log('📥 获取生成的图片...')\r\n+    if (onProgress) onProgress('正在获取处理结果...', 96)\r\n+\r\n     const resultImage = await getGeneratedImage(taskResult)\r\n-    console.log('🎉 换衣处理完全成功！')\r\n+    console.log('🎉🎉🎉 换衣处理完全成功! 🎉🎉🎉')\r\n \r\n     // 消耗积分（从等级卡扣除）\r\n     console.log('💎 消耗积分...')\r\n+    if (onProgress) onProgress('正在更新积分...', 98)\r\n+\r\n     // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n     const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n     const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n     console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n@@ -1137,8 +1141,13 @@\n     } catch (error) {\r\n       console.warn('⚠️ 获取节点49原图失败，使用用户上传的图片:', error)\r\n     }\r\n \r\n+    // 最终完成\r\n+    if (onProgress) onProgress('处理完成', 100)\r\n+\r\n+    console.log('🎊🎊🎊 所有处理步骤完成，准备返回结果 🎊🎊🎊')\r\n+\r\n     return {\r\n       success: true,\r\n       resultImage: resultImage,\r\n       originalImage: originalImage, // 新增：节点49的原图\r\n"
                },
                {
                    "date": 1752466149807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -661,14 +661,39 @@\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n     const baseUrl = await getApiBaseUrl()\r\n-    const wsUrl = baseUrl.replace(/^http/, 'ws') + '/ws?clientId=' + config.CLIENT_ID\r\n \r\n+    // 确保使用正确的WebSocket URL格式\r\n+    let wsUrl\r\n+    if (baseUrl.startsWith('https://')) {\r\n+      wsUrl = baseUrl.replace('https://', 'wss://') + '/ws?clientId=' + config.CLIENT_ID\r\n+    } else {\r\n+      wsUrl = baseUrl.replace('http://', 'ws://') + '/ws?clientId=' + config.CLIENT_ID\r\n+    }\r\n+\r\n     console.log('🚀🚀🚀 正在初始化 ComfyUI WebSocket 连接 🚀🚀🚀')\r\n+    console.log(`🔗 原始URL: ${baseUrl}`)\r\n     console.log(`🔗 WebSocket URL: ${wsUrl}`)\r\n     console.log(`🆔 客户端ID: ${config.CLIENT_ID}`)\r\n \r\n+    // 先测试HTTP连接是否正常\r\n+    try {\r\n+      console.log('🔍 测试ComfyUI HTTP连接...')\r\n+      const testResponse = await fetch(`${baseUrl}/system_stats`, {\r\n+        method: 'GET',\r\n+        signal: AbortSignal.timeout(5000)\r\n+      })\r\n+      if (testResponse.ok) {\r\n+        console.log('✅ ComfyUI HTTP连接正常')\r\n+      } else {\r\n+        console.warn('⚠️ ComfyUI HTTP连接异常:', testResponse.status)\r\n+      }\r\n+    } catch (httpError) {\r\n+      console.error('❌ ComfyUI HTTP连接失败:', httpError)\r\n+      throw new Error(`ComfyUI服务器不可达: ${httpError.message}`)\r\n+    }\r\n+\r\n     wsConnection = new WebSocket(wsUrl)\r\n \r\n     return new Promise((resolve, reject) => {\r\n       const timeout = setTimeout(() => {\r\n"
                },
                {
                    "date": 1752466173877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -745,9 +745,9 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n-          console.log(`📨 收到WebSocket原始消息 (${event.data.length}字符):`, event.data.substring(0, 200))\r\n+          console.log(`📨 收到WebSocket原始消息 (${event.data.length}字符):`, event.data.substring(0, 300))\r\n \r\n           let message;\r\n           try {\r\n             message = JSON.parse(event.data)\r\n@@ -756,20 +756,28 @@\n             console.log('原始消息内容:', event.data.substring(0, 500))\r\n             return\r\n           }\r\n \r\n-          console.log(`📋 WebSocket消息类型: ${message.type}`)\r\n+          // ComfyUI的消息格式通常是 { type: \"...\", data: {...} }\r\n+          console.log(`📋 WebSocket消息结构:`, message)\r\n+          console.log(`📋 消息类型: ${message.type}`)\r\n+          console.log(`📋 消息数据:`, message.data)\r\n \r\n           // 对关键消息类型显示详细信息和明显标记\r\n-          if (['executed', 'execution_error', 'progress', 'executing'].includes(message.type)) {\r\n+          if (['executed', 'execution_error', 'progress', 'executing', 'status'].includes(message.type)) {\r\n             console.log(`🔥🔥🔥 重要消息: ${message.type.toUpperCase()} 🔥🔥🔥`)\r\n-            console.log(`📊 消息详情:`, message)\r\n+            console.log(`📊 完整消息详情:`, JSON.stringify(message, null, 2))\r\n+\r\n+            // 特别关注executed消息\r\n+            if (message.type === 'executed' && message.data && message.data.prompt_id) {\r\n+              console.log(`🎯🎯🎯 检测到任务完成消息! 任务ID: ${message.data.prompt_id} 🎯🎯🎯`)\r\n+            }\r\n           }\r\n \r\n           handleWebSocketMessage(message)\r\n         } catch (error) {\r\n           console.error('❌ 处理WebSocket消息失败:', error)\r\n-          console.log('问题消息内容:', event.data.substring(0, 200))\r\n+          console.log('问题消息内容:', event.data.substring(0, 500))\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752466199036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -790,28 +790,46 @@\n function handleWebSocketMessage(message) {\r\n   try {\r\n     const { type, data } = message\r\n \r\n-    console.log(`📨 收到 WebSocket 消息: ${type}`, data)\r\n+    console.log(`📨📨📨 处理WebSocket消息 📨📨📨`)\r\n+    console.log(`消息类型: ${type}`)\r\n+    console.log(`消息数据:`, data)\r\n \r\n     switch (type) {\r\n       case 'status':\r\n+        console.log('🔄 处理状态消息')\r\n         handleStatusMessage(data)\r\n         break\r\n       case 'progress':\r\n+        console.log('📈 处理进度消息')\r\n         handleProgressMessage(data)\r\n         break\r\n       case 'executed':\r\n+        console.log('🎉 处理执行完成消息')\r\n         handleExecutedMessage(data)\r\n         break\r\n       case 'execution_error':\r\n+        console.log('❌ 处理执行错误消息')\r\n         handleExecutionErrorMessage(data)\r\n         break\r\n       case 'executing':\r\n+        console.log('🔄 处理正在执行消息')\r\n         handleExecutingMessage(data)\r\n         break\r\n       default:\r\n-        console.log(`🔍 未处理的消息类型: ${type}`, data)\r\n+        console.log(`🔍 收到未处理的消息类型: ${type}`)\r\n+        console.log(`未处理消息的完整内容:`, JSON.stringify(message, null, 2))\r\n+\r\n+        // 尝试检查是否是其他格式的执行完成消息\r\n+        if (data && (data.prompt_id || data.node || data.output)) {\r\n+          console.log('🔍 可能是特殊格式的任务相关消息，尝试处理...')\r\n+          if (data.prompt_id) {\r\n+            console.log(`🎯 发现任务ID: ${data.prompt_id}`)\r\n+            // 尝试作为执行完成消息处理\r\n+            handleExecutedMessage(data)\r\n+          }\r\n+        }\r\n     }\r\n \r\n     // 触发注册的消息处理器\r\n     if (wsMessageHandlers.has(type)) {\r\n@@ -824,8 +842,10 @@\n       })\r\n     }\r\n   } catch (error) {\r\n     console.error('❌ 处理 WebSocket 消息失败:', error)\r\n+    console.error('错误详情:', error)\r\n+    console.log('问题消息:', JSON.stringify(message, null, 2))\r\n   }\r\n }\r\n \r\n // 处理状态消息\r\n"
                },
                {
                    "date": 1752466230229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,8 +651,97 @@\n     console.warn('显示通知失败:', error)\r\n   }\r\n }\r\n \r\n+// 调试函数：测试WebSocket连接\r\n+async function debugWebSocketConnection() {\r\n+  console.log('🔧🔧🔧 开始WebSocket连接调试 🔧🔧🔧')\r\n+\r\n+  try {\r\n+    // 1. 检查配置\r\n+    const config = getComfyUIConfig()\r\n+    console.log('📋 当前配置:', config)\r\n+\r\n+    // 2. 检查API URL\r\n+    const apiUrl = await getApiBaseUrl()\r\n+    console.log('🔗 API URL:', apiUrl)\r\n+\r\n+    // 3. 测试HTTP连接\r\n+    console.log('🔍 测试HTTP连接...')\r\n+    const httpResponse = await fetch(`${apiUrl}/system_stats`)\r\n+    console.log('📊 HTTP响应状态:', httpResponse.status)\r\n+    if (httpResponse.ok) {\r\n+      const stats = await httpResponse.json()\r\n+      console.log('📊 服务器统计:', stats)\r\n+    }\r\n+\r\n+    // 4. 测试WebSocket连接\r\n+    console.log('🔌 测试WebSocket连接...')\r\n+    await initializeWebSocket()\r\n+\r\n+    // 5. 检查连接状态\r\n+    console.log('📡 WebSocket状态:', {\r\n+      isConnected: isWsConnected,\r\n+      readyState: wsConnection ? wsConnection.readyState : 'null',\r\n+      url: wsConnection ? wsConnection.url : 'null'\r\n+    })\r\n+\r\n+    return true\r\n+  } catch (error) {\r\n+    console.error('❌ WebSocket调试失败:', error)\r\n+    return false\r\n+  }\r\n+}\r\n+\r\n+// 调试函数：模拟任务提交和监听\r\n+async function debugTaskSubmission() {\r\n+  console.log('🎯🎯🎯 开始任务提交调试 🎯🎯🎯')\r\n+\r\n+  try {\r\n+    // 确保WebSocket连接\r\n+    await initializeWebSocket()\r\n+\r\n+    // 创建测试任务\r\n+    const testPromptId = 'test-' + Date.now()\r\n+    console.log(`📝 创建测试任务: ${testPromptId}`)\r\n+\r\n+    // 注册任务监听\r\n+    const testTask = {\r\n+      promptId: testPromptId,\r\n+      onProgress: (progress, status) => {\r\n+        console.log(`📈 测试任务进度: ${progress}% (${status})`)\r\n+      },\r\n+      onComplete: (result) => {\r\n+        console.log(`✅ 测试任务完成:`, result)\r\n+      },\r\n+      onError: (error) => {\r\n+        console.error(`❌ 测试任务失败:`, error)\r\n+      }\r\n+    }\r\n+\r\n+    pendingTasks.set(testPromptId, testTask)\r\n+    console.log(`📋 已注册测试任务，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+\r\n+    // 模拟发送执行完成消息（用于测试）\r\n+    setTimeout(() => {\r\n+      console.log('🧪 模拟执行完成消息...')\r\n+      const mockMessage = {\r\n+        type: 'executed',\r\n+        data: {\r\n+          prompt_id: testPromptId,\r\n+          output: { test: 'result' }\r\n+        }\r\n+      }\r\n+      handleWebSocketMessage(mockMessage)\r\n+    }, 3000)\r\n+\r\n+    return testPromptId\r\n+  } catch (error) {\r\n+    console.error('❌ 任务提交调试失败:', error)\r\n+    return null\r\n+  }\r\n+}\r\n+\r\n // 初始化 WebSocket 连接\r\n async function initializeWebSocket() {\r\n   try {\r\n     if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n"
                },
                {
                    "date": 1752466277306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1490,6 +1490,27 @@\n   processUndressImage,\r\n   processFaceSwapImage,\r\n   initializeWebSocket,\r\n   wsConnection,\r\n-  isWsConnected\r\n+  isWsConnected,\r\n+  debugWebSocketConnection,\r\n+  debugTaskSubmission,\r\n+  pendingTasks,\r\n+  checkTaskStatus\r\n }\r\n+\r\n+// 在开发环境中暴露调试函数到全局\r\n+if (import.meta.env.DEV) {\r\n+  window.comfyUIDebug = {\r\n+    debugWebSocketConnection,\r\n+    debugTaskSubmission,\r\n+    pendingTasks,\r\n+    wsConnection: () => wsConnection,\r\n+    isWsConnected: () => isWsConnected,\r\n+    checkTaskStatus,\r\n+    getApiBaseUrl,\r\n+    handleExecutedMessage: (data) => handleExecutedMessage(data),\r\n+    handleWebSocketMessage: (message) => handleWebSocketMessage(message)\r\n+  }\r\n+  console.log('🔧 ComfyUI调试函数已暴露到 window.comfyUIDebug')\r\n+  console.log('🔧 可用调试函数:', Object.keys(window.comfyUIDebug))\r\n+}\r\n"
                },
                {
                    "date": 1752466422415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -845,25 +845,59 @@\n             console.log('原始消息内容:', event.data.substring(0, 500))\r\n             return\r\n           }\r\n \r\n-          // ComfyUI的消息格式通常是 { type: \"...\", data: {...} }\r\n-          console.log(`📋 WebSocket消息结构:`, message)\r\n-          console.log(`📋 消息类型: ${message.type}`)\r\n-          console.log(`📋 消息数据:`, message.data)\r\n+          // ComfyUI的消息格式可能有多种：\r\n+          // 1. { type: \"...\", data: {...} }\r\n+          // 2. 直接的消息对象\r\n+          console.log(`📋 WebSocket消息完整结构:`, JSON.stringify(message, null, 2))\r\n \r\n+          // 检查消息格式并标准化\r\n+          let normalizedMessage = message;\r\n+          if (message.type && message.data) {\r\n+            // 标准格式：{ type: \"...\", data: {...} }\r\n+            console.log(`📋 标准格式消息 - 类型: ${message.type}`)\r\n+          } else if (typeof message === 'object') {\r\n+            // 可能是直接的消息对象，尝试推断类型\r\n+            console.log(`📋 检测消息对象结构:`, Object.keys(message))\r\n+\r\n+            // 检查是否是执行完成消息的其他格式\r\n+            if (message.prompt_id && (message.output || message.outputs)) {\r\n+              console.log(`🎯 检测到可能的执行完成消息格式`)\r\n+              normalizedMessage = {\r\n+                type: 'executed',\r\n+                data: message\r\n+              }\r\n+            } else if (message.prompt_id && message.node) {\r\n+              console.log(`🔄 检测到可能的执行中消息格式`)\r\n+              normalizedMessage = {\r\n+                type: 'executing',\r\n+                data: message\r\n+              }\r\n+            } else if (message.prompt_id && (message.value !== undefined && message.max !== undefined)) {\r\n+              console.log(`📈 检测到可能的进度消息格式`)\r\n+              normalizedMessage = {\r\n+                type: 'progress',\r\n+                data: message\r\n+              }\r\n+            }\r\n+          }\r\n+\r\n           // 对关键消息类型显示详细信息和明显标记\r\n-          if (['executed', 'execution_error', 'progress', 'executing', 'status'].includes(message.type)) {\r\n-            console.log(`🔥🔥🔥 重要消息: ${message.type.toUpperCase()} 🔥🔥🔥`)\r\n-            console.log(`📊 完整消息详情:`, JSON.stringify(message, null, 2))\r\n+          if (['executed', 'execution_error', 'progress', 'executing', 'status'].includes(normalizedMessage.type)) {\r\n+            console.log(`🔥🔥🔥 重要消息: ${normalizedMessage.type.toUpperCase()} 🔥🔥🔥`)\r\n+            console.log(`📊 标准化后的消息:`, JSON.stringify(normalizedMessage, null, 2))\r\n \r\n             // 特别关注executed消息\r\n-            if (message.type === 'executed' && message.data && message.data.prompt_id) {\r\n-              console.log(`🎯🎯🎯 检测到任务完成消息! 任务ID: ${message.data.prompt_id} 🎯🎯🎯`)\r\n+            if (normalizedMessage.type === 'executed') {\r\n+              const data = normalizedMessage.data;\r\n+              if (data && data.prompt_id) {\r\n+                console.log(`🎯🎯🎯 检测到任务完成消息! 任务ID: ${data.prompt_id} 🎯🎯🎯`)\r\n+              }\r\n             }\r\n           }\r\n \r\n-          handleWebSocketMessage(message)\r\n+          handleWebSocketMessage(normalizedMessage)\r\n         } catch (error) {\r\n           console.error('❌ 处理WebSocket消息失败:', error)\r\n           console.log('问题消息内容:', event.data.substring(0, 500))\r\n         }\r\n"
                },
                {
                    "date": 1752466592818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1008,10 +1008,19 @@\n   console.log('🎉🎉🎉 ComfyUI 任务执行完成! 🎉🎉🎉')\r\n   console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n   console.log(`📣 执行完成消息详情:`, data)\r\n \r\n+  // 尝试从不同的字段获取prompt_id\r\n+  let promptId = null;\r\n   if (data && data.prompt_id) {\r\n-    const promptId = data.prompt_id\r\n+    promptId = data.prompt_id;\r\n+  } else if (data && data.id) {\r\n+    promptId = data.id;\r\n+  } else if (data && typeof data === 'string') {\r\n+    promptId = data;\r\n+  }\r\n+\r\n+  if (promptId) {\r\n     console.log(`🔍 查找任务: ${promptId}`)\r\n     console.log(`📋 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n \r\n     const task = pendingTasks.get(promptId)\r\n@@ -1020,25 +1029,26 @@\n \r\n       // 显示前端通知\r\n       showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 处理完成!`, 'success')\r\n \r\n-      // 获取完整的历史记录\r\n-      checkTaskStatus(promptId).then(result => {\r\n-        console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n-        console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n+      // 直接使用WebSocket消息中的数据，如果有的话\r\n+      if (data.output || data.outputs) {\r\n+        console.log('🚀 直接使用WebSocket消息中的输出数据')\r\n+        const result = {\r\n+          outputs: data.output || data.outputs,\r\n+          status: { completed: true }\r\n+        };\r\n \r\n         if (task.onComplete) {\r\n-          console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n+          console.log('🚀🚀🚀 直接触发任务完成回调函数 🚀🚀🚀')\r\n           console.log('🎯 即将返回处理结果到前端界面...')\r\n \r\n           // 显示成功通知\r\n           showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n \r\n           task.onComplete(result)\r\n \r\n           console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n-        } else {\r\n-          console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n         }\r\n \r\n         pendingTasks.delete(promptId)\r\n         console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n@@ -1046,30 +1056,92 @@\n         console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n         console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n         console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n \r\n-      }).catch(error => {\r\n-        console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n-        console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n+      } else {\r\n+        // 如果WebSocket消息中没有输出数据，则查询历史记录\r\n+        console.log('📥 WebSocket消息中无输出数据，查询历史记录...')\r\n+        checkTaskStatus(promptId).then(result => {\r\n+          console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n+          console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n \r\n-        // 显示错误通知\r\n-        showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n+          if (task.onComplete) {\r\n+            console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n+            console.log('🎯 即将返回处理结果到前端界面...')\r\n \r\n-        if (task.onError) {\r\n-          task.onError(error.message)\r\n-        }\r\n-        pendingTasks.delete(promptId)\r\n-      })\r\n+            // 显示成功通知\r\n+            showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n+\r\n+            task.onComplete(result)\r\n+\r\n+            console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n+          } else {\r\n+            console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n+          }\r\n+\r\n+          pendingTasks.delete(promptId)\r\n+          console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n+\r\n+          console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+          console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n+          console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+\r\n+        }).catch(error => {\r\n+          console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n+          console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n+\r\n+          // 显示错误通知\r\n+          showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n+\r\n+          if (task.onError) {\r\n+            task.onError(error.message)\r\n+          }\r\n+          pendingTasks.delete(promptId)\r\n+        })\r\n+      }\r\n     } else {\r\n       console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n       console.warn(`⚠️ 收到未知任务 ${promptId} 的执行完成消息`)\r\n       console.warn('⚠️ 可能的原因: 1) 任务已被清理 2) 任务ID不匹配 3) 重复消息')\r\n       console.warn(`⚠️ 当前任务列表:`, Array.from(pendingTasks.keys()))\r\n       console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n+\r\n+      // 尝试通过模糊匹配找到任务\r\n+      const allTasks = Array.from(pendingTasks.keys());\r\n+      const partialMatch = allTasks.find(taskId => taskId.includes(promptId) || promptId.includes(taskId));\r\n+      if (partialMatch) {\r\n+        console.log(`🔍 找到部分匹配的任务: ${partialMatch}，尝试处理...`);\r\n+        const matchedTask = pendingTasks.get(partialMatch);\r\n+        if (matchedTask && matchedTask.onComplete) {\r\n+          console.log('🚀 触发部分匹配任务的完成回调');\r\n+          const result = {\r\n+            outputs: data.output || data.outputs || {},\r\n+            status: { completed: true }\r\n+          };\r\n+          matchedTask.onComplete(result);\r\n+          pendingTasks.delete(partialMatch);\r\n+        }\r\n+      }\r\n     }\r\n   } else {\r\n     console.warn('⚠️⚠️⚠️ 收到无效的执行完成消息 ⚠️⚠️⚠️')\r\n     console.warn('消息内容:', data)\r\n+\r\n+    // 如果没有prompt_id但有输出数据，尝试处理第一个待处理任务\r\n+    if ((data.output || data.outputs) && pendingTasks.size > 0) {\r\n+      console.log('🔍 尝试将结果分配给第一个待处理任务...');\r\n+      const firstTaskId = Array.from(pendingTasks.keys())[0];\r\n+      const firstTask = pendingTasks.get(firstTaskId);\r\n+      if (firstTask && firstTask.onComplete) {\r\n+        console.log(`🚀 将结果分配给任务: ${firstTaskId}`);\r\n+        const result = {\r\n+          outputs: data.output || data.outputs,\r\n+          status: { completed: true }\r\n+        };\r\n+        firstTask.onComplete(result);\r\n+        pendingTasks.delete(firstTaskId);\r\n+      }\r\n+    }\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752466860214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -908,9 +908,9 @@\n     throw error\r\n   }\r\n }\r\n \r\n-// 处理 WebSocket 消息\r\n+// 处理 WebSocket 消息 - 根据ComfyUI官方文档规范\r\n function handleWebSocketMessage(message) {\r\n   try {\r\n     const { type, data } = message\r\n \r\n@@ -919,40 +919,46 @@\n     console.log(`消息数据:`, data)\r\n \r\n     switch (type) {\r\n       case 'status':\r\n-        console.log('🔄 处理状态消息')\r\n+        console.log('📊 处理队列状态消息')\r\n         handleStatusMessage(data)\r\n         break\r\n       case 'progress':\r\n         console.log('📈 处理进度消息')\r\n         handleProgressMessage(data)\r\n         break\r\n+      case 'executing':\r\n+        console.log('🔄 处理正在执行消息')\r\n+        handleExecutingMessage(data)\r\n+        break\r\n       case 'executed':\r\n-        console.log('🎉 处理执行完成消息')\r\n+        console.log('🎯 处理节点执行完成消息（UI更新）')\r\n         handleExecutedMessage(data)\r\n         break\r\n+      case 'execution_start':\r\n+        console.log('🚀 处理执行开始消息')\r\n+        handleExecutionStartMessage(data)\r\n+        break\r\n+      case 'execution_success':\r\n+        console.log('🎉🎉🎉 处理执行成功消息 🎉🎉🎉')\r\n+        handleExecutionSuccessMessage(data)\r\n+        break\r\n       case 'execution_error':\r\n         console.log('❌ 处理执行错误消息')\r\n         handleExecutionErrorMessage(data)\r\n         break\r\n-      case 'executing':\r\n-        console.log('🔄 处理正在执行消息')\r\n-        handleExecutingMessage(data)\r\n+      case 'execution_interrupted':\r\n+        console.log('⏸️ 处理执行中断消息')\r\n+        handleExecutionInterruptedMessage(data)\r\n         break\r\n+      case 'execution_cached':\r\n+        console.log('💾 处理执行缓存消息')\r\n+        handleExecutionCachedMessage(data)\r\n+        break\r\n       default:\r\n         console.log(`🔍 收到未处理的消息类型: ${type}`)\r\n         console.log(`未处理消息的完整内容:`, JSON.stringify(message, null, 2))\r\n-\r\n-        // 尝试检查是否是其他格式的执行完成消息\r\n-        if (data && (data.prompt_id || data.node || data.output)) {\r\n-          console.log('🔍 可能是特殊格式的任务相关消息，尝试处理...')\r\n-          if (data.prompt_id) {\r\n-            console.log(`🎯 发现任务ID: ${data.prompt_id}`)\r\n-            // 尝试作为执行完成消息处理\r\n-            handleExecutedMessage(data)\r\n-          }\r\n-        }\r\n     }\r\n \r\n     // 触发注册的消息处理器\r\n     if (wsMessageHandlers.has(type)) {\r\n"
                },
                {
                    "date": 1752466902136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -976,15 +976,139 @@\n     console.log('问题消息:', JSON.stringify(message, null, 2))\r\n   }\r\n }\r\n \r\n-// 处理状态消息\r\n+// 处理状态消息 - 队列状态变化\r\n function handleStatusMessage(data) {\r\n-  if (data && data.sid) {\r\n-    console.log(`📊 队列状态更新: 执行中=${data.status?.exec_info?.queue_remaining || 0}`)\r\n+  if (data && data.exec_info) {\r\n+    const queueRemaining = data.exec_info.queue_remaining || 0\r\n+    console.log(`📊 队列状态更新: 剩余任务=${queueRemaining}`)\r\n+\r\n+    // 显示队列状态通知\r\n+    if (queueRemaining === 0) {\r\n+      showWebSocketStatusNotification('队列已清空', 'info')\r\n+    } else {\r\n+      showWebSocketStatusNotification(`队列中还有 ${queueRemaining} 个任务`, 'info')\r\n+    }\r\n   }\r\n }\r\n \r\n+// 处理执行开始消息\r\n+function handleExecutionStartMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const promptId = data.prompt_id\r\n+    console.log(`🚀 任务开始执行: ${promptId}`)\r\n+\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task && task.onProgress) {\r\n+      task.onProgress('开始执行', 5)\r\n+    }\r\n+\r\n+    showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 开始执行`, 'info')\r\n+  }\r\n+}\r\n+\r\n+// 处理执行成功消息 - 这是关键的完成消息！\r\n+function handleExecutionSuccessMessage(data) {\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log('🎉🎉🎉 ComfyUI 执行成功! 所有节点已完成! 🎉🎉🎉')\r\n+  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log(`📣 执行成功消息详情:`, data)\r\n+\r\n+  if (data && data.prompt_id) {\r\n+    const promptId = data.prompt_id\r\n+    console.log(`🔍 查找任务: ${promptId}`)\r\n+    console.log(`📋 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n+\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task) {\r\n+      console.log('✅✅✅ 找到对应任务，执行已成功完成 ✅✅✅')\r\n+\r\n+      // 显示前端通知\r\n+      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 执行成功!`, 'success')\r\n+\r\n+      // 获取完整的历史记录来获取输出结果\r\n+      console.log('📥 获取任务执行结果...')\r\n+      checkTaskStatus(promptId).then(result => {\r\n+        console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n+        console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n+\r\n+        if (task.onComplete) {\r\n+          console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n+          console.log('🎯 即将返回处理结果到前端界面...')\r\n+\r\n+          // 显示成功通知\r\n+          showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n+\r\n+          task.onComplete(result)\r\n+\r\n+          console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n+        } else {\r\n+          console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n+        }\r\n+\r\n+        pendingTasks.delete(promptId)\r\n+        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n+\r\n+        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+        console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n+        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n+\r\n+      }).catch(error => {\r\n+        console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n+        console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n+\r\n+        // 显示错误通知\r\n+        showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n+\r\n+        if (task.onError) {\r\n+          task.onError(error.message)\r\n+        }\r\n+        pendingTasks.delete(promptId)\r\n+      })\r\n+    } else {\r\n+      console.warn('⚠️⚠️⚠️ 收到未知任务的执行成功消息 ⚠️⚠️⚠️')\r\n+      console.warn(`⚠️ 任务ID: ${promptId}`)\r\n+      console.warn(`⚠️ 当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+    }\r\n+  } else {\r\n+    console.warn('⚠️⚠️⚠️ 收到无效的执行成功消息 ⚠️⚠️⚠️')\r\n+    console.warn('消息内容:', data)\r\n+  }\r\n+}\r\n+\r\n+// 处理执行中断消息\r\n+function handleExecutionInterruptedMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const promptId = data.prompt_id\r\n+    console.log(`⏸️ 任务执行被中断: ${promptId}`)\r\n+\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task && task.onError) {\r\n+      task.onError('任务执行被中断')\r\n+    }\r\n+\r\n+    pendingTasks.delete(promptId)\r\n+    showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 被中断`, 'warning')\r\n+  }\r\n+}\r\n+\r\n+// 处理执行缓存消息\r\n+function handleExecutionCachedMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const promptId = data.prompt_id\r\n+    const cachedNodes = data.nodes || []\r\n+    console.log(`💾 任务使用缓存: ${promptId}, 缓存节点数: ${cachedNodes.length}`)\r\n+\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task && task.onProgress) {\r\n+      task.onProgress(`使用缓存 (${cachedNodes.length}个节点)`, 30)\r\n+    }\r\n+\r\n+    showWebSocketStatusNotification(`使用缓存加速处理`, 'info')\r\n+  }\r\n+}\r\n+\r\n // 处理进度消息\r\n function handleProgressMessage(data) {\r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n"
                },
                {
                    "date": 1752466926415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1107,24 +1107,25 @@\n     showWebSocketStatusNotification(`使用缓存加速处理`, 'info')\r\n   }\r\n }\r\n \r\n-// 处理进度消息\r\n+// 处理进度消息 - 根据官方文档规范\r\n function handleProgressMessage(data) {\r\n-  if (data && data.prompt_id) {\r\n+  if (data && data.prompt_id && data.value !== undefined && data.max !== undefined) {\r\n     const promptId = data.prompt_id\r\n+    const nodeId = data.node\r\n+    const progress = Math.round((data.value / data.max) * 100)\r\n+\r\n+    console.log('📈📈📈 ComfyUI 处理进度更新 📈📈📈')\r\n+    console.log(`📈 任务 ${promptId} 进度: ${progress}% (${data.value}/${data.max})`)\r\n+    console.log(`🔄 当前处理节点: ${nodeId || '未知'}`)\r\n+\r\n     const task = pendingTasks.get(promptId)\r\n-\r\n     if (task && task.onProgress) {\r\n-      const progress = Math.round((data.value / data.max) * 100)\r\n-      console.log('📈📈📈 ComfyUI 处理进度更新 📈📈📈')\r\n-      console.log(`📈 任务 ${promptId} 进度: ${progress}% (${data.value}/${data.max})`)\r\n-      console.log(`🔄 当前处理节点: ${data.node || '未知'}`)\r\n-\r\n       // 显示进度通知\r\n       showWebSocketStatusNotification(`处理进度: ${progress}%`, 'info')\r\n \r\n-      task.onProgress(progress, 'processing')\r\n+      task.onProgress(progress, `处理节点 ${nodeId || ''}`)\r\n     } else {\r\n       console.log(`📈 收到任务 ${promptId} 的进度消息，但未找到对应任务`)\r\n     }\r\n   } else {\r\n"
                },
                {
                    "date": 1752466949515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1288,24 +1288,36 @@\n     }\r\n   }\r\n }\r\n \r\n-// 处理正在执行消息\r\n+// 处理正在执行消息 - 根据官方文档规范\r\n function handleExecutingMessage(data) {\r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n-    const task = pendingTasks.get(promptId)\r\n+    const nodeId = data.node\r\n \r\n-    if (task && task.onProgress) {\r\n-      console.log('🔄🔄🔄 ComfyUI 开始执行任务 🔄🔄🔄')\r\n-      console.log(`🔄 任务 ${promptId} 正在执行节点: ${data.node || '未知'}`)\r\n+    console.log('🔄🔄🔄 ComfyUI 节点执行状态更新 🔄🔄🔄')\r\n \r\n-      // 显示执行通知\r\n-      showWebSocketStatusNotification(`正在执行节点: ${data.node || '未知'}`, 'info')\r\n+    if (nodeId === null || nodeId === undefined) {\r\n+      // node为null表示执行完成\r\n+      console.log(`✅ 任务 ${promptId} 所有节点执行完成`)\r\n \r\n-      task.onProgress(10, 'executing')\r\n+      const task = pendingTasks.get(promptId)\r\n+      if (task && task.onProgress) {\r\n+        task.onProgress(95, '所有节点执行完成')\r\n+      }\r\n+\r\n+      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 节点执行完成`, 'success')\r\n     } else {\r\n-      console.log(`🔄 收到任务 ${promptId} 的执行消息，但未找到对应任务`)\r\n+      // 开始执行新节点\r\n+      console.log(`🔄 任务 ${promptId} 正在执行节点: ${nodeId}`)\r\n+\r\n+      const task = pendingTasks.get(promptId)\r\n+      if (task && task.onProgress) {\r\n+        task.onProgress(50, `执行节点 ${nodeId}`)\r\n+      }\r\n+\r\n+      showWebSocketStatusNotification(`正在执行节点: ${nodeId}`, 'info')\r\n     }\r\n   } else {\r\n     console.warn('⚠️ 收到无效的执行消息:', data)\r\n   }\r\n"
                },
                {
                    "date": 1752466966467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1132,14 +1132,12 @@\n     console.warn('⚠️ 收到无效的进度消息:', data)\r\n   }\r\n }\r\n \r\n-// 处理执行完成消息\r\n+// 处理节点执行完成消息 - 当节点返回UI元素时\r\n function handleExecutedMessage(data) {\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n-  console.log('🎉🎉🎉 ComfyUI 任务执行完成! 🎉🎉🎉')\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n-  console.log(`📣 执行完成消息详情:`, data)\r\n+  console.log('🎯 收到节点执行完成消息（UI更新）')\r\n+  console.log(`📣 节点执行消息详情:`, data)\r\n \r\n   // 尝试从不同的字段获取prompt_id\r\n   let promptId = null;\r\n   if (data && data.prompt_id) {\r\n"
                },
                {
                    "date": 1752467009225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1137,140 +1137,27 @@\n function handleExecutedMessage(data) {\r\n   console.log('🎯 收到节点执行完成消息（UI更新）')\r\n   console.log(`📣 节点执行消息详情:`, data)\r\n \r\n-  // 尝试从不同的字段获取prompt_id\r\n-  let promptId = null;\r\n-  if (data && data.prompt_id) {\r\n-    promptId = data.prompt_id;\r\n-  } else if (data && data.id) {\r\n-    promptId = data.id;\r\n-  } else if (data && typeof data === 'string') {\r\n-    promptId = data;\r\n-  }\r\n+  // 根据官方文档，executed消息只在节点返回UI元素时发送\r\n+  // 这不是任务完成的信号，真正的完成信号是execution_success\r\n \r\n-  if (promptId) {\r\n-    console.log(`🔍 查找任务: ${promptId}`)\r\n-    console.log(`📋 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n+  if (data && data.prompt_id && data.node && data.output) {\r\n+    const promptId = data.prompt_id\r\n+    const nodeId = data.node\r\n \r\n+    console.log(`🎯 节点 ${nodeId} 返回UI更新，任务: ${promptId}`)\r\n+    console.log(`📋 UI输出:`, data.output)\r\n+\r\n+    // 这里可以处理中间结果或UI更新，但不应该触发任务完成\r\n     const task = pendingTasks.get(promptId)\r\n-    if (task) {\r\n-      console.log('✅✅✅ 找到对应任务，开始获取处理结果 ✅✅✅')\r\n+    if (task && task.onProgress) {\r\n+      task.onProgress(80, `节点 ${nodeId} 完成`)\r\n+    }\r\n \r\n-      // 显示前端通知\r\n-      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 处理完成!`, 'success')\r\n-\r\n-      // 直接使用WebSocket消息中的数据，如果有的话\r\n-      if (data.output || data.outputs) {\r\n-        console.log('🚀 直接使用WebSocket消息中的输出数据')\r\n-        const result = {\r\n-          outputs: data.output || data.outputs,\r\n-          status: { completed: true }\r\n-        };\r\n-\r\n-        if (task.onComplete) {\r\n-          console.log('🚀🚀🚀 直接触发任务完成回调函数 🚀🚀🚀')\r\n-          console.log('🎯 即将返回处理结果到前端界面...')\r\n-\r\n-          // 显示成功通知\r\n-          showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n-\r\n-          task.onComplete(result)\r\n-\r\n-          console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n-        }\r\n-\r\n-        pendingTasks.delete(promptId)\r\n-        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n-\r\n-        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-        console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n-        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-\r\n-      } else {\r\n-        // 如果WebSocket消息中没有输出数据，则查询历史记录\r\n-        console.log('📥 WebSocket消息中无输出数据，查询历史记录...')\r\n-        checkTaskStatus(promptId).then(result => {\r\n-          console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n-          console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n-\r\n-          if (task.onComplete) {\r\n-            console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n-            console.log('🎯 即将返回处理结果到前端界面...')\r\n-\r\n-            // 显示成功通知\r\n-            showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n-\r\n-            task.onComplete(result)\r\n-\r\n-            console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n-          } else {\r\n-            console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n-          }\r\n-\r\n-          pendingTasks.delete(promptId)\r\n-          console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n-\r\n-          console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-          console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n-          console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-\r\n-        }).catch(error => {\r\n-          console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n-          console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n-\r\n-          // 显示错误通知\r\n-          showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n-\r\n-          if (task.onError) {\r\n-            task.onError(error.message)\r\n-          }\r\n-          pendingTasks.delete(promptId)\r\n-        })\r\n-      }\r\n-    } else {\r\n-      console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n-      console.warn(`⚠️ 收到未知任务 ${promptId} 的执行完成消息`)\r\n-      console.warn('⚠️ 可能的原因: 1) 任务已被清理 2) 任务ID不匹配 3) 重复消息')\r\n-      console.warn(`⚠️ 当前任务列表:`, Array.from(pendingTasks.keys()))\r\n-      console.warn('⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️')\r\n-\r\n-      // 尝试通过模糊匹配找到任务\r\n-      const allTasks = Array.from(pendingTasks.keys());\r\n-      const partialMatch = allTasks.find(taskId => taskId.includes(promptId) || promptId.includes(taskId));\r\n-      if (partialMatch) {\r\n-        console.log(`🔍 找到部分匹配的任务: ${partialMatch}，尝试处理...`);\r\n-        const matchedTask = pendingTasks.get(partialMatch);\r\n-        if (matchedTask && matchedTask.onComplete) {\r\n-          console.log('🚀 触发部分匹配任务的完成回调');\r\n-          const result = {\r\n-            outputs: data.output || data.outputs || {},\r\n-            status: { completed: true }\r\n-          };\r\n-          matchedTask.onComplete(result);\r\n-          pendingTasks.delete(partialMatch);\r\n-        }\r\n-      }\r\n-    }\r\n+    showWebSocketStatusNotification(`节点 ${nodeId} 处理完成`, 'info')\r\n   } else {\r\n-    console.warn('⚠️⚠️⚠️ 收到无效的执行完成消息 ⚠️⚠️⚠️')\r\n-    console.warn('消息内容:', data)\r\n-\r\n-    // 如果没有prompt_id但有输出数据，尝试处理第一个待处理任务\r\n-    if ((data.output || data.outputs) && pendingTasks.size > 0) {\r\n-      console.log('🔍 尝试将结果分配给第一个待处理任务...');\r\n-      const firstTaskId = Array.from(pendingTasks.keys())[0];\r\n-      const firstTask = pendingTasks.get(firstTaskId);\r\n-      if (firstTask && firstTask.onComplete) {\r\n-        console.log(`🚀 将结果分配给任务: ${firstTaskId}`);\r\n-        const result = {\r\n-          outputs: data.output || data.outputs,\r\n-          status: { completed: true }\r\n-        };\r\n-        firstTask.onComplete(result);\r\n-        pendingTasks.delete(firstTaskId);\r\n-      }\r\n-    }\r\n+    console.log('📋 收到executed消息，但格式不完整:', data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752467287603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1624,27 +1624,6 @@\n   processUndressImage,\r\n   processFaceSwapImage,\r\n   initializeWebSocket,\r\n   wsConnection,\r\n-  isWsConnected,\r\n-  debugWebSocketConnection,\r\n-  debugTaskSubmission,\r\n-  pendingTasks,\r\n-  checkTaskStatus\r\n+  isWsConnected\r\n }\r\n-\r\n-// 在开发环境中暴露调试函数到全局\r\n-if (import.meta.env.DEV) {\r\n-  window.comfyUIDebug = {\r\n-    debugWebSocketConnection,\r\n-    debugTaskSubmission,\r\n-    pendingTasks,\r\n-    wsConnection: () => wsConnection,\r\n-    isWsConnected: () => isWsConnected,\r\n-    checkTaskStatus,\r\n-    getApiBaseUrl,\r\n-    handleExecutedMessage: (data) => handleExecutedMessage(data),\r\n-    handleWebSocketMessage: (message) => handleWebSocketMessage(message)\r\n-  }\r\n-  console.log('🔧 ComfyUI调试函数已暴露到 window.comfyUIDebug')\r\n-  console.log('🔧 可用调试函数:', Object.keys(window.comfyUIDebug))\r\n-}\r\n"
                },
                {
                    "date": 1752467329366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,97 +651,10 @@\n     console.warn('显示通知失败:', error)\r\n   }\r\n }\r\n \r\n-// 调试函数：测试WebSocket连接\r\n-async function debugWebSocketConnection() {\r\n-  console.log('🔧🔧🔧 开始WebSocket连接调试 🔧🔧🔧')\r\n \r\n-  try {\r\n-    // 1. 检查配置\r\n-    const config = getComfyUIConfig()\r\n-    console.log('📋 当前配置:', config)\r\n \r\n-    // 2. 检查API URL\r\n-    const apiUrl = await getApiBaseUrl()\r\n-    console.log('🔗 API URL:', apiUrl)\r\n-\r\n-    // 3. 测试HTTP连接\r\n-    console.log('🔍 测试HTTP连接...')\r\n-    const httpResponse = await fetch(`${apiUrl}/system_stats`)\r\n-    console.log('📊 HTTP响应状态:', httpResponse.status)\r\n-    if (httpResponse.ok) {\r\n-      const stats = await httpResponse.json()\r\n-      console.log('📊 服务器统计:', stats)\r\n-    }\r\n-\r\n-    // 4. 测试WebSocket连接\r\n-    console.log('🔌 测试WebSocket连接...')\r\n-    await initializeWebSocket()\r\n-\r\n-    // 5. 检查连接状态\r\n-    console.log('📡 WebSocket状态:', {\r\n-      isConnected: isWsConnected,\r\n-      readyState: wsConnection ? wsConnection.readyState : 'null',\r\n-      url: wsConnection ? wsConnection.url : 'null'\r\n-    })\r\n-\r\n-    return true\r\n-  } catch (error) {\r\n-    console.error('❌ WebSocket调试失败:', error)\r\n-    return false\r\n-  }\r\n-}\r\n-\r\n-// 调试函数：模拟任务提交和监听\r\n-async function debugTaskSubmission() {\r\n-  console.log('🎯🎯🎯 开始任务提交调试 🎯🎯🎯')\r\n-\r\n-  try {\r\n-    // 确保WebSocket连接\r\n-    await initializeWebSocket()\r\n-\r\n-    // 创建测试任务\r\n-    const testPromptId = 'test-' + Date.now()\r\n-    console.log(`📝 创建测试任务: ${testPromptId}`)\r\n-\r\n-    // 注册任务监听\r\n-    const testTask = {\r\n-      promptId: testPromptId,\r\n-      onProgress: (progress, status) => {\r\n-        console.log(`📈 测试任务进度: ${progress}% (${status})`)\r\n-      },\r\n-      onComplete: (result) => {\r\n-        console.log(`✅ 测试任务完成:`, result)\r\n-      },\r\n-      onError: (error) => {\r\n-        console.error(`❌ 测试任务失败:`, error)\r\n-      }\r\n-    }\r\n-\r\n-    pendingTasks.set(testPromptId, testTask)\r\n-    console.log(`📋 已注册测试任务，当前任务列表:`, Array.from(pendingTasks.keys()))\r\n-\r\n-    // 模拟发送执行完成消息（用于测试）\r\n-    setTimeout(() => {\r\n-      console.log('🧪 模拟执行完成消息...')\r\n-      const mockMessage = {\r\n-        type: 'executed',\r\n-        data: {\r\n-          prompt_id: testPromptId,\r\n-          output: { test: 'result' }\r\n-        }\r\n-      }\r\n-      handleWebSocketMessage(mockMessage)\r\n-    }, 3000)\r\n-\r\n-    return testPromptId\r\n-  } catch (error) {\r\n-    console.error('❌ 任务提交调试失败:', error)\r\n-    return null\r\n-  }\r\n-}\r\n-\r\n // 初始化 WebSocket 连接\r\n async function initializeWebSocket() {\r\n   try {\r\n     if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n"
                },
                {
                    "date": 1752467358849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -672,23 +672,17 @@\n     } else {\r\n       wsUrl = baseUrl.replace('http://', 'ws://') + '/ws?clientId=' + config.CLIENT_ID\r\n     }\r\n \r\n-    console.log('🚀🚀🚀 正在初始化 ComfyUI WebSocket 连接 🚀🚀🚀')\r\n-    console.log(`🔗 原始URL: ${baseUrl}`)\r\n-    console.log(`🔗 WebSocket URL: ${wsUrl}`)\r\n-    console.log(`🆔 客户端ID: ${config.CLIENT_ID}`)\r\n+    console.log('🔌 正在连接 ComfyUI WebSocket...')\r\n \r\n     // 先测试HTTP连接是否正常\r\n     try {\r\n-      console.log('🔍 测试ComfyUI HTTP连接...')\r\n       const testResponse = await fetch(`${baseUrl}/system_stats`, {\r\n         method: 'GET',\r\n         signal: AbortSignal.timeout(5000)\r\n       })\r\n-      if (testResponse.ok) {\r\n-        console.log('✅ ComfyUI HTTP连接正常')\r\n-      } else {\r\n+      if (!testResponse.ok) {\r\n         console.warn('⚠️ ComfyUI HTTP连接异常:', testResponse.status)\r\n       }\r\n     } catch (httpError) {\r\n       console.error('❌ ComfyUI HTTP连接失败:', httpError)\r\n"
                },
                {
                    "date": 1752467375914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -692,15 +692,14 @@\n     wsConnection = new WebSocket(wsUrl)\r\n \r\n     return new Promise((resolve, reject) => {\r\n       const timeout = setTimeout(() => {\r\n-        console.error('❌❌❌ WebSocket 连接超时 (10秒) ❌❌❌')\r\n+        console.error('❌ WebSocket 连接超时')\r\n         reject(new Error('WebSocket 连接超时'))\r\n       }, 10000)\r\n \r\n       wsConnection.onopen = () => {\r\n-        console.log('🎉🎉🎉 ComfyUI WebSocket 连接成功建立! 🎉🎉🎉')\r\n-        console.log('📡 实时通信已启用，等待ComfyUI处理结果...')\r\n+        console.log('✅ ComfyUI WebSocket 连接成功')\r\n         isWsConnected = true\r\n         clearTimeout(timeout)\r\n         clearTimeout(wsReconnectTimer)\r\n \r\n"
                },
                {
                    "date": 1752467400456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -729,9 +729,9 @@\n         }\r\n       }\r\n \r\n       wsConnection.onerror = (error) => {\r\n-        console.error('❌❌❌ ComfyUI WebSocket 连接错误 ❌❌❌', error)\r\n+        console.error('❌ ComfyUI WebSocket 连接错误:', error)\r\n         clearTimeout(timeout)\r\n \r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接错误', 'error')\r\n"
                },
                {
                    "date": 1752467431784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -740,73 +740,44 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n-          console.log(`📨 收到WebSocket原始消息 (${event.data.length}字符):`, event.data.substring(0, 300))\r\n-\r\n           let message;\r\n           try {\r\n             message = JSON.parse(event.data)\r\n           } catch (parseError) {\r\n             console.error('❌ WebSocket消息解析失败:', parseError)\r\n-            console.log('原始消息内容:', event.data.substring(0, 500))\r\n             return\r\n           }\r\n \r\n-          // ComfyUI的消息格式可能有多种：\r\n-          // 1. { type: \"...\", data: {...} }\r\n-          // 2. 直接的消息对象\r\n-          console.log(`📋 WebSocket消息完整结构:`, JSON.stringify(message, null, 2))\r\n-\r\n           // 检查消息格式并标准化\r\n           let normalizedMessage = message;\r\n           if (message.type && message.data) {\r\n             // 标准格式：{ type: \"...\", data: {...} }\r\n-            console.log(`📋 标准格式消息 - 类型: ${message.type}`)\r\n+            normalizedMessage = message;\r\n           } else if (typeof message === 'object') {\r\n             // 可能是直接的消息对象，尝试推断类型\r\n-            console.log(`📋 检测消息对象结构:`, Object.keys(message))\r\n-\r\n-            // 检查是否是执行完成消息的其他格式\r\n             if (message.prompt_id && (message.output || message.outputs)) {\r\n-              console.log(`🎯 检测到可能的执行完成消息格式`)\r\n               normalizedMessage = {\r\n                 type: 'executed',\r\n                 data: message\r\n               }\r\n             } else if (message.prompt_id && message.node) {\r\n-              console.log(`🔄 检测到可能的执行中消息格式`)\r\n               normalizedMessage = {\r\n                 type: 'executing',\r\n                 data: message\r\n               }\r\n             } else if (message.prompt_id && (message.value !== undefined && message.max !== undefined)) {\r\n-              console.log(`📈 检测到可能的进度消息格式`)\r\n               normalizedMessage = {\r\n                 type: 'progress',\r\n                 data: message\r\n               }\r\n             }\r\n           }\r\n \r\n-          // 对关键消息类型显示详细信息和明显标记\r\n-          if (['executed', 'execution_error', 'progress', 'executing', 'status'].includes(normalizedMessage.type)) {\r\n-            console.log(`🔥🔥🔥 重要消息: ${normalizedMessage.type.toUpperCase()} 🔥🔥🔥`)\r\n-            console.log(`📊 标准化后的消息:`, JSON.stringify(normalizedMessage, null, 2))\r\n-\r\n-            // 特别关注executed消息\r\n-            if (normalizedMessage.type === 'executed') {\r\n-              const data = normalizedMessage.data;\r\n-              if (data && data.prompt_id) {\r\n-                console.log(`🎯🎯🎯 检测到任务完成消息! 任务ID: ${data.prompt_id} 🎯🎯🎯`)\r\n-              }\r\n-            }\r\n-          }\r\n-\r\n           handleWebSocketMessage(normalizedMessage)\r\n         } catch (error) {\r\n           console.error('❌ 处理WebSocket消息失败:', error)\r\n-          console.log('问题消息内容:', event.data.substring(0, 500))\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752467450562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -790,12 +790,8 @@\n function handleWebSocketMessage(message) {\r\n   try {\r\n     const { type, data } = message\r\n \r\n-    console.log(`📨📨📨 处理WebSocket消息 📨📨📨`)\r\n-    console.log(`消息类型: ${type}`)\r\n-    console.log(`消息数据:`, data)\r\n-\r\n     switch (type) {\r\n       case 'status':\r\n         console.log('📊 处理队列状态消息')\r\n         handleStatusMessage(data)\r\n"
                },
                {
                    "date": 1752467479589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -792,46 +792,37 @@\n     const { type, data } = message\r\n \r\n     switch (type) {\r\n       case 'status':\r\n-        console.log('📊 处理队列状态消息')\r\n         handleStatusMessage(data)\r\n         break\r\n       case 'progress':\r\n-        console.log('📈 处理进度消息')\r\n         handleProgressMessage(data)\r\n         break\r\n       case 'executing':\r\n-        console.log('🔄 处理正在执行消息')\r\n         handleExecutingMessage(data)\r\n         break\r\n       case 'executed':\r\n-        console.log('🎯 处理节点执行完成消息（UI更新）')\r\n         handleExecutedMessage(data)\r\n         break\r\n       case 'execution_start':\r\n-        console.log('🚀 处理执行开始消息')\r\n         handleExecutionStartMessage(data)\r\n         break\r\n       case 'execution_success':\r\n-        console.log('🎉🎉🎉 处理执行成功消息 🎉🎉🎉')\r\n+        console.log('🎉 任务执行成功!')\r\n         handleExecutionSuccessMessage(data)\r\n         break\r\n       case 'execution_error':\r\n-        console.log('❌ 处理执行错误消息')\r\n         handleExecutionErrorMessage(data)\r\n         break\r\n       case 'execution_interrupted':\r\n-        console.log('⏸️ 处理执行中断消息')\r\n         handleExecutionInterruptedMessage(data)\r\n         break\r\n       case 'execution_cached':\r\n-        console.log('💾 处理执行缓存消息')\r\n         handleExecutionCachedMessage(data)\r\n         break\r\n       default:\r\n-        console.log(`🔍 收到未处理的消息类型: ${type}`)\r\n-        console.log(`未处理消息的完整内容:`, JSON.stringify(message, null, 2))\r\n+        console.log(`收到未处理的消息类型: ${type}`)\r\n     }\r\n \r\n     // 触发注册的消息处理器\r\n     if (wsMessageHandlers.has(type)) {\r\n"
                },
                {
                    "date": 1752467514801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -872,55 +872,36 @@\n }\r\n \r\n // 处理执行成功消息 - 这是关键的完成消息！\r\n function handleExecutionSuccessMessage(data) {\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n-  console.log('🎉🎉🎉 ComfyUI 执行成功! 所有节点已完成! 🎉🎉🎉')\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n-  console.log(`📣 执行成功消息详情:`, data)\r\n+  console.log('🎉 ComfyUI 执行成功! 所有节点已完成!')\r\n \r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n-    console.log(`🔍 查找任务: ${promptId}`)\r\n-    console.log(`📋 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n+    const task = pendingTasks.get(promptId)\r\n \r\n-    const task = pendingTasks.get(promptId)\r\n     if (task) {\r\n-      console.log('✅✅✅ 找到对应任务，执行已成功完成 ✅✅✅')\r\n+      console.log(`✅ 任务 ${promptId} 执行完成`)\r\n \r\n       // 显示前端通知\r\n-      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 执行成功!`, 'success')\r\n+      showWebSocketStatusNotification(`任务执行成功!`, 'success')\r\n \r\n       // 获取完整的历史记录来获取输出结果\r\n-      console.log('📥 获取任务执行结果...')\r\n       checkTaskStatus(promptId).then(result => {\r\n-        console.log('🎊🎊🎊 成功获取任务完整结果 🎊🎊🎊')\r\n-        console.log(`📋 任务 ${promptId} 的完整结果:`, result)\r\n-\r\n         if (task.onComplete) {\r\n-          console.log('🚀🚀🚀 触发任务完成回调函数 🚀🚀🚀')\r\n-          console.log('🎯 即将返回处理结果到前端界面...')\r\n+          console.log('🚀 返回处理结果到前端')\r\n \r\n           // 显示成功通知\r\n           showWebSocketStatusNotification('图片处理成功，正在加载结果...', 'success')\r\n \r\n           task.onComplete(result)\r\n-\r\n-          console.log('✅✅✅ 任务完成回调已执行，结果已返回前端 ✅✅✅')\r\n-        } else {\r\n-          console.warn(`⚠️⚠️⚠️ 任务 ${promptId} 没有完成回调函数! ⚠️⚠️⚠️`)\r\n         }\r\n \r\n         pendingTasks.delete(promptId)\r\n-        console.log(`🗑️ 已删除完成的任务 ${promptId}，剩余任务数: ${pendingTasks.size}`)\r\n+        console.log('✅ ComfyUI 处理流程完成!')\r\n \r\n-        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-        console.log('🎊 ComfyUI 处理流程完全结束! 🎊')\r\n-        console.log('🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉')\r\n-\r\n       }).catch(error => {\r\n-        console.error('❌❌❌ 获取任务结果失败 ❌❌❌', error)\r\n-        console.error(`❌ 任务 ${promptId} 结果获取失败:`, error)\r\n+        console.error('❌ 获取任务结果失败:', error)\r\n \r\n         // 显示错误通知\r\n         showWebSocketStatusNotification('获取处理结果失败', 'error')\r\n \r\n@@ -929,15 +910,12 @@\n         }\r\n         pendingTasks.delete(promptId)\r\n       })\r\n     } else {\r\n-      console.warn('⚠️⚠️⚠️ 收到未知任务的执行成功消息 ⚠️⚠️⚠️')\r\n-      console.warn(`⚠️ 任务ID: ${promptId}`)\r\n-      console.warn(`⚠️ 当前任务列表:`, Array.from(pendingTasks.keys()))\r\n+      console.warn(`⚠️ 收到未知任务的执行成功消息: ${promptId}`)\r\n     }\r\n   } else {\r\n-    console.warn('⚠️⚠️⚠️ 收到无效的执行成功消息 ⚠️⚠️⚠️')\r\n-    console.warn('消息内容:', data)\r\n+    console.warn('⚠️ 收到无效的执行成功消息')\r\n   }\r\n }\r\n \r\n // 处理执行中断消息\r\n"
                },
                {
                    "date": 1752467536138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -956,23 +956,12 @@\n     const promptId = data.prompt_id\r\n     const nodeId = data.node\r\n     const progress = Math.round((data.value / data.max) * 100)\r\n \r\n-    console.log('📈📈📈 ComfyUI 处理进度更新 📈📈📈')\r\n-    console.log(`📈 任务 ${promptId} 进度: ${progress}% (${data.value}/${data.max})`)\r\n-    console.log(`🔄 当前处理节点: ${nodeId || '未知'}`)\r\n-\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n-      // 显示进度通知\r\n-      showWebSocketStatusNotification(`处理进度: ${progress}%`, 'info')\r\n-\r\n       task.onProgress(progress, `处理节点 ${nodeId || ''}`)\r\n-    } else {\r\n-      console.log(`📈 收到任务 ${promptId} 的进度消息，但未找到对应任务`)\r\n     }\r\n-  } else {\r\n-    console.warn('⚠️ 收到无效的进度消息:', data)\r\n   }\r\n }\r\n \r\n // 处理节点执行完成消息 - 当节点返回UI元素时\r\n"
                },
                {
                    "date": 1752467556815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1010,33 +1010,18 @@\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n     const nodeId = data.node\r\n \r\n-    console.log('🔄🔄🔄 ComfyUI 节点执行状态更新 🔄🔄🔄')\r\n-\r\n-    if (nodeId === null || nodeId === undefined) {\r\n-      // node为null表示执行完成\r\n-      console.log(`✅ 任务 ${promptId} 所有节点执行完成`)\r\n-\r\n-      const task = pendingTasks.get(promptId)\r\n-      if (task && task.onProgress) {\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task && task.onProgress) {\r\n+      if (nodeId === null || nodeId === undefined) {\r\n+        // node为null表示执行完成\r\n         task.onProgress(95, '所有节点执行完成')\r\n-      }\r\n-\r\n-      showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 节点执行完成`, 'success')\r\n-    } else {\r\n-      // 开始执行新节点\r\n-      console.log(`🔄 任务 ${promptId} 正在执行节点: ${nodeId}`)\r\n-\r\n-      const task = pendingTasks.get(promptId)\r\n-      if (task && task.onProgress) {\r\n+      } else {\r\n+        // 开始执行新节点\r\n         task.onProgress(50, `执行节点 ${nodeId}`)\r\n       }\r\n-\r\n-      showWebSocketStatusNotification(`正在执行节点: ${nodeId}`, 'info')\r\n     }\r\n-  } else {\r\n-    console.warn('⚠️ 收到无效的执行消息:', data)\r\n   }\r\n }\r\n \r\n // 等待任务完成 - 专注使用WebSocket机制\r\n"
                },
                {
                    "date": 1752467579124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -965,30 +965,20 @@\n }\r\n \r\n // 处理节点执行完成消息 - 当节点返回UI元素时\r\n function handleExecutedMessage(data) {\r\n-  console.log('🎯 收到节点执行完成消息（UI更新）')\r\n-  console.log(`📣 节点执行消息详情:`, data)\r\n-\r\n   // 根据官方文档，executed消息只在节点返回UI元素时发送\r\n   // 这不是任务完成的信号，真正的完成信号是execution_success\r\n \r\n   if (data && data.prompt_id && data.node && data.output) {\r\n     const promptId = data.prompt_id\r\n     const nodeId = data.node\r\n \r\n-    console.log(`🎯 节点 ${nodeId} 返回UI更新，任务: ${promptId}`)\r\n-    console.log(`📋 UI输出:`, data.output)\r\n-\r\n     // 这里可以处理中间结果或UI更新，但不应该触发任务完成\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n       task.onProgress(80, `节点 ${nodeId} 完成`)\r\n     }\r\n-\r\n-    showWebSocketStatusNotification(`节点 ${nodeId} 处理完成`, 'info')\r\n-  } else {\r\n-    console.log('📋 收到executed消息，但格式不完整:', data)\r\n   }\r\n }\r\n \r\n // 处理执行错误消息\r\n"
                },
                {
                    "date": 1752467595699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -859,16 +859,12 @@\n // 处理执行开始消息\r\n function handleExecutionStartMessage(data) {\r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n-    console.log(`🚀 任务开始执行: ${promptId}`)\r\n-\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n       task.onProgress('开始执行', 5)\r\n     }\r\n-\r\n-    showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 开始执行`, 'info')\r\n   }\r\n }\r\n \r\n // 处理执行成功消息 - 这是关键的完成消息！\r\n"
                },
                {
                    "date": 1752467614182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -842,19 +842,10 @@\n }\r\n \r\n // 处理状态消息 - 队列状态变化\r\n function handleStatusMessage(data) {\r\n-  if (data && data.exec_info) {\r\n-    const queueRemaining = data.exec_info.queue_remaining || 0\r\n-    console.log(`📊 队列状态更新: 剩余任务=${queueRemaining}`)\r\n-\r\n-    // 显示队列状态通知\r\n-    if (queueRemaining === 0) {\r\n-      showWebSocketStatusNotification('队列已清空', 'info')\r\n-    } else {\r\n-      showWebSocketStatusNotification(`队列中还有 ${queueRemaining} 个任务`, 'info')\r\n-    }\r\n-  }\r\n+  // 队列状态消息，通常用于监控队列状态\r\n+  // 这里可以根据需要添加队列状态处理逻辑\r\n }\r\n \r\n // 处理执行开始消息\r\n function handleExecutionStartMessage(data) {\r\n"
                },
                {
                    "date": 1752467636639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -908,33 +908,25 @@\n // 处理执行中断消息\r\n function handleExecutionInterruptedMessage(data) {\r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n-    console.log(`⏸️ 任务执行被中断: ${promptId}`)\r\n-\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onError) {\r\n       task.onError('任务执行被中断')\r\n     }\r\n-\r\n     pendingTasks.delete(promptId)\r\n-    showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 被中断`, 'warning')\r\n   }\r\n }\r\n \r\n // 处理执行缓存消息\r\n function handleExecutionCachedMessage(data) {\r\n   if (data && data.prompt_id) {\r\n     const promptId = data.prompt_id\r\n     const cachedNodes = data.nodes || []\r\n-    console.log(`💾 任务使用缓存: ${promptId}, 缓存节点数: ${cachedNodes.length}`)\r\n-\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n       task.onProgress(`使用缓存 (${cachedNodes.length}个节点)`, 30)\r\n     }\r\n-\r\n-    showWebSocketStatusNotification(`使用缓存加速处理`, 'info')\r\n   }\r\n }\r\n \r\n // 处理进度消息 - 根据官方文档规范\r\n"
                },
                {
                    "date": 1752467665230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -994,22 +994,18 @@\n }\r\n \r\n // 等待任务完成 - 专注使用WebSocket机制\r\n async function waitForTaskCompletion(promptId, maxWaitTime = 300000, onProgress = null) {\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n-  console.log(`⏳ 开始等待任务完成: ${promptId}`)\r\n-  console.log('🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯🎯')\r\n+  console.log(`⏳ 等待任务完成: ${promptId}`)\r\n \r\n   // 确保WebSocket连接已建立\r\n-  console.log('🔌 确保WebSocket连接已建立...')\r\n   try {\r\n     const wsConnected = await initializeWebSocket()\r\n     if (!wsConnected) {\r\n       throw new Error('WebSocket连接失败')\r\n     }\r\n-    console.log('✅ WebSocket连接确认成功')\r\n   } catch (error) {\r\n-    console.error('❌❌❌ WebSocket连接失败，无法使用实时通信 ❌❌❌', error)\r\n+    console.error('❌ WebSocket连接失败:', error)\r\n     throw new Error(`WebSocket连接失败: ${error.message}`)\r\n   }\r\n \r\n   return new Promise((resolve, reject) => {\r\n"
                },
                {
                    "date": 1752467689611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1010,10 +1010,9 @@\n \r\n   return new Promise((resolve, reject) => {\r\n     // 设置超时\r\n     const timeout = setTimeout(() => {\r\n-      console.warn('⏰⏰⏰ 任务等待超时 ⏰⏰⏰')\r\n-      console.warn(`⏰ 任务 ${promptId} 等待超时 (${maxWaitTime/1000}秒)`)\r\n+      console.warn(`⏰ 任务 ${promptId} 等待超时`)\r\n       pendingTasks.delete(promptId)\r\n \r\n       // 显示超时通知\r\n       showWebSocketStatusNotification('任务处理超时', 'error')\r\n@@ -1024,32 +1023,25 @@\n     // 创建任务跟踪对象\r\n     const task = {\r\n       promptId,\r\n       onProgress: (progress, status) => {\r\n-        console.log(`📈 任务 ${promptId} 进度: ${progress}% (${status})`)\r\n         // 调用外部进度回调\r\n         if (onProgress) {\r\n           onProgress(`正在处理: ${status}`, progress)\r\n         }\r\n-\r\n-        // 显示进度通知\r\n-        showWebSocketStatusNotification(`处理进度: ${progress}%`, 'info')\r\n       },\r\n       onComplete: (result) => {\r\n         clearTimeout(timeout)\r\n-        console.log('🎉🎉🎉 任务完成回调被触发 🎉🎉🎉')\r\n-        console.log(`✅ 任务 ${promptId} 完成，结果:`, result)\r\n+        console.log(`✅ 任务 ${promptId} 完成`)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理完成', 100)\r\n         }\r\n \r\n-        console.log('🚀 正在返回处理结果...')\r\n         resolve(result)\r\n       },\r\n       onError: (error) => {\r\n         clearTimeout(timeout)\r\n-        console.error('❌❌❌ 任务错误回调被触发 ❌❌❌')\r\n         console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理失败', 0)\r\n"
                },
                {
                    "date": 1752467721565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1055,25 +1055,14 @@\n     }\r\n \r\n     // 注册任务到待处理列表\r\n     pendingTasks.set(promptId, task)\r\n-    console.log('📝📝📝 任务已注册到WebSocket监听列表 📝📝📝')\r\n-    console.log(`📝 任务ID: ${promptId}`)\r\n-    console.log(`📝 当前待处理任务列表:`, Array.from(pendingTasks.keys()))\r\n-    console.log(`📝 任务总数: ${pendingTasks.size}`)\r\n \r\n     // 确认WebSocket连接状态\r\n     if (isWsConnected && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n-      console.log('🔌🔌🔌 WebSocket连接状态良好，等待ComfyUI推送结果 🔌🔌🔌')\r\n-      console.log('📡 实时通信已启用，无需轮询')\r\n-\r\n-      // 显示等待通知\r\n-      showWebSocketStatusNotification(`正在等待任务 ${promptId.substring(0, 8)} 完成...`, 'info')\r\n+      console.log('📡 WebSocket已连接，等待任务完成')\r\n     } else {\r\n-      console.error('❌❌❌ WebSocket连接状态异常 ❌❌❌')\r\n-      console.error('连接状态:', wsConnection ? wsConnection.readyState : 'null')\r\n-      console.error('连接标志:', isWsConnected)\r\n-\r\n+      console.error('❌ WebSocket连接状态异常')\r\n       // 清理任务并拒绝\r\n       pendingTasks.delete(promptId)\r\n       clearTimeout(timeout)\r\n       reject(new Error('WebSocket连接状态异常，无法监听任务完成'))\r\n"
                },
                {
                    "date": 1752467771332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1075,78 +1075,64 @@\n \r\n // 主要的换衣API函数 - 两步流程\r\n async function processUndressImage(base64Image, onProgress = null) {\r\n   try {\r\n-    console.log('🚀🚀🚀 开始处理换衣请求 🚀🚀🚀')\r\n-    console.log('📱 前端进度回调函数:', onProgress ? '已提供' : '未提供')\r\n+    console.log('🚀 开始处理换衣请求')\r\n \r\n     // 预检查服务器状态\r\n-    console.log('🔍 预检查服务器状态...')\r\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n \r\n     const serverStatus = await checkComfyUIServerStatus()\r\n     if (serverStatus.status === 'error') {\r\n-      console.warn('⚠️ 当前服务器状态异常，触发重新评估...')\r\n+      console.warn('⚠️ 服务器状态异常，重新评估...')\r\n       // 强制重新评估服务器\r\n       await getApiBaseUrl(true)\r\n     }\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n-    console.log('💎 检查积分...')\r\n     if (onProgress) onProgress('正在检查积分...', 10)\r\n \r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n       throw new Error(`积分不足！当前积分: ${pointsStatus.current}，需要: ${pointsStatus.generationCost}`)\r\n     }\r\n \r\n-    console.log('📋 流程：第一步上传图片 → 第二步提交工作流')\r\n-\r\n     // 验证图片数据格式\r\n-    console.log('🔍 验证图片数据格式...')\r\n     if (onProgress) onProgress('正在验证图片格式...', 15)\r\n \r\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的图片数据格式')\r\n     }\r\n \r\n     // 第一步：上传图片到ComfyUI服务器\r\n-    console.log('📤 第一步：上传图片到 /api/upload/image')\r\n     if (onProgress) onProgress('正在上传图片到ComfyUI...', 20)\r\n \r\n     const uploadedImageName = await uploadImageToComfyUI(base64Image)\r\n-    console.log('✅ 第一步完成，获得文件名:', uploadedImageName)\r\n+    console.log('✅ 图片上传完成:', uploadedImageName)\r\n \r\n     // 创建工作流提示词，将上传的图片关联到节点49\r\n-    console.log('🔧 配置工作流，关联图片到节点49...')\r\n     if (onProgress) onProgress('正在配置工作流...', 30)\r\n \r\n     const workflowPrompt = createUndressWorkflowPrompt(uploadedImageName)\r\n \r\n     // 第二步：提交工作流\r\n-    console.log('🚀 第二步：提交工作流到 /api/prompt')\r\n     if (onProgress) onProgress('正在提交工作流到ComfyUI...', 40)\r\n \r\n     const promptId = await submitWorkflow(workflowPrompt)\r\n-    console.log('✅ 第二步完成，获得任务ID:', promptId)\r\n+    console.log('✅ 工作流提交完成，任务ID:', promptId)\r\n \r\n     // 等待任务完成 - 传递前端进度回调\r\n-    console.log('⏳ 等待ComfyUI处理任务...')\r\n     if (onProgress) onProgress('正在等待ComfyUI处理...', 50)\r\n \r\n     const taskResult = await waitForTaskCompletion(promptId, 300000, (status, progress) => {\r\n-      console.log(`📊📊📊 WebSocket进度更新 📊📊📊`)\r\n-      console.log(`任务进度: ${status} - ${progress}%`)\r\n-\r\n       // 将WebSocket进度传递给前端\r\n       if (onProgress) {\r\n         // 确保进度在50-95之间，为最后的图片获取留出空间\r\n         const adjustedProgress = Math.min(95, Math.max(50, 50 + (progress * 0.45)))\r\n-        console.log(`🔄 传递给前端的调整后进度: ${adjustedProgress}%`)\r\n         onProgress(status, adjustedProgress)\r\n       }\r\n     })\r\n-    console.log('✅✅✅ 任务处理完成 ✅✅✅')\r\n+    console.log('✅ 任务处理完成')\r\n \r\n     // 获取生成的图片\r\n     console.log('📥 获取生成的图片...')\r\n     if (onProgress) onProgress('正在获取处理结果...', 96)\r\n"
                },
                {
                    "date": 1752467797795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1133,22 +1133,19 @@\n     })\r\n     console.log('✅ 任务处理完成')\r\n \r\n     // 获取生成的图片\r\n-    console.log('📥 获取生成的图片...')\r\n     if (onProgress) onProgress('正在获取处理结果...', 96)\r\n \r\n     const resultImage = await getGeneratedImage(taskResult)\r\n-    console.log('🎉🎉🎉 换衣处理完全成功! 🎉🎉🎉')\r\n+    console.log('🎉 换衣处理成功!')\r\n \r\n     // 消耗积分（从等级卡扣除）\r\n-    console.log('💎 消耗积分...')\r\n     if (onProgress) onProgress('正在更新积分...', 98)\r\n \r\n     // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n     const imageViewUrl = getComfyUIImageUrl(resultImage)\r\n     const pointsResult = await levelCardPointsManager.consumePoints(20, '一键换衣', imageViewUrl)\r\n-    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     // 获取节点49的原图用于对比\r\n     let originalImage = null\r\n     try {\r\n@@ -1158,20 +1155,17 @@\n         type: 'input',\r\n         subfolder: ''\r\n       })\r\n       const config = getComfyUIConfig()\r\n-      const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+      const apiBaseUrl = await getApiBaseUrl()\r\n       originalImage = `${apiBaseUrl}/view?${params.toString()}`\r\n-      console.log('📷 获取节点49原图URL:', originalImage)\r\n     } catch (error) {\r\n-      console.warn('⚠️ 获取节点49原图失败，使用用户上传的图片:', error)\r\n+      console.warn('⚠️ 获取原图失败:', error)\r\n     }\r\n \r\n     // 最终完成\r\n     if (onProgress) onProgress('处理完成', 100)\r\n \r\n-    console.log('🎊🎊🎊 所有处理步骤完成，准备返回结果 🎊🎊🎊')\r\n-\r\n     return {\r\n       success: true,\r\n       resultImage: resultImage,\r\n       originalImage: originalImage, // 新增：节点49的原图\r\n"
                },
                {
                    "date": 1752468047385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1216,9 +1216,8 @@\n   try {\r\n     console.log('🚀 开始换脸处理')\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n-    console.log('💎 检查积分...')\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n       throw new Error(`积分不足！当前积分: ${pointsStatus.current}，需要: ${pointsStatus.generationCost}`)\r\n     }\r\n"
                },
                {
                    "date": 1752468076057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1279,25 +1279,20 @@\n     // 节点812: 处理结果输出（最新）\r\n \r\n     if (workflow['670']) {\r\n       workflow['670'].inputs.image = uploadedFacePhotos[0]\r\n-      console.log('✅ 节点670设置第一张人脸照片:', uploadedFacePhotos[0])\r\n     }\r\n     if (workflow['662']) {\r\n       workflow['662'].inputs.image = uploadedFacePhotos[1]\r\n-      console.log('✅ 节点662设置第二张人脸照片:', uploadedFacePhotos[1])\r\n     }\r\n     if (workflow['658']) {\r\n       workflow['658'].inputs.image = uploadedFacePhotos[2]\r\n-      console.log('✅ 节点658设置第三张人脸照片:', uploadedFacePhotos[2])\r\n     }\r\n     if (workflow['655']) {\r\n       workflow['655'].inputs.image = uploadedFacePhotos[3]\r\n-      console.log('✅ 节点655设置第四张人脸照片:', uploadedFacePhotos[3])\r\n     }\r\n     if (workflow['737']) {\r\n       workflow['737'].inputs.image = targetUploadedFilename\r\n-      console.log('✅ 节点737设置目标图片:', targetUploadedFilename)\r\n     }\r\n \r\n     if (onProgress) onProgress('正在提交换脸任务...', 80)\r\n \r\n"
                },
                {
                    "date": 1752468098945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1302,29 +1302,21 @@\n     if (onProgress) onProgress('正在处理换脸...', 85)\r\n \r\n     // 等待任务完成 - 换脸需要更长时间，设置10分钟超时\r\n     const maxWaitTime = 600000 // 10分钟\r\n-    console.log(`⏳ 开始等待换脸任务完成，任务ID: ${promptId}，最大等待时间: ${maxWaitTime/1000}秒`)\r\n \r\n     const taskResult = await waitForTaskCompletion(promptId, maxWaitTime, onProgress)\r\n-    console.log('✅ 换脸任务处理完成，结果:', taskResult)\r\n+    console.log('✅ 换脸任务处理完成')\r\n \r\n     if (onProgress) onProgress('正在获取处理结果...', 95)\r\n \r\n     // 获取结果图片\r\n-    // 根据最新工作流，最终结果应该在节点812的输出\r\n-    console.log('📥 开始获取换脸结果图片，查找节点812的输出...')\r\n-    console.log('🔍 任务结果结构:', JSON.stringify(taskResult, null, 2))\r\n-\r\n     const imageUrl = await getGeneratedImage(taskResult)\r\n-    console.log('🖼️ 成功获取换脸结果图片URL')\r\n \r\n     // 消耗积分（从等级卡扣除）\r\n-    console.log('💎 消耗积分...')\r\n     // 获取 ComfyUI 图片访问URL而不是 base64 数据\r\n     const imageViewUrl = getComfyUIImageUrl(imageUrl)\r\n     const pointsResult = await levelCardPointsManager.consumePoints(20, '极速换脸', imageViewUrl)\r\n-    console.log(`✅ 已消耗 ${pointsResult.consumed} 积分，剩余: ${pointsResult.remaining}`)\r\n \r\n     if (onProgress) onProgress('换脸完成！', 100)\r\n \r\n     console.log('✅ 换脸处理完成')\r\n"
                },
                {
                    "date": 1752468993701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -740,13 +740,63 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n+          // 检查消息数据是否为空或无效\r\n+          if (!event.data || typeof event.data !== 'string') {\r\n+            console.warn('⚠️ 收到空或无效的WebSocket消息')\r\n+            return\r\n+          }\r\n+\r\n+          // 检查是否是纯文本消息（非JSON）\r\n+          const rawData = event.data.trim()\r\n+          if (rawData.length === 0) {\r\n+            console.warn('⚠️ 收到空的WebSocket消息')\r\n+            return\r\n+          }\r\n+\r\n+          // 检查是否是心跳或状态消息\r\n+          if (rawData === 'ping' || rawData === 'pong' || rawData === 'heartbeat') {\r\n+            // 心跳消息，不需要处理\r\n+            return\r\n+          }\r\n+\r\n           let message;\r\n           try {\r\n-            message = JSON.parse(event.data)\r\n+            message = JSON.parse(rawData)\r\n           } catch (parseError) {\r\n             console.error('❌ WebSocket消息解析失败:', parseError)\r\n+            console.error('原始消息内容:', rawData.substring(0, 200) + (rawData.length > 200 ? '...' : ''))\r\n+            console.error('消息长度:', rawData.length)\r\n+            console.error('消息开头字符:', rawData.charCodeAt(0), rawData.charAt(0))\r\n+\r\n+            // 尝试修复常见的JSON格式问题\r\n+            let fixedData = rawData;\r\n+\r\n+            // 移除可能的BOM或特殊字符\r\n+            if (rawData.charCodeAt(0) === 0xFEFF) {\r\n+              fixedData = rawData.substring(1)\r\n+            }\r\n+\r\n+            // 移除开头的非JSON字符\r\n+            const jsonStart = fixedData.indexOf('{')\r\n+            if (jsonStart > 0) {\r\n+              fixedData = fixedData.substring(jsonStart)\r\n+            }\r\n+\r\n+            // 尝试再次解析\r\n+            try {\r\n+              message = JSON.parse(fixedData)\r\n+              console.log('✅ 修复后的消息解析成功')\r\n+            } catch (secondParseError) {\r\n+              console.error('❌ 修复后仍无法解析消息，跳过此消息')\r\n+              return\r\n+            }\r\n+          }\r\n+\r\n+          // 验证消息对象\r\n+          if (!message || typeof message !== 'object') {\r\n+            console.warn('⚠️ 解析后的消息不是有效对象:', message)\r\n             return\r\n           }\r\n \r\n           // 检查消息格式并标准化\r\n@@ -760,9 +810,9 @@\n               normalizedMessage = {\r\n                 type: 'executed',\r\n                 data: message\r\n               }\r\n-            } else if (message.prompt_id && message.node) {\r\n+            } else if (message.prompt_id && message.node !== undefined) {\r\n               normalizedMessage = {\r\n                 type: 'executing',\r\n                 data: message\r\n               }\r\n@@ -770,14 +820,20 @@\n               normalizedMessage = {\r\n                 type: 'progress',\r\n                 data: message\r\n               }\r\n+            } else if (message.prompt_id && message.timestamp) {\r\n+              normalizedMessage = {\r\n+                type: 'execution_success',\r\n+                data: message\r\n+              }\r\n             }\r\n           }\r\n \r\n           handleWebSocketMessage(normalizedMessage)\r\n         } catch (error) {\r\n           console.error('❌ 处理WebSocket消息失败:', error)\r\n+          console.error('错误堆栈:', error.stack)\r\n         }\r\n       }\r\n     })\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1752469037973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -716,17 +716,42 @@\n \r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n \r\n-        // 尝试重新连接\r\n+        // 检查是否有待处理的任务\r\n+        const hasPendingTasks = pendingTasks.size > 0\r\n+        if (hasPendingTasks) {\r\n+          console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n+          showWebSocketStatusNotification(`连接断开，有 ${pendingTasks.size} 个任务待处理`, 'warning')\r\n+        }\r\n+\r\n+        // 智能重连策略\r\n         if (!wsReconnectTimer) {\r\n-          wsReconnectTimer = setTimeout(() => {\r\n+          // 如果有待处理任务，立即重连；否则延迟重连\r\n+          const reconnectDelay = hasPendingTasks ? 1000 : 5000\r\n+\r\n+          wsReconnectTimer = setTimeout(async () => {\r\n             wsReconnectTimer = null\r\n             console.log('🔄 尝试重新连接 ComfyUI WebSocket...')\r\n-            initializeWebSocket().catch(error => {\r\n+\r\n+            try {\r\n+              await initializeWebSocket()\r\n+\r\n+              // 重连成功后，检查待处理任务的状态\r\n+              if (hasPendingTasks) {\r\n+                console.log('🔍 重连成功，检查待处理任务状态...')\r\n+                await checkPendingTasksStatus()\r\n+              }\r\n+            } catch (error) {\r\n               console.error('❌ WebSocket 重连失败:', error)\r\n-            })\r\n-          }, 5000)\r\n+\r\n+              // 如果有待处理任务但重连失败，尝试通过HTTP轮询检查状态\r\n+              if (hasPendingTasks) {\r\n+                console.log('🔄 WebSocket重连失败，尝试HTTP轮询检查任务状态...')\r\n+                await fallbackToHttpPolling()\r\n+              }\r\n+            }\r\n+          }, reconnectDelay)\r\n         }\r\n       }\r\n \r\n       wsConnection.onerror = (error) => {\r\n"
                },
                {
                    "date": 1752469065495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -866,8 +866,100 @@\n     throw error\r\n   }\r\n }\r\n \r\n+// 检查待处理任务状态\r\n+async function checkPendingTasksStatus() {\r\n+  const taskIds = Array.from(pendingTasks.keys())\r\n+  console.log(`🔍 检查 ${taskIds.length} 个待处理任务的状态...`)\r\n+\r\n+  for (const promptId of taskIds) {\r\n+    try {\r\n+      const result = await checkTaskStatus(promptId)\r\n+\r\n+      if (result && result.status && result.status.completed) {\r\n+        console.log(`✅ 发现任务 ${promptId} 已完成，触发回调`)\r\n+\r\n+        const task = pendingTasks.get(promptId)\r\n+        if (task && task.onComplete) {\r\n+          task.onComplete(result)\r\n+          pendingTasks.delete(promptId)\r\n+          showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 已完成`, 'success')\r\n+        }\r\n+      } else if (result && result.status && result.status.status_str === 'error') {\r\n+        console.error(`❌ 发现任务 ${promptId} 执行失败`)\r\n+\r\n+        const task = pendingTasks.get(promptId)\r\n+        if (task && task.onError) {\r\n+          task.onError('任务执行失败')\r\n+          pendingTasks.delete(promptId)\r\n+          showWebSocketStatusNotification(`任务 ${promptId.substring(0, 8)} 执行失败`, 'error')\r\n+        }\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(`❌ 检查任务 ${promptId} 状态失败:`, error)\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+// HTTP轮询备用机制\r\n+async function fallbackToHttpPolling() {\r\n+  const taskIds = Array.from(pendingTasks.keys())\r\n+  if (taskIds.length === 0) {\r\n+    return\r\n+  }\r\n+\r\n+  console.log(`🔄 启动HTTP轮询备用机制，监控 ${taskIds.length} 个任务...`)\r\n+  showWebSocketStatusNotification('使用HTTP轮询监控任务状态', 'info')\r\n+\r\n+  const pollInterval = setInterval(async () => {\r\n+    try {\r\n+      // 如果WebSocket重新连接成功，停止轮询\r\n+      if (isWsConnected) {\r\n+        console.log('✅ WebSocket已重连，停止HTTP轮询')\r\n+        clearInterval(pollInterval)\r\n+        return\r\n+      }\r\n+\r\n+      // 检查剩余任务\r\n+      const remainingTasks = Array.from(pendingTasks.keys())\r\n+      if (remainingTasks.length === 0) {\r\n+        console.log('✅ 所有任务已完成，停止HTTP轮询')\r\n+        clearInterval(pollInterval)\r\n+        return\r\n+      }\r\n+\r\n+      // 检查每个任务的状态\r\n+      for (const promptId of remainingTasks) {\r\n+        try {\r\n+          const result = await checkTaskStatus(promptId)\r\n+\r\n+          if (result && result.status && result.status.completed) {\r\n+            console.log(`✅ HTTP轮询发现任务 ${promptId} 已完成`)\r\n+\r\n+            const task = pendingTasks.get(promptId)\r\n+            if (task && task.onComplete) {\r\n+              task.onComplete(result)\r\n+              pendingTasks.delete(promptId)\r\n+              showWebSocketStatusNotification(`任务完成 (HTTP轮询)`, 'success')\r\n+            }\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(`❌ HTTP轮询检查任务 ${promptId} 失败:`, error)\r\n+        }\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('❌ HTTP轮询过程中出错:', error)\r\n+    }\r\n+  }, 3000) // 每3秒检查一次\r\n+\r\n+  // 设置轮询超时（5分钟后停止）\r\n+  setTimeout(() => {\r\n+    clearInterval(pollInterval)\r\n+    console.log('⏰ HTTP轮询超时，停止轮询')\r\n+  }, 300000)\r\n+}\r\n+\r\n // 处理 WebSocket 消息 - 根据ComfyUI官方文档规范\r\n function handleWebSocketMessage(message) {\r\n   try {\r\n     const { type, data } = message\r\n"
                },
                {
                    "date": 1752469115578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1181,16 +1181,41 @@\n     throw new Error(`WebSocket连接失败: ${error.message}`)\r\n   }\r\n \r\n   return new Promise((resolve, reject) => {\r\n+    let isResolved = false\r\n+    let wsCheckInterval = null\r\n+\r\n     // 设置超时\r\n-    const timeout = setTimeout(() => {\r\n-      console.warn(`⏰ 任务 ${promptId} 等待超时`)\r\n+    const timeout = setTimeout(async () => {\r\n+      if (isResolved) return\r\n+\r\n+      console.warn(`⏰ 任务 ${promptId} 等待超时，尝试最后检查...`)\r\n+\r\n+      // 超时前最后尝试检查任务状态\r\n+      try {\r\n+        const result = await checkTaskStatus(promptId)\r\n+        if (result && result.status && result.status.completed) {\r\n+          console.log(`✅ 超时检查发现任务 ${promptId} 已完成`)\r\n+          isResolved = true\r\n+          clearInterval(wsCheckInterval)\r\n+          pendingTasks.delete(promptId)\r\n+\r\n+          if (onProgress) {\r\n+            onProgress('处理完成', 100)\r\n+          }\r\n+\r\n+          resolve(result)\r\n+          return\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('❌ 超时检查任务状态失败:', error)\r\n+      }\r\n+\r\n+      // 确实超时\r\n       pendingTasks.delete(promptId)\r\n-\r\n-      // 显示超时通知\r\n+      clearInterval(wsCheckInterval)\r\n       showWebSocketStatusNotification('任务处理超时', 'error')\r\n-\r\n       reject(new Error(`任务 ${promptId} 执行超时`))\r\n     }, maxWaitTime)\r\n \r\n     // 创建任务跟踪对象\r\n@@ -1202,9 +1227,13 @@\n           onProgress(`正在处理: ${status}`, progress)\r\n         }\r\n       },\r\n       onComplete: (result) => {\r\n+        if (isResolved) return\r\n+        isResolved = true\r\n+\r\n         clearTimeout(timeout)\r\n+        clearInterval(wsCheckInterval)\r\n         console.log(`✅ 任务 ${promptId} 完成`)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理完成', 100)\r\n@@ -1212,9 +1241,13 @@\n \r\n         resolve(result)\r\n       },\r\n       onError: (error) => {\r\n+        if (isResolved) return\r\n+        isResolved = true\r\n+\r\n         clearTimeout(timeout)\r\n+        clearInterval(wsCheckInterval)\r\n         console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理失败', 0)\r\n@@ -1226,8 +1259,34 @@\n         reject(new Error(error))\r\n       }\r\n     }\r\n \r\n+    // WebSocket连接监控\r\n+    wsCheckInterval = setInterval(async () => {\r\n+      if (isResolved) {\r\n+        clearInterval(wsCheckInterval)\r\n+        return\r\n+      }\r\n+\r\n+      // 检查WebSocket连接状态\r\n+      if (!isWsConnected || !wsConnection || wsConnection.readyState !== WebSocket.OPEN) {\r\n+        console.warn(`⚠️ 检测到WebSocket断开，任务 ${promptId} 切换到HTTP轮询模式`)\r\n+\r\n+        try {\r\n+          const result = await checkTaskStatus(promptId)\r\n+          if (result && result.status && result.status.completed) {\r\n+            console.log(`✅ HTTP轮询发现任务 ${promptId} 已完成`)\r\n+            task.onComplete(result)\r\n+          } else if (result && result.status && result.status.status_str === 'error') {\r\n+            console.error(`❌ HTTP轮询发现任务 ${promptId} 执行失败`)\r\n+            task.onError('任务执行失败')\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(`❌ HTTP轮询检查任务 ${promptId} 失败:`, error)\r\n+        }\r\n+      }\r\n+    }, 5000) // 每5秒检查一次\r\n+\r\n     // 注册任务到待处理列表\r\n     pendingTasks.set(promptId, task)\r\n \r\n     // 确认WebSocket连接状态\r\n"
                },
                {
                    "date": 1752469183553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -617,8 +617,12 @@\n let wsReconnectTimer = null\r\n let isWsConnected = false\r\n let wsMessageHandlers = new Map()\r\n let pendingTasks = new Map()\r\n+let wsHealthCheckTimer = null\r\n+let lastMessageTime = Date.now()\r\n+let connectionAttempts = 0\r\n+let maxConnectionAttempts = 5\r\n \r\n // 前端通知函数\r\n function showWebSocketStatusNotification(message, type = 'info') {\r\n   try {\r\n"
                },
                {
                    "date": 1752469201226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -769,8 +769,11 @@\n       }\r\n \r\n       wsConnection.onmessage = (event) => {\r\n         try {\r\n+          // 更新最后消息时间\r\n+          lastMessageTime = Date.now()\r\n+\r\n           // 检查消息数据是否为空或无效\r\n           if (!event.data || typeof event.data !== 'string') {\r\n             console.warn('⚠️ 收到空或无效的WebSocket消息')\r\n             return\r\n"
                },
                {
                    "date": 1752469229141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -703,11 +703,16 @@\n \r\n       wsConnection.onopen = () => {\r\n         console.log('✅ ComfyUI WebSocket 连接成功')\r\n         isWsConnected = true\r\n+        connectionAttempts = 0 // 重置连接尝试次数\r\n+        lastMessageTime = Date.now() // 重置最后消息时间\r\n         clearTimeout(timeout)\r\n         clearTimeout(wsReconnectTimer)\r\n \r\n+        // 启动健康检查\r\n+        startWebSocketHealthCheck()\r\n+\r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接成功', 'success')\r\n \r\n         resolve(true)\r\n"
                },
                {
                    "date": 1752469245963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -722,8 +722,11 @@\n         console.log(`🔌 ComfyUI WebSocket 连接关闭: 代码=${event.code}, 原因=${event.reason}`)\r\n         isWsConnected = false\r\n         clearTimeout(timeout)\r\n \r\n+        // 停止健康检查\r\n+        stopWebSocketHealthCheck()\r\n+\r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n \r\n         // 检查是否有待处理的任务\r\n"
                },
                {
                    "date": 1752469266784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -881,8 +881,53 @@\n     throw error\r\n   }\r\n }\r\n \r\n+// WebSocket健康检查\r\n+function startWebSocketHealthCheck() {\r\n+  // 清除现有的健康检查\r\n+  stopWebSocketHealthCheck()\r\n+\r\n+  wsHealthCheckTimer = setInterval(() => {\r\n+    const now = Date.now()\r\n+    const timeSinceLastMessage = now - lastMessageTime\r\n+\r\n+    // 如果超过30秒没有收到消息，认为连接可能有问题\r\n+    if (timeSinceLastMessage > 30000) {\r\n+      console.warn(`⚠️ WebSocket健康检查：${timeSinceLastMessage/1000}秒未收到消息`)\r\n+\r\n+      // 检查连接状态\r\n+      if (wsConnection && wsConnection.readyState !== WebSocket.OPEN) {\r\n+        console.warn('⚠️ WebSocket连接状态异常，尝试重连')\r\n+        isWsConnected = false\r\n+\r\n+        // 如果有待处理任务，立即尝试重连\r\n+        if (pendingTasks.size > 0) {\r\n+          console.log('🔄 检测到待处理任务，立即重连WebSocket')\r\n+          initializeWebSocket().catch(error => {\r\n+            console.error('❌ 健康检查重连失败:', error)\r\n+            // 启动HTTP轮询备用机制\r\n+            fallbackToHttpPolling()\r\n+          })\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    // 如果超过60秒没有收到消息且有待处理任务，启动HTTP轮询\r\n+    if (timeSinceLastMessage > 60000 && pendingTasks.size > 0) {\r\n+      console.warn('⚠️ WebSocket长时间无响应，启动HTTP轮询备用机制')\r\n+      fallbackToHttpPolling()\r\n+    }\r\n+  }, 10000) // 每10秒检查一次\r\n+}\r\n+\r\n+function stopWebSocketHealthCheck() {\r\n+  if (wsHealthCheckTimer) {\r\n+    clearInterval(wsHealthCheckTimer)\r\n+    wsHealthCheckTimer = null\r\n+  }\r\n+}\r\n+\r\n // 检查待处理任务状态\r\n async function checkPendingTasksStatus() {\r\n   const taskIds = Array.from(pendingTasks.keys())\r\n   console.log(`🔍 检查 ${taskIds.length} 个待处理任务的状态...`)\r\n"
                },
                {
                    "date": 1752469294497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -737,15 +737,34 @@\n         }\r\n \r\n         // 智能重连策略\r\n         if (!wsReconnectTimer) {\r\n-          // 如果有待处理任务，立即重连；否则延迟重连\r\n-          const reconnectDelay = hasPendingTasks ? 1000 : 5000\r\n+          connectionAttempts++\r\n \r\n+          // 指数退避策略：基础延迟 * 2^尝试次数，最大30秒\r\n+          const baseDelay = hasPendingTasks ? 1000 : 5000\r\n+          const exponentialDelay = Math.min(baseDelay * Math.pow(2, connectionAttempts - 1), 30000)\r\n+\r\n+          console.log(`🔄 计划重连 (尝试 ${connectionAttempts}/${maxConnectionAttempts})，延迟 ${exponentialDelay/1000}秒`)\r\n+\r\n           wsReconnectTimer = setTimeout(async () => {\r\n             wsReconnectTimer = null\r\n-            console.log('🔄 尝试重新连接 ComfyUI WebSocket...')\r\n \r\n+            // 如果超过最大重连次数，停止自动重连\r\n+            if (connectionAttempts > maxConnectionAttempts) {\r\n+              console.error(`❌ 已达到最大重连次数 (${maxConnectionAttempts})，停止自动重连`)\r\n+              showWebSocketStatusNotification('WebSocket重连失败，请手动刷新页面', 'error')\r\n+\r\n+              // 如果有待处理任务，启动HTTP轮询\r\n+              if (hasPendingTasks) {\r\n+                console.log('🔄 启动HTTP轮询作为最后备用方案')\r\n+                await fallbackToHttpPolling()\r\n+              }\r\n+              return\r\n+            }\r\n+\r\n+            console.log(`🔄 尝试重新连接 ComfyUI WebSocket (${connectionAttempts}/${maxConnectionAttempts})...`)\r\n+\r\n             try {\r\n               await initializeWebSocket()\r\n \r\n               // 重连成功后，检查待处理任务的状态\r\n@@ -753,17 +772,17 @@\n                 console.log('🔍 重连成功，检查待处理任务状态...')\r\n                 await checkPendingTasksStatus()\r\n               }\r\n             } catch (error) {\r\n-              console.error('❌ WebSocket 重连失败:', error)\r\n+              console.error(`❌ WebSocket 重连失败 (${connectionAttempts}/${maxConnectionAttempts}):`, error)\r\n \r\n               // 如果有待处理任务但重连失败，尝试通过HTTP轮询检查状态\r\n               if (hasPendingTasks) {\r\n                 console.log('🔄 WebSocket重连失败，尝试HTTP轮询检查任务状态...')\r\n                 await fallbackToHttpPolling()\r\n               }\r\n             }\r\n-          }, reconnectDelay)\r\n+          }, exponentialDelay)\r\n         }\r\n       }\r\n \r\n       wsConnection.onerror = (error) => {\r\n"
                },
                {
                    "date": 1752469627509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -725,16 +725,43 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n-        // 显示前端通知\r\n-        showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n-\r\n         // 检查是否有待处理的任务\r\n         const hasPendingTasks = pendingTasks.size > 0\r\n-        if (hasPendingTasks) {\r\n-          console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n-          showWebSocketStatusNotification(`连接断开，有 ${pendingTasks.size} 个任务待处理`, 'warning')\r\n+\r\n+        // 分析关闭原因\r\n+        const isAbnormalClose = event.code === 1006 || event.code === 1011 || event.code === 1012\r\n+        const isNormalClose = event.code === 1000 || event.code === 1001\r\n+\r\n+        if (isAbnormalClose && hasPendingTasks) {\r\n+          // 异常关闭且有待处理任务 - 立即检查任务状态\r\n+          console.warn(`⚠️ WebSocket异常关闭 (代码${event.code})，有 ${pendingTasks.size} 个待处理任务`)\r\n+          console.log('🔍 立即检查待处理任务状态...')\r\n+\r\n+          // 立即检查任务状态，可能任务已经完成\r\n+          setTimeout(async () => {\r\n+            await checkPendingTasksStatus()\r\n+          }, 100)\r\n+\r\n+          showWebSocketStatusNotification(`连接异常断开，正在检查任务状态...`, 'warning')\r\n+        } else if (isNormalClose) {\r\n+          // 正常关闭 - 可能是服务器完成处理后主动关闭\r\n+          console.log('✅ WebSocket正常关闭')\r\n+          if (hasPendingTasks) {\r\n+            console.log('🔍 正常关闭但有待处理任务，检查状态...')\r\n+            setTimeout(async () => {\r\n+              await checkPendingTasksStatus()\r\n+            }, 100)\r\n+          }\r\n+          showWebSocketStatusNotification('WebSocket连接已关闭', 'info')\r\n+        } else {\r\n+          // 其他情况\r\n+          showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n+          if (hasPendingTasks) {\r\n+            console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n+            showWebSocketStatusNotification(`连接断开，有 ${pendingTasks.size} 个任务待处理`, 'warning')\r\n+          }\r\n         }\r\n \r\n         // 智能重连策略\r\n         if (!wsReconnectTimer) {\r\n"
                },
                {
                    "date": 1752469681660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -764,12 +764,35 @@\n         }\r\n \r\n         // 智能重连策略\r\n         if (!wsReconnectTimer) {\r\n+          // 对于正常关闭且无待处理任务，不需要重连\r\n+          if (isNormalClose && !hasPendingTasks) {\r\n+            console.log('✅ 正常关闭且无待处理任务，不需要重连')\r\n+            return\r\n+          }\r\n+\r\n+          // 对于异常关闭，优先检查任务状态而不是立即重连\r\n+          if (isAbnormalClose && hasPendingTasks) {\r\n+            console.log('🔍 异常关闭，延迟重连以便先检查任务状态')\r\n+            // 给任务状态检查一些时间\r\n+            setTimeout(() => {\r\n+              if (pendingTasks.size > 0) {\r\n+                // 如果还有待处理任务，再考虑重连\r\n+                startReconnectProcess()\r\n+              }\r\n+            }, 2000)\r\n+            return\r\n+          }\r\n+\r\n+          startReconnectProcess()\r\n+        }\r\n+\r\n+        function startReconnectProcess() {\r\n           connectionAttempts++\r\n \r\n           // 指数退避策略：基础延迟 * 2^尝试次数，最大30秒\r\n-          const baseDelay = hasPendingTasks ? 1000 : 5000\r\n+          const baseDelay = pendingTasks.size > 0 ? 1000 : 5000\r\n           const exponentialDelay = Math.min(baseDelay * Math.pow(2, connectionAttempts - 1), 30000)\r\n \r\n           console.log(`🔄 计划重连 (尝试 ${connectionAttempts}/${maxConnectionAttempts})，延迟 ${exponentialDelay/1000}秒`)\r\n \r\n@@ -781,9 +804,9 @@\n               console.error(`❌ 已达到最大重连次数 (${maxConnectionAttempts})，停止自动重连`)\r\n               showWebSocketStatusNotification('WebSocket重连失败，请手动刷新页面', 'error')\r\n \r\n               // 如果有待处理任务，启动HTTP轮询\r\n-              if (hasPendingTasks) {\r\n+              if (pendingTasks.size > 0) {\r\n                 console.log('🔄 启动HTTP轮询作为最后备用方案')\r\n                 await fallbackToHttpPolling()\r\n               }\r\n               return\r\n@@ -794,17 +817,17 @@\n             try {\r\n               await initializeWebSocket()\r\n \r\n               // 重连成功后，检查待处理任务的状态\r\n-              if (hasPendingTasks) {\r\n+              if (pendingTasks.size > 0) {\r\n                 console.log('🔍 重连成功，检查待处理任务状态...')\r\n                 await checkPendingTasksStatus()\r\n               }\r\n             } catch (error) {\r\n               console.error(`❌ WebSocket 重连失败 (${connectionAttempts}/${maxConnectionAttempts}):`, error)\r\n \r\n               // 如果有待处理任务但重连失败，尝试通过HTTP轮询检查状态\r\n-              if (hasPendingTasks) {\r\n+              if (pendingTasks.size > 0) {\r\n                 console.log('🔄 WebSocket重连失败，尝试HTTP轮询检查任务状态...')\r\n                 await fallbackToHttpPolling()\r\n               }\r\n             }\r\n"
                },
                {
                    "date": 1752469704412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -725,74 +725,24 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n+        // 显示前端通知\r\n+        showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n+\r\n         // 检查是否有待处理的任务\r\n         const hasPendingTasks = pendingTasks.size > 0\r\n-\r\n-        // 分析关闭原因\r\n-        const isAbnormalClose = event.code === 1006 || event.code === 1011 || event.code === 1012\r\n-        const isNormalClose = event.code === 1000 || event.code === 1001\r\n-\r\n-        if (isAbnormalClose && hasPendingTasks) {\r\n-          // 异常关闭且有待处理任务 - 立即检查任务状态\r\n-          console.warn(`⚠️ WebSocket异常关闭 (代码${event.code})，有 ${pendingTasks.size} 个待处理任务`)\r\n-          console.log('🔍 立即检查待处理任务状态...')\r\n-\r\n-          // 立即检查任务状态，可能任务已经完成\r\n-          setTimeout(async () => {\r\n-            await checkPendingTasksStatus()\r\n-          }, 100)\r\n-\r\n-          showWebSocketStatusNotification(`连接异常断开，正在检查任务状态...`, 'warning')\r\n-        } else if (isNormalClose) {\r\n-          // 正常关闭 - 可能是服务器完成处理后主动关闭\r\n-          console.log('✅ WebSocket正常关闭')\r\n-          if (hasPendingTasks) {\r\n-            console.log('🔍 正常关闭但有待处理任务，检查状态...')\r\n-            setTimeout(async () => {\r\n-              await checkPendingTasksStatus()\r\n-            }, 100)\r\n-          }\r\n-          showWebSocketStatusNotification('WebSocket连接已关闭', 'info')\r\n-        } else {\r\n-          // 其他情况\r\n-          showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n-          if (hasPendingTasks) {\r\n-            console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n-            showWebSocketStatusNotification(`连接断开，有 ${pendingTasks.size} 个任务待处理`, 'warning')\r\n-          }\r\n+        if (hasPendingTasks) {\r\n+          console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n+          showWebSocketStatusNotification(`连接断开，有 ${pendingTasks.size} 个任务待处理`, 'warning')\r\n         }\r\n \r\n         // 智能重连策略\r\n         if (!wsReconnectTimer) {\r\n-          // 对于正常关闭且无待处理任务，不需要重连\r\n-          if (isNormalClose && !hasPendingTasks) {\r\n-            console.log('✅ 正常关闭且无待处理任务，不需要重连')\r\n-            return\r\n-          }\r\n-\r\n-          // 对于异常关闭，优先检查任务状态而不是立即重连\r\n-          if (isAbnormalClose && hasPendingTasks) {\r\n-            console.log('🔍 异常关闭，延迟重连以便先检查任务状态')\r\n-            // 给任务状态检查一些时间\r\n-            setTimeout(() => {\r\n-              if (pendingTasks.size > 0) {\r\n-                // 如果还有待处理任务，再考虑重连\r\n-                startReconnectProcess()\r\n-              }\r\n-            }, 2000)\r\n-            return\r\n-          }\r\n-\r\n-          startReconnectProcess()\r\n-        }\r\n-\r\n-        function startReconnectProcess() {\r\n           connectionAttempts++\r\n \r\n           // 指数退避策略：基础延迟 * 2^尝试次数，最大30秒\r\n-          const baseDelay = pendingTasks.size > 0 ? 1000 : 5000\r\n+          const baseDelay = hasPendingTasks ? 1000 : 5000\r\n           const exponentialDelay = Math.min(baseDelay * Math.pow(2, connectionAttempts - 1), 30000)\r\n \r\n           console.log(`🔄 计划重连 (尝试 ${connectionAttempts}/${maxConnectionAttempts})，延迟 ${exponentialDelay/1000}秒`)\r\n \r\n@@ -804,9 +754,9 @@\n               console.error(`❌ 已达到最大重连次数 (${maxConnectionAttempts})，停止自动重连`)\r\n               showWebSocketStatusNotification('WebSocket重连失败，请手动刷新页面', 'error')\r\n \r\n               // 如果有待处理任务，启动HTTP轮询\r\n-              if (pendingTasks.size > 0) {\r\n+              if (hasPendingTasks) {\r\n                 console.log('🔄 启动HTTP轮询作为最后备用方案')\r\n                 await fallbackToHttpPolling()\r\n               }\r\n               return\r\n@@ -817,17 +767,17 @@\n             try {\r\n               await initializeWebSocket()\r\n \r\n               // 重连成功后，检查待处理任务的状态\r\n-              if (pendingTasks.size > 0) {\r\n+              if (hasPendingTasks) {\r\n                 console.log('🔍 重连成功，检查待处理任务状态...')\r\n                 await checkPendingTasksStatus()\r\n               }\r\n             } catch (error) {\r\n               console.error(`❌ WebSocket 重连失败 (${connectionAttempts}/${maxConnectionAttempts}):`, error)\r\n \r\n               // 如果有待处理任务但重连失败，尝试通过HTTP轮询检查状态\r\n-              if (pendingTasks.size > 0) {\r\n+              if (hasPendingTasks) {\r\n                 console.log('🔄 WebSocket重连失败，尝试HTTP轮询检查任务状态...')\r\n                 await fallbackToHttpPolling()\r\n               }\r\n             }\r\n"
                },
                {
                    "date": 1752469788529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -621,8 +621,9 @@\n let wsHealthCheckTimer = null\r\n let lastMessageTime = Date.now()\r\n let connectionAttempts = 0\r\n let maxConnectionAttempts = 5\r\n+let currentWebSocketServer = null // 记录当前WebSocket连接的服务器\r\n \r\n // 前端通知函数\r\n function showWebSocketStatusNotification(message, type = 'info') {\r\n   try {\r\n"
                },
                {
                    "date": 1752469812891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -659,18 +659,41 @@\n \r\n \r\n \r\n // 初始化 WebSocket 连接\r\n-async function initializeWebSocket() {\r\n+async function initializeWebSocket(forceNewConnection = false) {\r\n   try {\r\n-    if (wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n-      console.log('🎯 WebSocket 已连接，无需重新初始化')\r\n-      return true\r\n+    // 检查是否需要重新连接\r\n+    if (!forceNewConnection && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n+      // 检查当前连接的服务器是否仍然是最优选择\r\n+      const currentOptimalServer = await getApiBaseUrl()\r\n+      if (currentWebSocketServer === currentOptimalServer) {\r\n+        console.log('🎯 WebSocket 已连接到最优服务器，无需重新初始化')\r\n+        return true\r\n+      } else {\r\n+        console.log(`🔄 最优服务器已变更 (${currentWebSocketServer} → ${currentOptimalServer})，重新连接WebSocket`)\r\n+        // 关闭当前连接\r\n+        if (wsConnection) {\r\n+          wsConnection.close()\r\n+        }\r\n+      }\r\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n+\r\n+    // 为WebSocket连接锁定服务器，避免在连接过程中切换\r\n+    console.log('🔒 为WebSocket连接锁定服务器选择...')\r\n     const baseUrl = await getApiBaseUrl()\r\n+    currentWebSocketServer = baseUrl\r\n \r\n+    // 通知负载均衡器锁定当前服务器用于WebSocket\r\n+    try {\r\n+      await loadBalancer.lockServer(baseUrl)\r\n+      console.log(`🔒 已锁定服务器用于WebSocket: ${baseUrl}`)\r\n+    } catch (error) {\r\n+      console.warn('⚠️ 无法锁定服务器，继续使用当前选择:', error)\r\n+    }\r\n+\r\n     // 确保使用正确的WebSocket URL格式\r\n     let wsUrl\r\n     if (baseUrl.startsWith('https://')) {\r\n       wsUrl = baseUrl.replace('https://', 'wss://') + '/ws?clientId=' + config.CLIENT_ID\r\n"
                },
                {
                    "date": 1752469835354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -749,11 +749,48 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n+        // 释放服务器锁定\r\n+        if (currentWebSocketServer) {\r\n+          try {\r\n+            loadBalancer.unlockServer()\r\n+            console.log(`🔓 已释放WebSocket服务器锁定: ${currentWebSocketServer}`)\r\n+          } catch (error) {\r\n+            console.warn('⚠️ 释放服务器锁定失败:', error)\r\n+          }\r\n+          currentWebSocketServer = null\r\n+        }\r\n+\r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n \r\n+        // 分析关闭原因\r\n+        let closeReason = '未知原因'\r\n+        switch (event.code) {\r\n+          case 1000:\r\n+            closeReason = '正常关闭'\r\n+            break\r\n+          case 1001:\r\n+            closeReason = '端点离开'\r\n+            break\r\n+          case 1002:\r\n+            closeReason = '协议错误'\r\n+            break\r\n+          case 1003:\r\n+            closeReason = '不支持的数据类型'\r\n+            break\r\n+          case 1006:\r\n+            closeReason = '连接异常关闭（可能是网络问题或服务器切换）'\r\n+            break\r\n+          case 1011:\r\n+            closeReason = '服务器错误'\r\n+            break\r\n+          default:\r\n+            closeReason = `错误代码 ${event.code}`\r\n+        }\r\n+        console.log(`📋 WebSocket关闭原因: ${closeReason}`)\r\n+\r\n         // 检查是否有待处理的任务\r\n         const hasPendingTasks = pendingTasks.size > 0\r\n         if (hasPendingTasks) {\r\n           console.warn(`⚠️ WebSocket断开时有 ${pendingTasks.size} 个待处理任务`)\r\n"
                },
                {
                    "date": 1752469871115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,8 +196,14 @@\n \r\n // 获取API基础URL - 使用负载均衡\r\n async function getApiBaseUrl(forceReassessment = false, excludeUrls = []) {\r\n   try {\r\n+    // 如果WebSocket已连接且没有强制重新评估，优先使用WebSocket连接的服务器\r\n+    if (!forceReassessment && currentWebSocketServer && isWsConnected) {\r\n+      console.log('🔗 使用WebSocket连接的服务器保持一致性:', currentWebSocketServer)\r\n+      return currentWebSocketServer\r\n+    }\r\n+\r\n     // 如果需要强制重新评估，触发负载均衡器重新评估\r\n     if (forceReassessment) {\r\n       console.log('🔄 强制重新评估服务器...')\r\n       await loadBalancer.forceReassessment()\r\n@@ -213,8 +219,19 @@\n     }\r\n \r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n+    // 如果选择的服务器与当前WebSocket服务器不同，且WebSocket已连接，需要重连WebSocket\r\n+    if (currentWebSocketServer && currentWebSocketServer !== optimalServer && isWsConnected) {\r\n+      console.log(`⚠️ 检测到服务器切换 (${currentWebSocketServer} → ${optimalServer})，需要重连WebSocket`)\r\n+      // 异步重连WebSocket，不阻塞当前请求\r\n+      setTimeout(() => {\r\n+        initializeWebSocket(true).catch(error => {\r\n+          console.error('❌ 异步WebSocket重连失败:', error)\r\n+        })\r\n+      }, 100)\r\n+    }\r\n+\r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n"
                },
                {
                    "date": 1752469972268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -703,10 +703,10 @@\n     currentWebSocketServer = baseUrl\r\n \r\n     // 通知负载均衡器锁定当前服务器用于WebSocket\r\n     try {\r\n-      await loadBalancer.lockServer(baseUrl)\r\n-      console.log(`🔒 已锁定服务器用于WebSocket: ${baseUrl}`)\r\n+      await loadBalancer.lockServerForWebSocket(baseUrl)\r\n+      console.log(`🔒🌐 已锁定服务器用于WebSocket: ${baseUrl}`)\r\n     } catch (error) {\r\n       console.warn('⚠️ 无法锁定服务器，继续使用当前选择:', error)\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752469991057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -769,10 +769,10 @@\n \r\n         // 释放服务器锁定\r\n         if (currentWebSocketServer) {\r\n           try {\r\n-            loadBalancer.unlockServer()\r\n-            console.log(`🔓 已释放WebSocket服务器锁定: ${currentWebSocketServer}`)\r\n+            loadBalancer.unlockWebSocketServer()\r\n+            console.log(`🔓🌐 已释放WebSocket服务器锁定: ${currentWebSocketServer}`)\r\n           } catch (error) {\r\n             console.warn('⚠️ 释放服务器锁定失败:', error)\r\n           }\r\n           currentWebSocketServer = null\r\n"
                },
                {
                    "date": 1752470514218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -829,14 +829,21 @@\n \r\n             // 如果超过最大重连次数，停止自动重连\r\n             if (connectionAttempts > maxConnectionAttempts) {\r\n               console.error(`❌ 已达到最大重连次数 (${maxConnectionAttempts})，停止自动重连`)\r\n-              showWebSocketStatusNotification('WebSocket重连失败，请手动刷新页面', 'error')\r\n+              showWebSocketStatusNotification('WebSocket重连失败，任务可能无法完成', 'error')\r\n \r\n-              // 如果有待处理任务，启动HTTP轮询\r\n+              // 标记所有待处理任务为失败\r\n               if (hasPendingTasks) {\r\n-                console.log('🔄 启动HTTP轮询作为最后备用方案')\r\n-                await fallbackToHttpPolling()\r\n+                console.log('❌ 标记所有待处理任务为失败')\r\n+                const taskIds = Array.from(pendingTasks.keys())\r\n+                for (const promptId of taskIds) {\r\n+                  const task = pendingTasks.get(promptId)\r\n+                  if (task && task.onError) {\r\n+                    task.onError('WebSocket连接失败，无法监听任务完成')\r\n+                  }\r\n+                  pendingTasks.delete(promptId)\r\n+                }\r\n               }\r\n               return\r\n             }\r\n \r\n@@ -851,14 +858,8 @@\n                 await checkPendingTasksStatus()\r\n               }\r\n             } catch (error) {\r\n               console.error(`❌ WebSocket 重连失败 (${connectionAttempts}/${maxConnectionAttempts}):`, error)\r\n-\r\n-              // 如果有待处理任务但重连失败，尝试通过HTTP轮询检查状态\r\n-              if (hasPendingTasks) {\r\n-                console.log('🔄 WebSocket重连失败，尝试HTTP轮询检查任务状态...')\r\n-                await fallbackToHttpPolling()\r\n-              }\r\n             }\r\n           }, exponentialDelay)\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1752470538308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1002,19 +1002,25 @@\n         if (pendingTasks.size > 0) {\r\n           console.log('🔄 检测到待处理任务，立即重连WebSocket')\r\n           initializeWebSocket().catch(error => {\r\n             console.error('❌ 健康检查重连失败:', error)\r\n-            // 启动HTTP轮询备用机制\r\n-            fallbackToHttpPolling()\r\n           })\r\n         }\r\n       }\r\n     }\r\n \r\n-    // 如果超过60秒没有收到消息且有待处理任务，启动HTTP轮询\r\n-    if (timeSinceLastMessage > 60000 && pendingTasks.size > 0) {\r\n-      console.warn('⚠️ WebSocket长时间无响应，启动HTTP轮询备用机制')\r\n-      fallbackToHttpPolling()\r\n+    // 如果超过120秒没有收到消息且有待处理任务，标记任务失败\r\n+    if (timeSinceLastMessage > 120000 && pendingTasks.size > 0) {\r\n+      console.error('❌ WebSocket长时间无响应，标记待处理任务为失败')\r\n+      const taskIds = Array.from(pendingTasks.keys())\r\n+      for (const promptId of taskIds) {\r\n+        const task = pendingTasks.get(promptId)\r\n+        if (task && task.onError) {\r\n+          task.onError('WebSocket连接长时间无响应')\r\n+        }\r\n+        pendingTasks.delete(promptId)\r\n+      }\r\n+      showWebSocketStatusNotification('WebSocket连接异常，任务已取消', 'error')\r\n     }\r\n   }, 10000) // 每10秒检查一次\r\n }\r\n \r\n"
                },
                {
                    "date": 1752470559245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1064,66 +1064,11 @@\n     }\r\n   }\r\n }\r\n \r\n-// HTTP轮询备用机制\r\n-async function fallbackToHttpPolling() {\r\n-  const taskIds = Array.from(pendingTasks.keys())\r\n-  if (taskIds.length === 0) {\r\n-    return\r\n-  }\r\n+// 已移除HTTP轮询备用机制，完全依赖WebSocket进行任务状态监控\r\n+// 如果需要手动检查任务状态，请使用 checkTaskStatus(promptId) 函数\r\n \r\n-  console.log(`🔄 启动HTTP轮询备用机制，监控 ${taskIds.length} 个任务...`)\r\n-  showWebSocketStatusNotification('使用HTTP轮询监控任务状态', 'info')\r\n-\r\n-  const pollInterval = setInterval(async () => {\r\n-    try {\r\n-      // 如果WebSocket重新连接成功，停止轮询\r\n-      if (isWsConnected) {\r\n-        console.log('✅ WebSocket已重连，停止HTTP轮询')\r\n-        clearInterval(pollInterval)\r\n-        return\r\n-      }\r\n-\r\n-      // 检查剩余任务\r\n-      const remainingTasks = Array.from(pendingTasks.keys())\r\n-      if (remainingTasks.length === 0) {\r\n-        console.log('✅ 所有任务已完成，停止HTTP轮询')\r\n-        clearInterval(pollInterval)\r\n-        return\r\n-      }\r\n-\r\n-      // 检查每个任务的状态\r\n-      for (const promptId of remainingTasks) {\r\n-        try {\r\n-          const result = await checkTaskStatus(promptId)\r\n-\r\n-          if (result && result.status && result.status.completed) {\r\n-            console.log(`✅ HTTP轮询发现任务 ${promptId} 已完成`)\r\n-\r\n-            const task = pendingTasks.get(promptId)\r\n-            if (task && task.onComplete) {\r\n-              task.onComplete(result)\r\n-              pendingTasks.delete(promptId)\r\n-              showWebSocketStatusNotification(`任务完成 (HTTP轮询)`, 'success')\r\n-            }\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(`❌ HTTP轮询检查任务 ${promptId} 失败:`, error)\r\n-        }\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('❌ HTTP轮询过程中出错:', error)\r\n-    }\r\n-  }, 3000) // 每3秒检查一次\r\n-\r\n-  // 设置轮询超时（5分钟后停止）\r\n-  setTimeout(() => {\r\n-    clearInterval(pollInterval)\r\n-    console.log('⏰ HTTP轮询超时，停止轮询')\r\n-  }, 300000)\r\n-}\r\n-\r\n // 处理 WebSocket 消息 - 根据ComfyUI官方文档规范\r\n function handleWebSocketMessage(message) {\r\n   try {\r\n     const { type, data } = message\r\n"
                },
                {
                    "date": 1752470584314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1150,8 +1150,13 @@\n \r\n     if (task) {\r\n       console.log(`✅ 任务 ${promptId} 执行完成`)\r\n \r\n+      // 立即更新进度到99%\r\n+      if (task.onProgress) {\r\n+        task.onProgress('处理完成，正在加载结果...', 99)\r\n+      }\r\n+\r\n       // 显示前端通知\r\n       showWebSocketStatusNotification(`任务执行成功!`, 'success')\r\n \r\n       // 获取完整的历史记录来获取输出结果\r\n"
                },
                {
                    "date": 1752470602367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1241,9 +1241,11 @@\n \r\n     // 这里可以处理中间结果或UI更新，但不应该触发任务完成\r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n-      task.onProgress(80, `节点 ${nodeId} 完成`)\r\n+      // 更新进度，但不超过95%，为最终完成留出空间\r\n+      const currentProgress = Math.min(95, 60 + Math.random() * 30)\r\n+      task.onProgress(`节点 ${nodeId} 完成`, currentProgress)\r\n     }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752470619234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1271,13 +1271,14 @@\n \r\n     const task = pendingTasks.get(promptId)\r\n     if (task && task.onProgress) {\r\n       if (nodeId === null || nodeId === undefined) {\r\n-        // node为null表示执行完成\r\n-        task.onProgress(95, '所有节点执行完成')\r\n+        // node为null表示执行完成，但不是最终完成\r\n+        task.onProgress('所有节点执行完成，等待结果...', 95)\r\n       } else {\r\n-        // 开始执行新节点\r\n-        task.onProgress(50, `执行节点 ${nodeId}`)\r\n+        // 开始执行新节点，动态计算进度\r\n+        const currentProgress = Math.min(90, 30 + Math.random() * 50)\r\n+        task.onProgress(`执行节点 ${nodeId}`, currentProgress)\r\n       }\r\n     }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1752470657339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1282,9 +1282,9 @@\n     }\r\n   }\r\n }\r\n \r\n-// 等待任务完成 - 专注使用WebSocket机制\r\n+// 等待任务完成 - 完全依赖WebSocket机制\r\n async function waitForTaskCompletion(promptId, maxWaitTime = 300000, onProgress = null) {\r\n   console.log(`⏳ 等待任务完成: ${promptId}`)\r\n \r\n   // 确保WebSocket连接已建立\r\n@@ -1299,58 +1299,35 @@\n   }\r\n \r\n   return new Promise((resolve, reject) => {\r\n     let isResolved = false\r\n-    let wsCheckInterval = null\r\n \r\n     // 设置超时\r\n-    const timeout = setTimeout(async () => {\r\n+    const timeout = setTimeout(() => {\r\n       if (isResolved) return\r\n \r\n-      console.warn(`⏰ 任务 ${promptId} 等待超时，尝试最后检查...`)\r\n+      console.warn(`⏰ 任务 ${promptId} 等待超时`)\r\n \r\n-      // 超时前最后尝试检查任务状态\r\n-      try {\r\n-        const result = await checkTaskStatus(promptId)\r\n-        if (result && result.status && result.status.completed) {\r\n-          console.log(`✅ 超时检查发现任务 ${promptId} 已完成`)\r\n-          isResolved = true\r\n-          clearInterval(wsCheckInterval)\r\n-          pendingTasks.delete(promptId)\r\n-\r\n-          if (onProgress) {\r\n-            onProgress('处理完成', 100)\r\n-          }\r\n-\r\n-          resolve(result)\r\n-          return\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('❌ 超时检查任务状态失败:', error)\r\n-      }\r\n-\r\n       // 确实超时\r\n       pendingTasks.delete(promptId)\r\n-      clearInterval(wsCheckInterval)\r\n       showWebSocketStatusNotification('任务处理超时', 'error')\r\n       reject(new Error(`任务 ${promptId} 执行超时`))\r\n     }, maxWaitTime)\r\n \r\n     // 创建任务跟踪对象\r\n     const task = {\r\n       promptId,\r\n-      onProgress: (progress, status) => {\r\n+      onProgress: (status, progress) => {\r\n         // 调用外部进度回调\r\n         if (onProgress) {\r\n-          onProgress(`正在处理: ${status}`, progress)\r\n+          onProgress(status, progress)\r\n         }\r\n       },\r\n       onComplete: (result) => {\r\n         if (isResolved) return\r\n         isResolved = true\r\n \r\n         clearTimeout(timeout)\r\n-        clearInterval(wsCheckInterval)\r\n         console.log(`✅ 任务 ${promptId} 完成`)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理完成', 100)\r\n@@ -1362,9 +1339,8 @@\n         if (isResolved) return\r\n         isResolved = true\r\n \r\n         clearTimeout(timeout)\r\n-        clearInterval(wsCheckInterval)\r\n         console.error(`❌ 任务 ${promptId} 失败:`, error)\r\n \r\n         if (onProgress) {\r\n           onProgress('处理失败', 0)\r\n@@ -1376,40 +1352,19 @@\n         reject(new Error(error))\r\n       }\r\n     }\r\n \r\n-    // WebSocket连接监控\r\n-    wsCheckInterval = setInterval(async () => {\r\n-      if (isResolved) {\r\n-        clearInterval(wsCheckInterval)\r\n-        return\r\n-      }\r\n-\r\n-      // 检查WebSocket连接状态\r\n-      if (!isWsConnected || !wsConnection || wsConnection.readyState !== WebSocket.OPEN) {\r\n-        console.warn(`⚠️ 检测到WebSocket断开，任务 ${promptId} 切换到HTTP轮询模式`)\r\n-\r\n-        try {\r\n-          const result = await checkTaskStatus(promptId)\r\n-          if (result && result.status && result.status.completed) {\r\n-            console.log(`✅ HTTP轮询发现任务 ${promptId} 已完成`)\r\n-            task.onComplete(result)\r\n-          } else if (result && result.status && result.status.status_str === 'error') {\r\n-            console.error(`❌ HTTP轮询发现任务 ${promptId} 执行失败`)\r\n-            task.onError('任务执行失败')\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(`❌ HTTP轮询检查任务 ${promptId} 失败:`, error)\r\n-        }\r\n-      }\r\n-    }, 5000) // 每5秒检查一次\r\n-\r\n     // 注册任务到待处理列表\r\n     pendingTasks.set(promptId, task)\r\n \r\n     // 确认WebSocket连接状态\r\n     if (isWsConnected && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n       console.log('📡 WebSocket已连接，等待任务完成')\r\n+\r\n+      // 初始进度\r\n+      if (onProgress) {\r\n+        onProgress('任务已提交，等待处理...', 10)\r\n+      }\r\n     } else {\r\n       console.error('❌ WebSocket连接状态异常')\r\n       // 清理任务并拒绝\r\n       pendingTasks.delete(promptId)\r\n"
                },
                {
                    "date": 1752470706487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1373,11 +1373,22 @@\n     }\r\n   })\r\n }\r\n \r\n-// HTTP轮询备份机制已移除，专注使用WebSocket实时通信\r\n+// HTTP轮询备份机制已移除，完全依赖WebSocket实时通信\r\n // 如果需要手动检查任务状态，请使用 checkTaskStatus(promptId) 函数\r\n \r\n+// 处理执行开始消息\r\n+function handleExecutionStartMessage(data) {\r\n+  if (data && data.prompt_id) {\r\n+    const promptId = data.prompt_id\r\n+    const task = pendingTasks.get(promptId)\r\n+    if (task && task.onProgress) {\r\n+      task.onProgress('开始执行', 15)\r\n+    }\r\n+  }\r\n+}\r\n+\r\n // 主要的换衣API函数 - 两步流程\r\n async function processUndressImage(base64Image, onProgress = null) {\r\n   try {\r\n     console.log('🚀 开始处理换衣请求')\r\n"
                },
                {
                    "date": 1752470737651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1128,19 +1128,10 @@\n   // 队列状态消息，通常用于监控队列状态\r\n   // 这里可以根据需要添加队列状态处理逻辑\r\n }\r\n \r\n-// 处理执行开始消息\r\n-function handleExecutionStartMessage(data) {\r\n-  if (data && data.prompt_id) {\r\n-    const promptId = data.prompt_id\r\n-    const task = pendingTasks.get(promptId)\r\n-    if (task && task.onProgress) {\r\n-      task.onProgress('开始执行', 5)\r\n-    }\r\n-  }\r\n-}\r\n \r\n+\r\n // 处理执行成功消息 - 这是关键的完成消息！\r\n function handleExecutionSuccessMessage(data) {\r\n   console.log('🎉 ComfyUI 执行成功! 所有节点已完成!')\r\n \r\n"
                },
                {
                    "date": 1752511085238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,16 +76,13 @@\n     })\r\n \r\n     if (response.ok) {\r\n       const result = await response.json()\r\n-      console.log('✅ 代理服务器配置更新成功:', result)\r\n       return { success: true, message: '代理服务器配置更新成功' }\r\n     } else {\r\n-      console.warn('⚠️ 代理服务器配置更新失败:', response.status)\r\n       return { success: false, message: `代理服务器响应错误: ${response.status}` }\r\n     }\r\n   } catch (error) {\r\n-    console.warn('⚠️ 无法连接到代理服务器，可能代理服务器未启动:', error.message)\r\n     return { success: false, message: '无法连接到代理服务器' }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752511104239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,10 +163,8 @@\n async function updateComfyUIConfig(newConfig) {\r\n   const currentConfig = getComfyUIConfig(true) // 强制刷新当前配置\r\n   const updatedConfig = { ...currentConfig, ...newConfig }\r\n \r\n-  console.log('🔄 更新配置:', updatedConfig)\r\n-\r\n   // 保存到localStorage（这会清除缓存）\r\n   saveComfyUIConfig(updatedConfig)\r\n \r\n   // 强制刷新配置缓存\r\n@@ -177,10 +175,8 @@\n \r\n   // 同时更新代理服务器配置\r\n   const proxyUpdateResult = await updateProxyServerConfig(updatedConfig)\r\n \r\n-  console.log('✅ 配置更新完成，新配置已生效')\r\n-\r\n   return {\r\n     config: updatedConfig,\r\n     proxyUpdate: proxyUpdateResult\r\n   }\r\n"
                },
                {
                    "date": 1752511118743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,10 +231,8 @@\n     }\r\n \r\n     return baseUrl\r\n   } catch (error) {\r\n-    console.warn('⚠️ 负载均衡器失败，使用配置的服务器:', error)\r\n-\r\n     // 降级到配置的服务器\r\n     const config = getComfyUIConfig(true)\r\n     let baseUrl = config.COMFYUI_SERVER_URL\r\n \r\n"
                },
                {
                    "date": 1752511143034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,9 +253,8 @@\n       const result = await apiCall()\r\n       return result\r\n     } catch (error) {\r\n       lastError = error\r\n-      console.warn(`⚠️ API调用失败 (尝试 ${attempt + 1}/${maxRetries + 1}):`, error.message)\r\n \r\n       // 如果不是最后一次尝试，且是网络相关错误，尝试下一个服务器\r\n       if (attempt < maxRetries &&\r\n           (error.message.includes('fetch') ||\r\n"
                },
                {
                    "date": 1752511157452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -267,9 +267,8 @@\n         // 获取当前失败的服务器URL\r\n         const currentServer = await getApiBaseUrl()\r\n         if (currentServer) {\r\n           excludeUrls.push(currentServer)\r\n-          console.log(`🔄 添加失败服务器到排除列表: ${currentServer}`)\r\n \r\n           // 记录失败\r\n           let errorType = 'api_error'\r\n           if (error.message.includes('timeout')) errorType = 'timeout'\r\n"
                },
                {
                    "date": 1752511183414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,8 @@\n \r\n     // 如果是网络错误或服务器错误，记录失败并可能触发重新评估\r\n     if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n       const currentServer = await getApiBaseUrl()\r\n-      console.log('📝 记录服务器上传失败:', currentServer)\r\n \r\n       // 确定错误类型\r\n       let errorType = 'upload_error'\r\n       if (error.message.includes('timeout')) errorType = 'timeout'\r\n"
                },
                {
                    "date": 1752511198103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,12 +425,8 @@\n \r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n     selectedServer = apiBaseUrl // 记录选择的服务器\r\n-    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n-    console.log('🔧 使用负载均衡:', '是')\r\n-    console.log('🔌 WebSocket状态:', isWsConnected ? '已连接' : '未连接')\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n"
                },
                {
                    "date": 1752511212365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,18 +432,10 @@\n       client_id: config.CLIENT_ID,\r\n       prompt: workflowPrompt\r\n     }\r\n \r\n-    console.log('📋 请求体结构:', {\r\n-      client_id: requestBody.client_id,\r\n-      prompt_keys: Object.keys(requestBody.prompt),\r\n-      node_49_exists: !!requestBody.prompt['49'],\r\n-      node_49_image: requestBody.prompt['49']?.inputs?.image\r\n-    })\r\n-\r\n     // 第二步API调用：提交工作流到ComfyUI\r\n     const promptUrl = `${apiBaseUrl}/prompt`\r\n-    console.log('🌐 调用工作流API:', promptUrl)\r\n \r\n     const response = await fetch(promptUrl, {\r\n       method: 'POST',\r\n       headers: {\r\n"
                },
                {
                    "date": 1752511238647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,18 +445,14 @@\n       mode: 'cors',\r\n       credentials: 'omit'\r\n     })\r\n \r\n-    console.log('📥 工作流响应状态:', response.status, response.statusText)\r\n-\r\n     if (!response.ok) {\r\n       const errorText = await response.text()\r\n-      console.error('❌ 工作流提交失败响应:', errorText)\r\n       throw new Error(`工作流提交失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n     }\r\n \r\n     const result = await response.json()\r\n-    console.log('✅ 工作流提交成功:', result)\r\n \r\n     // 验证返回结果\r\n     if (!result.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n"
                },
                {
                    "date": 1752511254874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,10 +464,8 @@\n     console.error('❌ 工作流提交失败:', error)\r\n \r\n     // 记录服务器失败\r\n     if (selectedServer) {\r\n-      console.log('📝 记录服务器失败:', selectedServer)\r\n-\r\n       // 确定错误类型\r\n       let errorType = 'workflow_error'\r\n       if (error.message.includes('timeout')) errorType = 'timeout'\r\n       else if (error.message.includes('network')) errorType = 'network'\r\n"
                },
                {
                    "date": 1752511270939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -499,9 +499,8 @@\n \r\n     // 如果是网络错误或服务器错误，记录失败\r\n     if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n       const currentServer = await getApiBaseUrl()\r\n-      console.log('📝 记录服务器状态查询失败:', currentServer)\r\n \r\n       // 确定错误类型\r\n       let errorType = 'status_check_error'\r\n       if (error.message.includes('timeout')) errorType = 'timeout'\r\n"
                },
                {
                    "date": 1752511287625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -686,21 +686,18 @@\n     } else {\r\n       wsUrl = baseUrl.replace('http://', 'ws://') + '/ws?clientId=' + config.CLIENT_ID\r\n     }\r\n \r\n-    console.log('🔌 正在连接 ComfyUI WebSocket...')\r\n-\r\n     // 先测试HTTP连接是否正常\r\n     try {\r\n       const testResponse = await fetch(`${baseUrl}/system_stats`, {\r\n         method: 'GET',\r\n         signal: AbortSignal.timeout(5000)\r\n       })\r\n       if (!testResponse.ok) {\r\n-        console.warn('⚠️ ComfyUI HTTP连接异常:', testResponse.status)\r\n+        throw new Error(`HTTP连接异常: ${testResponse.status}`)\r\n       }\r\n     } catch (httpError) {\r\n-      console.error('❌ ComfyUI HTTP连接失败:', httpError)\r\n       throw new Error(`ComfyUI服务器不可达: ${httpError.message}`)\r\n     }\r\n \r\n     wsConnection = new WebSocket(wsUrl)\r\n"
                },
                {
                    "date": 1752511303763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -703,14 +703,12 @@\n     wsConnection = new WebSocket(wsUrl)\r\n \r\n     return new Promise((resolve, reject) => {\r\n       const timeout = setTimeout(() => {\r\n-        console.error('❌ WebSocket 连接超时')\r\n         reject(new Error('WebSocket 连接超时'))\r\n       }, 10000)\r\n \r\n       wsConnection.onopen = () => {\r\n-        console.log('✅ ComfyUI WebSocket 连接成功')\r\n         isWsConnected = true\r\n         connectionAttempts = 0 // 重置连接尝试次数\r\n         lastMessageTime = Date.now() // 重置最后消息时间\r\n         clearTimeout(timeout)\r\n"
                },
                {
                    "date": 1752511325472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -810,20 +810,17 @@\n               }\r\n               return\r\n             }\r\n \r\n-            console.log(`🔄 尝试重新连接 ComfyUI WebSocket (${connectionAttempts}/${maxConnectionAttempts})...`)\r\n-\r\n             try {\r\n               await initializeWebSocket()\r\n \r\n               // 重连成功后，检查待处理任务的状态\r\n               if (hasPendingTasks) {\r\n-                console.log('🔍 重连成功，检查待处理任务状态...')\r\n                 await checkPendingTasksStatus()\r\n               }\r\n             } catch (error) {\r\n-              console.error(`❌ WebSocket 重连失败 (${connectionAttempts}/${maxConnectionAttempts}):`, error)\r\n+              // 重连失败，继续等待下次重试\r\n             }\r\n           }, exponentialDelay)\r\n         }\r\n       }\r\n"
                },
                {
                    "date": 1752511341754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -825,9 +825,8 @@\n         }\r\n       }\r\n \r\n       wsConnection.onerror = (error) => {\r\n-        console.error('❌ ComfyUI WebSocket 连接错误:', error)\r\n         clearTimeout(timeout)\r\n \r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接错误', 'error')\r\n"
                },
                {
                    "date": 1752511364787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -969,9 +969,8 @@\n     }\r\n \r\n     // 如果超过120秒没有收到消息且有待处理任务，标记任务失败\r\n     if (timeSinceLastMessage > 120000 && pendingTasks.size > 0) {\r\n-      console.error('❌ WebSocket长时间无响应，标记待处理任务为失败')\r\n       const taskIds = Array.from(pendingTasks.keys())\r\n       for (const promptId of taskIds) {\r\n         const task = pendingTasks.get(promptId)\r\n         if (task && task.onError) {\r\n"
                },
                {
                    "date": 1752511383444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -992,9 +992,8 @@\n \r\n // 检查待处理任务状态\r\n async function checkPendingTasksStatus() {\r\n   const taskIds = Array.from(pendingTasks.keys())\r\n-  console.log(`🔍 检查 ${taskIds.length} 个待处理任务的状态...`)\r\n \r\n   for (const promptId of taskIds) {\r\n     try {\r\n       const result = await checkTaskStatus(promptId)\r\n"
                },
                {
                    "date": 1752511400167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1453,25 +1453,21 @@\n // 检查ComfyUI服务器状态\r\n async function checkComfyUIServerStatus() {\r\n   try {\r\n     const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n-    console.log('🔍 检查ComfyUI服务器状态:', apiBaseUrl)\r\n \r\n     const response = await fetch(`${apiBaseUrl}/system_stats`, {\r\n       method: 'GET',\r\n       signal: AbortSignal.timeout(10000) // 10秒超时\r\n     })\r\n \r\n     if (response.ok) {\r\n       const stats = await response.json()\r\n-      console.log('✅ ComfyUI服务器状态正常:', stats)\r\n       return { status: 'ok', stats }\r\n     } else {\r\n-      console.warn('⚠️ ComfyUI服务器响应异常:', response.status)\r\n       return { status: 'error', code: response.status }\r\n     }\r\n   } catch (error) {\r\n-    console.error('❌ ComfyUI服务器连接失败:', error)\r\n     return { status: 'error', error: error.message }\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752512660186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,54 +186,32 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 使用负载均衡\r\n-async function getApiBaseUrl(forceReassessment = false, excludeUrls = []) {\r\n+// 获取API基础URL - 使用极简负载均衡\r\n+async function getApiBaseUrl() {\r\n   try {\r\n-    // 如果WebSocket已连接且没有强制重新评估，优先使用WebSocket连接的服务器\r\n-    if (!forceReassessment && currentWebSocketServer && isWsConnected) {\r\n+    // 如果WebSocket已连接，优先使用WebSocket连接的服务器保持一致性\r\n+    if (currentWebSocketServer && isWsConnected) {\r\n       console.log('🔗 使用WebSocket连接的服务器保持一致性:', currentWebSocketServer)\r\n       return currentWebSocketServer\r\n     }\r\n \r\n-    // 如果需要强制重新评估，触发负载均衡器重新评估\r\n-    if (forceReassessment) {\r\n-      console.log('🔄 强制重新评估服务器...')\r\n-      await loadBalancer.forceReassessment()\r\n-    }\r\n-\r\n     // 使用负载均衡器选择最优服务器\r\n-    let optimalServer\r\n-    if (excludeUrls.length > 0) {\r\n-      console.log('🔄 获取下一个可用服务器，排除:', excludeUrls)\r\n-      optimalServer = await loadBalancer.getNextAvailableServer(excludeUrls)\r\n-    } else {\r\n-      optimalServer = await loadBalancer.getOptimalServer()\r\n-    }\r\n-\r\n+    const optimalServer = await loadBalancer.getOptimalServer()\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n-    // 如果选择的服务器与当前WebSocket服务器不同，且WebSocket已连接，需要重连WebSocket\r\n-    if (currentWebSocketServer && currentWebSocketServer !== optimalServer && isWsConnected) {\r\n-      console.log(`⚠️ 检测到服务器切换 (${currentWebSocketServer} → ${optimalServer})，需要重连WebSocket`)\r\n-      // 异步重连WebSocket，不阻塞当前请求\r\n-      setTimeout(() => {\r\n-        initializeWebSocket(true).catch(error => {\r\n-          console.error('❌ 异步WebSocket重连失败:', error)\r\n-        })\r\n-      }, 100)\r\n-    }\r\n-\r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n     }\r\n \r\n     return baseUrl\r\n   } catch (error) {\r\n-    // 降级到配置的服务器\r\n+    console.error('❌ 获取API基础URL失败:', error)\r\n+\r\n+    // 备用方案：使用配置中的默认服务器\r\n     const config = getComfyUIConfig(true)\r\n     let baseUrl = config.COMFYUI_SERVER_URL\r\n \r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n"
                },
                {
                    "date": 1752512681313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -643,21 +643,13 @@\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n \r\n-    // 为WebSocket连接锁定服务器，避免在连接过程中切换\r\n-    console.log('🔒 为WebSocket连接锁定服务器选择...')\r\n+    // 获取服务器URL用于WebSocket连接\r\n     const baseUrl = await getApiBaseUrl()\r\n     currentWebSocketServer = baseUrl\r\n+    console.log(`🔌 准备连接WebSocket服务器: ${baseUrl}`)\r\n \r\n-    // 通知负载均衡器锁定当前服务器用于WebSocket\r\n-    try {\r\n-      await loadBalancer.lockServerForWebSocket(baseUrl)\r\n-      console.log(`🔒🌐 已锁定服务器用于WebSocket: ${baseUrl}`)\r\n-    } catch (error) {\r\n-      console.warn('⚠️ 无法锁定服务器，继续使用当前选择:', error)\r\n-    }\r\n-\r\n     // 确保使用正确的WebSocket URL格式\r\n     let wsUrl\r\n     if (baseUrl.startsWith('https://')) {\r\n       wsUrl = baseUrl.replace('https://', 'wss://') + '/ws?clientId=' + config.CLIENT_ID\r\n"
                },
                {
                    "date": 1752512748068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -700,16 +700,11 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n-        // 释放服务器锁定\r\n+        // 清理WebSocket服务器记录\r\n         if (currentWebSocketServer) {\r\n-          try {\r\n-            loadBalancer.unlockWebSocketServer()\r\n-            console.log(`🔓🌐 已释放WebSocket服务器锁定: ${currentWebSocketServer}`)\r\n-          } catch (error) {\r\n-            console.warn('⚠️ 释放服务器锁定失败:', error)\r\n-          }\r\n+          console.log(`🔌 WebSocket连接已断开: ${currentWebSocketServer}`)\r\n           currentWebSocketServer = null\r\n         }\r\n \r\n         // 显示前端通知\r\n"
                },
                {
                    "date": 1752520314318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,8 +186,55 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n+// 检测API前缀\r\n+async function detectApiPrefix(serverUrl) {\r\n+  try {\r\n+    // 先尝试 /api/queue\r\n+    const apiResponse = await fetch(`${serverUrl}/api/queue`, {\r\n+      method: 'GET',\r\n+      timeout: 3000,\r\n+      headers: {\r\n+        'Accept': '*/*',\r\n+        'comfy-user': 'prefix-detector'\r\n+      },\r\n+      mode: 'cors',\r\n+      credentials: 'omit'\r\n+    })\r\n+\r\n+    if (apiResponse.ok) {\r\n+      console.log('🔍 检测到API前缀: /api')\r\n+      return '/api'\r\n+    }\r\n+  } catch (error) {\r\n+    // 忽略错误，继续尝试标准端点\r\n+  }\r\n+\r\n+  try {\r\n+    // 再尝试标准 /queue\r\n+    const standardResponse = await fetch(`${serverUrl}/queue`, {\r\n+      method: 'GET',\r\n+      timeout: 3000,\r\n+      headers: {\r\n+        'Accept': '*/*',\r\n+        'comfy-user': 'prefix-detector'\r\n+      },\r\n+      mode: 'cors',\r\n+      credentials: 'omit'\r\n+    })\r\n+\r\n+    if (standardResponse.ok) {\r\n+      console.log('🔍 使用标准端点，无API前缀')\r\n+      return ''\r\n+    }\r\n+  } catch (error) {\r\n+    console.warn('⚠️ 无法检测API前缀，使用默认')\r\n+  }\r\n+\r\n+  return '' // 默认无前缀\r\n+}\r\n+\r\n // 获取API基础URL - 使用极简负载均衡\r\n async function getApiBaseUrl() {\r\n   try {\r\n     // 如果WebSocket已连接，优先使用WebSocket连接的服务器保持一致性\r\n@@ -199,14 +246,21 @@\n     // 使用负载均衡器选择最优服务器\r\n     const optimalServer = await loadBalancer.getOptimalServer()\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n+    // 检测服务器是否使用API前缀\r\n+    const apiPrefix = await detectApiPrefix(optimalServer)\r\n+\r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n     }\r\n \r\n+    // 添加API前缀\r\n+    baseUrl = `${baseUrl}${apiPrefix}`\r\n+\r\n+    console.log(`🔗 最终API基础URL: ${baseUrl}`)\r\n     return baseUrl\r\n   } catch (error) {\r\n     console.error('❌ 获取API基础URL失败:', error)\r\n \r\n"
                },
                {
                    "date": 1752520330438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,9 +470,12 @@\n \r\n     const response = await fetch(promptUrl, {\r\n       method: 'POST',\r\n       headers: {\r\n-        'Content-Type': 'application/json'\r\n+        'Content-Type': 'application/json',\r\n+        'Accept': '*/*',\r\n+        'comfy-user': config.CLIENT_ID,\r\n+        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n       },\r\n       body: JSON.stringify(requestBody),\r\n       mode: 'cors',\r\n       credentials: 'omit'\r\n"
                },
                {
                    "date": 1752520972759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,56 +186,9 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 检测API前缀\r\n-async function detectApiPrefix(serverUrl) {\r\n-  try {\r\n-    // 先尝试 /api/queue\r\n-    const apiResponse = await fetch(`${serverUrl}/api/queue`, {\r\n-      method: 'GET',\r\n-      timeout: 3000,\r\n-      headers: {\r\n-        'Accept': '*/*',\r\n-        'comfy-user': 'prefix-detector'\r\n-      },\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n-    })\r\n-\r\n-    if (apiResponse.ok) {\r\n-      console.log('🔍 检测到API前缀: /api')\r\n-      return '/api'\r\n-    }\r\n-  } catch (error) {\r\n-    // 忽略错误，继续尝试标准端点\r\n-  }\r\n-\r\n-  try {\r\n-    // 再尝试标准 /queue\r\n-    const standardResponse = await fetch(`${serverUrl}/queue`, {\r\n-      method: 'GET',\r\n-      timeout: 3000,\r\n-      headers: {\r\n-        'Accept': '*/*',\r\n-        'comfy-user': 'prefix-detector'\r\n-      },\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n-    })\r\n-\r\n-    if (standardResponse.ok) {\r\n-      console.log('🔍 使用标准端点，无API前缀')\r\n-      return ''\r\n-    }\r\n-  } catch (error) {\r\n-    console.warn('⚠️ 无法检测API前缀，使用默认')\r\n-  }\r\n-\r\n-  return '' // 默认无前缀\r\n-}\r\n-\r\n-// 获取API基础URL - 使用极简负载均衡\r\n+// 获取API基础URL - 简化版本\r\n async function getApiBaseUrl() {\r\n   try {\r\n     // 如果WebSocket已连接，优先使用WebSocket连接的服务器保持一致性\r\n     if (currentWebSocketServer && isWsConnected) {\r\n@@ -246,20 +199,14 @@\n     // 使用负载均衡器选择最优服务器\r\n     const optimalServer = await loadBalancer.getOptimalServer()\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n-    // 检测服务器是否使用API前缀\r\n-    const apiPrefix = await detectApiPrefix(optimalServer)\r\n-\r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n     }\r\n \r\n-    // 添加API前缀\r\n-    baseUrl = `${baseUrl}${apiPrefix}`\r\n-\r\n     console.log(`🔗 最终API基础URL: ${baseUrl}`)\r\n     return baseUrl\r\n   } catch (error) {\r\n     console.error('❌ 获取API基础URL失败:', error)\r\n"
                },
                {
                    "date": 1752544047438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,17 +246,9 @@\n         // 获取当前失败的服务器URL\r\n         const currentServer = await getApiBaseUrl()\r\n         if (currentServer) {\r\n           excludeUrls.push(currentServer)\r\n-\r\n-          // 记录失败\r\n-          let errorType = 'api_error'\r\n-          if (error.message.includes('timeout')) errorType = 'timeout'\r\n-          else if (error.message.includes('network')) errorType = 'network'\r\n-          else if (error.message.includes('fetch')) errorType = 'connection'\r\n-          else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) errorType = 'server_error'\r\n-\r\n-          await loadBalancer.recordFailure(currentServer, errorType)\r\n+          console.warn(`⚠️ 服务器 ${currentServer} 请求失败，将在重试时排除`)\r\n         }\r\n \r\n         // 等待一段时间再重试\r\n         await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\r\n"
                },
                {
                    "date": 1752544079644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,19 +339,12 @@\n \r\n   } catch (error) {\r\n     console.error('❌ 图片上传失败:', error)\r\n \r\n-    // 如果是网络错误或服务器错误，记录失败并可能触发重新评估\r\n+    // 如果是网络错误或服务器错误，记录失败信息\r\n     if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n       const currentServer = await getApiBaseUrl()\r\n-\r\n-      // 确定错误类型\r\n-      let errorType = 'upload_error'\r\n-      if (error.message.includes('timeout')) errorType = 'timeout'\r\n-      else if (error.message.includes('network')) errorType = 'network'\r\n-      else if (error.message.includes('fetch')) errorType = 'connection'\r\n-\r\n-      await loadBalancer.recordFailure(currentServer, errorType)\r\n+      console.warn(`⚠️ 图片上传到服务器 ${currentServer} 失败:`, error.message)\r\n     }\r\n \r\n     throw new Error(`图片上传失败: ${error.message}`)\r\n   }\r\n"
                },
                {
                    "date": 1752545490170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,17 +645,37 @@\n     } else {\r\n       wsUrl = baseUrl.replace('http://', 'ws://') + '/ws?clientId=' + config.CLIENT_ID\r\n     }\r\n \r\n-    // 先测试HTTP连接是否正常\r\n+    // 先测试HTTP连接是否正常 - 使用官方端点\r\n     try {\r\n-      const testResponse = await fetch(`${baseUrl}/system_stats`, {\r\n-        method: 'GET',\r\n-        signal: AbortSignal.timeout(5000)\r\n-      })\r\n-      if (!testResponse.ok) {\r\n-        throw new Error(`HTTP连接异常: ${testResponse.status}`)\r\n+      // 尝试多个端点确保连接正常\r\n+      const testEndpoints = ['/api/queue', '/api/system_stats', '/queue', '/system_stats']\r\n+      let connectionOk = false\r\n+\r\n+      for (const endpoint of testEndpoints) {\r\n+        try {\r\n+          const testResponse = await fetch(`${baseUrl}${endpoint}`, {\r\n+            method: 'GET',\r\n+            headers: {\r\n+              'Accept': 'application/json, */*',\r\n+              'comfy-user': 'websocket-test'\r\n+            },\r\n+            signal: AbortSignal.timeout(5000)\r\n+          })\r\n+          if (testResponse.ok) {\r\n+            console.log(`✅ HTTP连接测试成功: ${endpoint}`)\r\n+            connectionOk = true\r\n+            break\r\n+          }\r\n+        } catch (endpointError) {\r\n+          console.log(`⚠️ 端点 ${endpoint} 测试失败: ${endpointError.message}`)\r\n+        }\r\n       }\r\n+\r\n+      if (!connectionOk) {\r\n+        throw new Error('所有HTTP端点测试失败')\r\n+      }\r\n     } catch (httpError) {\r\n       throw new Error(`ComfyUI服务器不可达: ${httpError.message}`)\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752545507200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1423,24 +1423,42 @@\n     }\r\n   }\r\n }\r\n \r\n-// 检查ComfyUI服务器状态\r\n+// 检查ComfyUI服务器状态 - 使用官方端点\r\n async function checkComfyUIServerStatus() {\r\n   try {\r\n     const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n \r\n-    const response = await fetch(`${apiBaseUrl}/system_stats`, {\r\n-      method: 'GET',\r\n-      signal: AbortSignal.timeout(10000) // 10秒超时\r\n-    })\r\n+    // 基于官方文档的端点列表\r\n+    const testEndpoints = ['/api/system_stats', '/api/queue', '/system_stats', '/queue']\r\n \r\n-    if (response.ok) {\r\n-      const stats = await response.json()\r\n-      return { status: 'ok', stats }\r\n-    } else {\r\n-      return { status: 'error', code: response.status }\r\n+    for (const endpoint of testEndpoints) {\r\n+      try {\r\n+        const response = await fetch(`${apiBaseUrl}${endpoint}`, {\r\n+          method: 'GET',\r\n+          headers: {\r\n+            'Accept': 'application/json, */*',\r\n+            'comfy-user': 'status-check'\r\n+          },\r\n+          signal: AbortSignal.timeout(10000) // 10秒超时\r\n+        })\r\n+\r\n+        if (response.ok) {\r\n+          try {\r\n+            const data = await response.json()\r\n+            return { status: 'ok', endpoint, data }\r\n+          } catch (jsonError) {\r\n+            // 即使不是JSON，只要响应成功就认为服务器正常\r\n+            return { status: 'ok', endpoint, note: '非JSON响应但连接正常' }\r\n+          }\r\n+        }\r\n+      } catch (endpointError) {\r\n+        console.log(`端点 ${endpoint} 测试失败: ${endpointError.message}`)\r\n+      }\r\n     }\r\n+\r\n+    return { status: 'error', error: '所有端点测试失败' }\r\n   } catch (error) {\r\n     return { status: 'error', error: error.message }\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1752547652314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -645,28 +645,38 @@\n     } else {\r\n       wsUrl = baseUrl.replace('http://', 'ws://') + '/ws?clientId=' + config.CLIENT_ID\r\n     }\r\n \r\n-    // 先测试HTTP连接是否正常 - 使用官方端点\r\n+    // 先测试HTTP连接是否正常 - 使用统一的官方端点配置\r\n     try {\r\n-      // 尝试多个端点确保连接正常\r\n-      const testEndpoints = ['/api/queue', '/api/system_stats', '/queue', '/system_stats']\r\n+      const testEndpoints = comfyUIConfig.getHealthCheckEndpoints()\r\n       let connectionOk = false\r\n \r\n       for (const endpoint of testEndpoints) {\r\n         try {\r\n           const testResponse = await fetch(`${baseUrl}${endpoint}`, {\r\n             method: 'GET',\r\n-            headers: {\r\n-              'Accept': 'application/json, */*',\r\n-              'comfy-user': 'websocket-test'\r\n-            },\r\n-            signal: AbortSignal.timeout(5000)\r\n+            headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\r\n+            signal: AbortSignal.timeout(comfyUIConfig.HEALTH_CHECK.TIMEOUT / 2) // 使用一半超时时间\r\n           })\r\n+\r\n           if (testResponse.ok) {\r\n-            console.log(`✅ HTTP连接测试成功: ${endpoint}`)\r\n-            connectionOk = true\r\n-            break\r\n+            // 验证响应是否为有效的ComfyUI响应\r\n+            try {\r\n+              const data = await testResponse.json()\r\n+              const isValid = comfyUIConfig.validateResponse(endpoint, data)\r\n+              if (isValid) {\r\n+                console.log(`✅ HTTP连接测试成功: ${endpoint} (已验证ComfyUI响应)`)\r\n+                connectionOk = true\r\n+                break\r\n+              } else {\r\n+                console.log(`⚠️ 端点 ${endpoint} 响应但验证失败`)\r\n+              }\r\n+            } catch (jsonError) {\r\n+              console.log(`✅ HTTP连接测试成功: ${endpoint} (非JSON响应但连接正常)`)\r\n+              connectionOk = true\r\n+              break\r\n+            }\r\n           }\r\n         } catch (endpointError) {\r\n           console.log(`⚠️ 端点 ${endpoint} 测试失败: ${endpointError.message}`)\r\n         }\r\n"
                },
                {
                    "date": 1752547676651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1433,33 +1433,40 @@\n     }\r\n   }\r\n }\r\n \r\n-// 检查ComfyUI服务器状态 - 使用官方端点\r\n+// 检查ComfyUI服务器状态 - 使用统一的官方端点配置\r\n async function checkComfyUIServerStatus() {\r\n   try {\r\n     const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    const testEndpoints = comfyUIConfig.getHealthCheckEndpoints()\r\n \r\n-    // 基于官方文档的端点列表\r\n-    const testEndpoints = ['/api/system_stats', '/api/queue', '/system_stats', '/queue']\r\n+    console.log('🔍 检查ComfyUI服务器状态:', apiBaseUrl)\r\n+    console.log('📋 使用端点列表:', testEndpoints)\r\n \r\n     for (const endpoint of testEndpoints) {\r\n       try {\r\n         const response = await fetch(`${apiBaseUrl}${endpoint}`, {\r\n           method: 'GET',\r\n-          headers: {\r\n-            'Accept': 'application/json, */*',\r\n-            'comfy-user': 'status-check'\r\n-          },\r\n-          signal: AbortSignal.timeout(10000) // 10秒超时\r\n+          headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\r\n+          signal: AbortSignal.timeout(comfyUIConfig.HEALTH_CHECK.TIMEOUT)\r\n         })\r\n \r\n         if (response.ok) {\r\n           try {\r\n             const data = await response.json()\r\n-            return { status: 'ok', endpoint, data }\r\n+            const isValid = comfyUIConfig.validateResponse(endpoint, data)\r\n+\r\n+            if (isValid) {\r\n+              console.log(`✅ 服务器状态检查成功: ${endpoint} (已验证ComfyUI响应)`)\r\n+              return { status: 'ok', endpoint, data, validated: true }\r\n+            } else {\r\n+              console.log(`⚠️ 端点 ${endpoint} 响应但验证失败`)\r\n+              continue\r\n+            }\r\n           } catch (jsonError) {\r\n             // 即使不是JSON，只要响应成功就认为服务器正常\r\n+            console.log(`✅ 服务器状态检查成功: ${endpoint} (非JSON响应但连接正常)`)\r\n             return { status: 'ok', endpoint, note: '非JSON响应但连接正常' }\r\n           }\r\n         }\r\n       } catch (endpointError) {\r\n"
                },
                {
                    "date": 1752551930854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,37 +222,48 @@\n     return baseUrl\r\n   }\r\n }\r\n \r\n-// 带重试的API调用包装器\r\n-async function callWithRetry(apiCall, maxRetries = 2, excludeUrls = []) {\r\n+// 带重试的API调用包装器 - 修复版本，避免重复调用所有服务器\r\n+async function callWithRetry(apiCall, maxRetries = 2) {\r\n   let lastError = null\r\n+  let selectedServer = null\r\n \r\n   for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n     try {\r\n-      const result = await apiCall()\r\n+      // 只在第一次尝试时选择服务器，后续重试使用相同服务器\r\n+      if (attempt === 0) {\r\n+        selectedServer = await getApiBaseUrl()\r\n+        console.log(`🎯 选择服务器进行API调用: ${selectedServer}`)\r\n+      }\r\n+\r\n+      const result = await apiCall(selectedServer)\r\n       return result\r\n     } catch (error) {\r\n       lastError = error\r\n+      console.warn(`⚠️ 第${attempt + 1}次尝试失败: ${error.message}`)\r\n \r\n-      // 如果不是最后一次尝试，且是网络相关错误，尝试下一个服务器\r\n+      // 如果不是最后一次尝试，且是网络相关错误，记录服务器故障并等待重试\r\n       if (attempt < maxRetries &&\r\n           (error.message.includes('fetch') ||\r\n            error.message.includes('network') ||\r\n            error.message.includes('timeout') ||\r\n            error.message.includes('500') ||\r\n            error.message.includes('502') ||\r\n            error.message.includes('503'))) {\r\n \r\n-        // 获取当前失败的服务器URL\r\n-        const currentServer = await getApiBaseUrl()\r\n-        if (currentServer) {\r\n-          excludeUrls.push(currentServer)\r\n-          console.warn(`⚠️ 服务器 ${currentServer} 请求失败，将在重试时排除`)\r\n+        // 记录服务器故障\r\n+        if (selectedServer) {\r\n+          await loadBalancer.recordFailure(selectedServer, 'api_call_failed')\r\n+          console.warn(`⚠️ 已记录服务器故障: ${selectedServer}`)\r\n         }\r\n \r\n         // 等待一段时间再重试\r\n         await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\r\n+\r\n+        // 重新选择服务器进行下一次尝试\r\n+        selectedServer = await getApiBaseUrl()\r\n+        console.log(`🔄 重试使用新服务器: ${selectedServer}`)\r\n       }\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1752551960969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,33 +392,29 @@\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n-  let selectedServer = null\r\n-  try {\r\n-    // 确保 WebSocket 连接\r\n+  return await callWithRetry(async (serverUrl) => {\r\n+    // 确保 WebSocket 连接到相同的服务器\r\n     await initializeWebSocket()\r\n \r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n-    selectedServer = apiBaseUrl // 记录选择的服务器\r\n+    console.log(`🔄 提交工作流到服务器: ${serverUrl}`)\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n       prompt: workflowPrompt\r\n     }\r\n \r\n     // 第二步API调用：提交工作流到ComfyUI\r\n-    const promptUrl = `${apiBaseUrl}/prompt`\r\n+    const promptUrl = `${serverUrl}/prompt`\r\n \r\n     const response = await fetch(promptUrl, {\r\n       method: 'POST',\r\n       headers: {\r\n         'Content-Type': 'application/json',\r\n-        'Accept': '*/*',\r\n-        'comfy-user': config.CLIENT_ID,\r\n-        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n+        'Accept': 'application/json'\r\n       },\r\n       body: JSON.stringify(requestBody),\r\n       mode: 'cors',\r\n       credentials: 'omit'\r\n@@ -435,8 +431,9 @@\n     if (!result.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n     }\r\n \r\n+    console.log(`✅ 工作流提交成功，任务ID: ${result.prompt_id}`)\r\n     return result.prompt_id // 返回任务ID\r\n \r\n   } catch (error) {\r\n     console.error('❌ 工作流提交失败:', error)\r\n"
                },
                {
                    "date": 1752551982737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -455,13 +455,18 @@\n }\r\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n-  try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n-    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n+  return await callWithRetry(async (serverUrl) => {\r\n+    console.log(`🔍 查询任务状态: ${serverUrl}/history/${promptId}`)\r\n+    const response = await fetch(`${serverUrl}/history/${promptId}`, {\r\n+      method: 'GET',\r\n+      headers: {\r\n+        'Accept': 'application/json'\r\n+      },\r\n+      mode: 'cors',\r\n+      credentials: 'omit'\r\n+    })\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n"
                },
                {
                    "date": 1752552134369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,27 +472,9 @@\n     }\r\n \r\n     const result = await response.json()\r\n     return result[promptId] || null\r\n-\r\n-  } catch (error) {\r\n-    console.error('状态查询失败:', error)\r\n-\r\n-    // 如果是网络错误或服务器错误，记录失败\r\n-    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n-      const currentServer = await getApiBaseUrl()\r\n-\r\n-      // 确定错误类型\r\n-      let errorType = 'status_check_error'\r\n-      if (error.message.includes('timeout')) errorType = 'timeout'\r\n-      else if (error.message.includes('network')) errorType = 'network'\r\n-      else if (error.message.includes('fetch')) errorType = 'connection'\r\n-\r\n-      await loadBalancer.recordFailure(currentServer, errorType)\r\n-    }\r\n-\r\n-    throw new Error(`状态查询失败: ${error.message}`)\r\n-  }\r\n+  })\r\n }\r\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n"
                },
                {
                    "date": 1752552163838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -477,11 +477,9 @@\n }\r\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n-  try {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+  return await callWithRetry(async (serverUrl) => {\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n"
                },
                {
                    "date": 1752552200999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,18 +529,26 @@\n       filename: imageInfo.filename,\r\n       type: imageInfo.type,\r\n       subfolder: imageInfo.subfolder || ''\r\n     })\r\n-    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n+    const imageUrl = `${serverUrl}/view?${params.toString()}`\r\n \r\n     console.log('🌐 获取图片URL:', imageUrl)\r\n \r\n     // 保存 ComfyUI 原始URL到全局变量，供积分扣除时使用\r\n     window.lastComfyUIImageUrl = imageUrl\r\n     console.log('💾 保存 ComfyUI 图片URL 供积分记录使用:', imageUrl)\r\n \r\n     // 获取图片数据并转换为base64\r\n-    const imageResponse = await fetch(imageUrl)\r\n+    const imageResponse = await fetch(imageUrl, {\r\n+      method: 'GET',\r\n+      headers: {\r\n+        'Accept': 'image/*'\r\n+      },\r\n+      mode: 'cors',\r\n+      credentials: 'omit'\r\n+    })\r\n+\r\n     if (!imageResponse.ok) {\r\n       throw new Error(`图片获取失败: ${imageResponse.status}`)\r\n     }\r\n \r\n@@ -550,13 +558,9 @@\n       reader.onload = () => resolve(reader.result)\r\n       reader.onerror = reject\r\n       reader.readAsDataURL(imageBlob)\r\n     })\r\n-\r\n-  } catch (error) {\r\n-    console.error('图片获取失败:', error)\r\n-    throw new Error(`图片获取失败: ${error.message}`)\r\n-  }\r\n+  })\r\n }\r\n \r\n // WebSocket 连接管理\r\n let wsConnection = null\r\n"
                },
                {
                    "date": 1752552528058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,48 +222,37 @@\n     return baseUrl\r\n   }\r\n }\r\n \r\n-// 带重试的API调用包装器 - 修复版本，避免重复调用所有服务器\r\n-async function callWithRetry(apiCall, maxRetries = 2) {\r\n+// 带重试的API调用包装器\r\n+async function callWithRetry(apiCall, maxRetries = 2, excludeUrls = []) {\r\n   let lastError = null\r\n-  let selectedServer = null\r\n \r\n   for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n     try {\r\n-      // 只在第一次尝试时选择服务器，后续重试使用相同服务器\r\n-      if (attempt === 0) {\r\n-        selectedServer = await getApiBaseUrl()\r\n-        console.log(`🎯 选择服务器进行API调用: ${selectedServer}`)\r\n-      }\r\n-\r\n-      const result = await apiCall(selectedServer)\r\n+      const result = await apiCall()\r\n       return result\r\n     } catch (error) {\r\n       lastError = error\r\n-      console.warn(`⚠️ 第${attempt + 1}次尝试失败: ${error.message}`)\r\n \r\n-      // 如果不是最后一次尝试，且是网络相关错误，记录服务器故障并等待重试\r\n+      // 如果不是最后一次尝试，且是网络相关错误，尝试下一个服务器\r\n       if (attempt < maxRetries &&\r\n           (error.message.includes('fetch') ||\r\n            error.message.includes('network') ||\r\n            error.message.includes('timeout') ||\r\n            error.message.includes('500') ||\r\n            error.message.includes('502') ||\r\n            error.message.includes('503'))) {\r\n \r\n-        // 记录服务器故障\r\n-        if (selectedServer) {\r\n-          await loadBalancer.recordFailure(selectedServer, 'api_call_failed')\r\n-          console.warn(`⚠️ 已记录服务器故障: ${selectedServer}`)\r\n+        // 获取当前失败的服务器URL\r\n+        const currentServer = await getApiBaseUrl()\r\n+        if (currentServer) {\r\n+          excludeUrls.push(currentServer)\r\n+          console.warn(`⚠️ 服务器 ${currentServer} 请求失败，将在重试时排除`)\r\n         }\r\n \r\n         // 等待一段时间再重试\r\n         await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\r\n-\r\n-        // 重新选择服务器进行下一次尝试\r\n-        selectedServer = await getApiBaseUrl()\r\n-        console.log(`🔄 重试使用新服务器: ${selectedServer}`)\r\n       }\r\n     }\r\n   }\r\n \r\n@@ -392,29 +381,33 @@\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n-  return await callWithRetry(async (serverUrl) => {\r\n-    // 确保 WebSocket 连接到相同的服务器\r\n+  let selectedServer = null\r\n+  try {\r\n+    // 确保 WebSocket 连接\r\n     await initializeWebSocket()\r\n \r\n     const config = getComfyUIConfig()\r\n-    console.log(`🔄 提交工作流到服务器: ${serverUrl}`)\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    selectedServer = apiBaseUrl // 记录选择的服务器\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n       prompt: workflowPrompt\r\n     }\r\n \r\n     // 第二步API调用：提交工作流到ComfyUI\r\n-    const promptUrl = `${serverUrl}/prompt`\r\n+    const promptUrl = `${apiBaseUrl}/prompt`\r\n \r\n     const response = await fetch(promptUrl, {\r\n       method: 'POST',\r\n       headers: {\r\n         'Content-Type': 'application/json',\r\n-        'Accept': 'application/json'\r\n+        'Accept': '*/*',\r\n+        'comfy-user': config.CLIENT_ID,\r\n+        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n       },\r\n       body: JSON.stringify(requestBody),\r\n       mode: 'cors',\r\n       credentials: 'omit'\r\n@@ -431,9 +424,8 @@\n     if (!result.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n     }\r\n \r\n-    console.log(`✅ 工作流提交成功，任务ID: ${result.prompt_id}`)\r\n     return result.prompt_id // 返回任务ID\r\n \r\n   } catch (error) {\r\n     console.error('❌ 工作流提交失败:', error)\r\n@@ -455,31 +447,46 @@\n }\r\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n-  return await callWithRetry(async (serverUrl) => {\r\n-    console.log(`🔍 查询任务状态: ${serverUrl}/history/${promptId}`)\r\n-    const response = await fetch(`${serverUrl}/history/${promptId}`, {\r\n-      method: 'GET',\r\n-      headers: {\r\n-        'Accept': 'application/json'\r\n-      },\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n-    })\r\n+  try {\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n+    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n \r\n     const result = await response.json()\r\n     return result[promptId] || null\r\n-  })\r\n+\r\n+  } catch (error) {\r\n+    console.error('状态查询失败:', error)\r\n+\r\n+    // 如果是网络错误或服务器错误，记录失败\r\n+    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n+      const currentServer = await getApiBaseUrl()\r\n+\r\n+      // 确定错误类型\r\n+      let errorType = 'status_check_error'\r\n+      if (error.message.includes('timeout')) errorType = 'timeout'\r\n+      else if (error.message.includes('network')) errorType = 'network'\r\n+      else if (error.message.includes('fetch')) errorType = 'connection'\r\n+\r\n+      await loadBalancer.recordFailure(currentServer, errorType)\r\n+    }\r\n+\r\n+    throw new Error(`状态查询失败: ${error.message}`)\r\n+  }\r\n }\r\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n-  return await callWithRetry(async (serverUrl) => {\r\n+  try {\r\n+    const config = getComfyUIConfig()\r\n+    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n@@ -529,26 +536,18 @@\n       filename: imageInfo.filename,\r\n       type: imageInfo.type,\r\n       subfolder: imageInfo.subfolder || ''\r\n     })\r\n-    const imageUrl = `${serverUrl}/view?${params.toString()}`\r\n+    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n \r\n     console.log('🌐 获取图片URL:', imageUrl)\r\n \r\n     // 保存 ComfyUI 原始URL到全局变量，供积分扣除时使用\r\n     window.lastComfyUIImageUrl = imageUrl\r\n     console.log('💾 保存 ComfyUI 图片URL 供积分记录使用:', imageUrl)\r\n \r\n     // 获取图片数据并转换为base64\r\n-    const imageResponse = await fetch(imageUrl, {\r\n-      method: 'GET',\r\n-      headers: {\r\n-        'Accept': 'image/*'\r\n-      },\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n-    })\r\n-\r\n+    const imageResponse = await fetch(imageUrl)\r\n     if (!imageResponse.ok) {\r\n       throw new Error(`图片获取失败: ${imageResponse.status}`)\r\n     }\r\n \r\n@@ -558,9 +557,13 @@\n       reader.onload = () => resolve(reader.result)\r\n       reader.onerror = reject\r\n       reader.readAsDataURL(imageBlob)\r\n     })\r\n-  })\r\n+\r\n+  } catch (error) {\r\n+    console.error('图片获取失败:', error)\r\n+    throw new Error(`图片获取失败: ${error.message}`)\r\n+  }\r\n }\r\n \r\n // WebSocket 连接管理\r\n let wsConnection = null\r\n"
                },
                {
                    "date": 1752553421467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,19 +186,16 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 简化版本\r\n-async function getApiBaseUrl() {\r\n+// 获取API基础URL - 优先使用负载均衡选择的最优服务器\r\n+async function getApiBaseUrl(excludeUrls = []) {\r\n   try {\r\n-    // 如果WebSocket已连接，优先使用WebSocket连接的服务器保持一致性\r\n-    if (currentWebSocketServer && isWsConnected) {\r\n-      console.log('🔗 使用WebSocket连接的服务器保持一致性:', currentWebSocketServer)\r\n-      return currentWebSocketServer\r\n-    }\r\n+    // 暂时忽略WebSocket机制，确保每次都使用负载均衡选择最优服务器\r\n+    console.log('🎯 使用负载均衡选择最优服务器...')\r\n \r\n-    // 使用负载均衡器选择最优服务器\r\n-    const optimalServer = await loadBalancer.getOptimalServer()\r\n+    // 使用负载均衡器选择最优服务器，排除失败的服务器\r\n+    const optimalServer = await loadBalancer.getOptimalServer(excludeUrls)\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n"
                },
                {
                    "date": 1752553441176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,15 +219,16 @@\n     return baseUrl\r\n   }\r\n }\r\n \r\n-// 带重试的API调用包装器\r\n+// 带重试的API调用包装器 - 修复负载均衡逻辑\r\n async function callWithRetry(apiCall, maxRetries = 2, excludeUrls = []) {\r\n   let lastError = null\r\n \r\n   for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n     try {\r\n-      const result = await apiCall()\r\n+      // 每次重试都重新获取最优服务器，排除失败的服务器\r\n+      const result = await apiCall(excludeUrls)\r\n       return result\r\n     } catch (error) {\r\n       lastError = error\r\n \r\n@@ -239,11 +240,11 @@\n            error.message.includes('500') ||\r\n            error.message.includes('502') ||\r\n            error.message.includes('503'))) {\r\n \r\n-        // 获取当前失败的服务器URL\r\n-        const currentServer = await getApiBaseUrl()\r\n-        if (currentServer) {\r\n+        // 获取当前失败的服务器URL并加入排除列表\r\n+        const currentServer = await getApiBaseUrl(excludeUrls)\r\n+        if (currentServer && !excludeUrls.includes(currentServer)) {\r\n           excludeUrls.push(currentServer)\r\n           console.warn(`⚠️ 服务器 ${currentServer} 请求失败，将在重试时排除`)\r\n         }\r\n \r\n"
                },
                {
                    "date": 1752553496077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -269,11 +269,12 @@\n }\r\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image) {\r\n-  try {\r\n+  // 使用重试机制上传图片\r\n+  return await callWithRetry(async (excludeUrls = []) => {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    const apiBaseUrl = await getApiBaseUrl(excludeUrls)\r\n     console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n     console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n     // 验证base64格式\r\n@@ -333,20 +334,9 @@\n       throw new Error('上传响应中缺少文件名')\r\n     }\r\n \r\n     return result.name\r\n-\r\n-  } catch (error) {\r\n-    console.error('❌ 图片上传失败:', error)\r\n-\r\n-    // 如果是网络错误或服务器错误，记录失败信息\r\n-    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n-      const currentServer = await getApiBaseUrl()\r\n-      console.warn(`⚠️ 图片上传到服务器 ${currentServer} 失败:`, error.message)\r\n-    }\r\n-\r\n-    throw new Error(`图片上传失败: ${error.message}`)\r\n-  }\r\n+  })\r\n }\r\n \r\n // 创建工作流提示词，将用户图片关联到节点49\r\n function createUndressWorkflowPrompt(uploadedImageName) {\r\n"
                },
                {
                    "date": 1752553532964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,16 +369,17 @@\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n-  let selectedServer = null\r\n-  try {\r\n+  // 使用重试机制提交工作流\r\n+  return await callWithRetry(async (excludeUrls = []) => {\r\n     // 确保 WebSocket 连接\r\n     await initializeWebSocket()\r\n \r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n-    selectedServer = apiBaseUrl // 记录选择的服务器\r\n+    const apiBaseUrl = await getApiBaseUrl(excludeUrls)\r\n+    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n+    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n \r\n     // 构建请求体，按照ComfyUI API文档格式\r\n     const requestBody = {\r\n       client_id: config.CLIENT_ID,\r\n@@ -412,27 +413,11 @@\n     if (!result.prompt_id) {\r\n       throw new Error('工作流响应中缺少prompt_id')\r\n     }\r\n \r\n+    console.log('✅ 工作流提交成功，任务ID:', result.prompt_id)\r\n     return result.prompt_id // 返回任务ID\r\n-\r\n-  } catch (error) {\r\n-    console.error('❌ 工作流提交失败:', error)\r\n-\r\n-    // 记录服务器失败\r\n-    if (selectedServer) {\r\n-      // 确定错误类型\r\n-      let errorType = 'workflow_error'\r\n-      if (error.message.includes('timeout')) errorType = 'timeout'\r\n-      else if (error.message.includes('network')) errorType = 'network'\r\n-      else if (error.message.includes('fetch')) errorType = 'connection'\r\n-      else if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) errorType = 'server_error'\r\n-\r\n-      await loadBalancer.recordFailure(selectedServer, errorType)\r\n-    }\r\n-\r\n-    throw new Error(`工作流提交失败: ${error.message}`)\r\n-  }\r\n+  })\r\n }\r\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n"
                },
                {
                    "date": 1752555013870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,16 +186,15 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 优先使用负载均衡选择的最优服务器\r\n-async function getApiBaseUrl(excludeUrls = []) {\r\n+// 获取API基础URL - 使用负载均衡选择的最优服务器\r\n+async function getApiBaseUrl() {\r\n   try {\r\n-    // 暂时忽略WebSocket机制，确保每次都使用负载均衡选择最优服务器\r\n     console.log('🎯 使用负载均衡选择最优服务器...')\r\n \r\n-    // 使用负载均衡器选择最优服务器，排除失败的服务器\r\n-    const optimalServer = await loadBalancer.getOptimalServer(excludeUrls)\r\n+    // 使用负载均衡器选择最优服务器\r\n+    const optimalServer = await loadBalancer.getOptimalServer()\r\n     console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n"
                },
                {
                    "date": 1752555040583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,45 +218,10 @@\n     return baseUrl\r\n   }\r\n }\r\n \r\n-// 带重试的API调用包装器 - 修复负载均衡逻辑\r\n-async function callWithRetry(apiCall, maxRetries = 2, excludeUrls = []) {\r\n-  let lastError = null\r\n+// 删除重试机制，直接使用最优服务器\r\n \r\n-  for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n-    try {\r\n-      // 每次重试都重新获取最优服务器，排除失败的服务器\r\n-      const result = await apiCall(excludeUrls)\r\n-      return result\r\n-    } catch (error) {\r\n-      lastError = error\r\n-\r\n-      // 如果不是最后一次尝试，且是网络相关错误，尝试下一个服务器\r\n-      if (attempt < maxRetries &&\r\n-          (error.message.includes('fetch') ||\r\n-           error.message.includes('network') ||\r\n-           error.message.includes('timeout') ||\r\n-           error.message.includes('500') ||\r\n-           error.message.includes('502') ||\r\n-           error.message.includes('503'))) {\r\n-\r\n-        // 获取当前失败的服务器URL并加入排除列表\r\n-        const currentServer = await getApiBaseUrl(excludeUrls)\r\n-        if (currentServer && !excludeUrls.includes(currentServer)) {\r\n-          excludeUrls.push(currentServer)\r\n-          console.warn(`⚠️ 服务器 ${currentServer} 请求失败，将在重试时排除`)\r\n-        }\r\n-\r\n-        // 等待一段时间再重试\r\n-        await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)))\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  throw lastError\r\n-}\r\n-\r\n // 重置为默认配置\r\n function resetToDefaultConfig() {\r\n   localStorage.removeItem('comfyui_config')\r\n   return { ...DEFAULT_CONFIG }\r\n"
                },
                {
                    "date": 1752555075826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,74 +233,71 @@\n }\r\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image) {\r\n-  // 使用重试机制上传图片\r\n-  return await callWithRetry(async (excludeUrls = []) => {\r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl(excludeUrls)\r\n-    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n+  const config = getComfyUIConfig()\r\n+  const apiBaseUrl = await getApiBaseUrl()\r\n+  console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n+  console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n-    // 验证base64格式\r\n-    if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n-      throw new Error('无效的base64图片格式')\r\n-    }\r\n+  // 验证base64格式\r\n+  if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n+    throw new Error('无效的base64图片格式')\r\n+  }\r\n \r\n-    // 从base64数据中提取图片信息\r\n-    const base64Data = base64Image.split(',')[1]\r\n-    const mimeType = base64Image.split(',')[0].split(':')[1].split(';')[0]\r\n-    const extension = mimeType.split('/')[1] || 'jpg'\r\n+  // 从base64数据中提取图片信息\r\n+  const base64Data = base64Image.split(',')[1]\r\n+  const mimeType = base64Image.split(',')[0].split(':')[1].split(';')[0]\r\n+  const extension = mimeType.split('/')[1] || 'jpg'\r\n \r\n-    // 生成唯一文件名\r\n-    const filename = `upload_${Date.now()}_${Math.random().toString(36).substring(7)}.${extension}`\r\n+  // 生成唯一文件名\r\n+  const filename = `upload_${Date.now()}_${Math.random().toString(36).substring(7)}.${extension}`\r\n \r\n-    // 将base64转换为Blob\r\n-    const byteCharacters = atob(base64Data)\r\n-    const byteNumbers = new Array(byteCharacters.length)\r\n-    for (let i = 0; i < byteCharacters.length; i++) {\r\n-      byteNumbers[i] = byteCharacters.charCodeAt(i)\r\n-    }\r\n-    const byteArray = new Uint8Array(byteNumbers)\r\n-    const blob = new Blob([byteArray], { type: mimeType })\r\n+  // 将base64转换为Blob\r\n+  const byteCharacters = atob(base64Data)\r\n+  const byteNumbers = new Array(byteCharacters.length)\r\n+  for (let i = 0; i < byteCharacters.length; i++) {\r\n+    byteNumbers[i] = byteCharacters.charCodeAt(i)\r\n+  }\r\n+  const byteArray = new Uint8Array(byteNumbers)\r\n+  const blob = new Blob([byteArray], { type: mimeType })\r\n \r\n-    console.log('📤 上传文件信息:', {\r\n-      filename,\r\n-      type: mimeType,\r\n-      size: `${(blob.size / 1024).toFixed(2)} KB`\r\n-    })\r\n+  console.log('📤 上传文件信息:', {\r\n+    filename,\r\n+    type: mimeType,\r\n+    size: `${(blob.size / 1024).toFixed(2)} KB`\r\n+  })\r\n \r\n-    // 直连上传图片\r\n-    const formData = new FormData()\r\n-    formData.append('image', blob, filename)\r\n-    formData.append('type', 'input')\r\n-    formData.append('subfolder', '')\r\n-    formData.append('overwrite', 'false')\r\n+  // 直连上传图片\r\n+  const formData = new FormData()\r\n+  formData.append('image', blob, filename)\r\n+  formData.append('type', 'input')\r\n+  formData.append('subfolder', '')\r\n+  formData.append('overwrite', 'false')\r\n \r\n-    console.log('🔄 开始上传图片...')\r\n+  console.log('🔄 开始上传图片...')\r\n \r\n-    const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n-      method: 'POST',\r\n-      body: formData\r\n-    })\r\n+  const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n+    method: 'POST',\r\n+    body: formData\r\n+  })\r\n \r\n-    console.log('📥 上传响应状态:', response.status, response.statusText)\r\n+  console.log('📥 上传响应状态:', response.status, response.statusText)\r\n \r\n-    if (!response.ok) {\r\n-      const errorText = await response.text().catch(() => response.statusText)\r\n-      throw new Error(`上传失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n-    }\r\n+  if (!response.ok) {\r\n+    const errorText = await response.text().catch(() => response.statusText)\r\n+    throw new Error(`上传失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n+  }\r\n \r\n-    const result = await response.json()\r\n-    console.log('✅ 图片上传成功:', result)\r\n+  const result = await response.json()\r\n+  console.log('✅ 图片上传成功:', result)\r\n \r\n-    // 验证返回结果\r\n-    if (!result.name) {\r\n-      throw new Error('上传响应中缺少文件名')\r\n-    }\r\n+  // 验证返回结果\r\n+  if (!result.name) {\r\n+    throw new Error('上传响应中缺少文件名')\r\n+  }\r\n \r\n-    return result.name\r\n-  })\r\n+  return result.name\r\n }\r\n \r\n // 创建工作流提示词，将用户图片关联到节点49\r\n function createUndressWorkflowPrompt(uploadedImageName) {\r\n"
                },
                {
                    "date": 1752555109595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,55 +330,52 @@\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n async function submitWorkflow(workflowPrompt) {\r\n-  // 使用重试机制提交工作流\r\n-  return await callWithRetry(async (excludeUrls = []) => {\r\n-    // 确保 WebSocket 连接\r\n-    await initializeWebSocket()\r\n+  // 确保 WebSocket 连接\r\n+  await initializeWebSocket()\r\n \r\n-    const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl(excludeUrls)\r\n-    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n-    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n+  const config = getComfyUIConfig()\r\n+  const apiBaseUrl = await getApiBaseUrl()\r\n+  console.log('🔄 第二步：提交工作流到ComfyUI')\r\n+  console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n \r\n-    // 构建请求体，按照ComfyUI API文档格式\r\n-    const requestBody = {\r\n-      client_id: config.CLIENT_ID,\r\n-      prompt: workflowPrompt\r\n-    }\r\n+  // 构建请求体，按照ComfyUI API文档格式\r\n+  const requestBody = {\r\n+    client_id: config.CLIENT_ID,\r\n+    prompt: workflowPrompt\r\n+  }\r\n \r\n-    // 第二步API调用：提交工作流到ComfyUI\r\n-    const promptUrl = `${apiBaseUrl}/prompt`\r\n+  // 第二步API调用：提交工作流到ComfyUI\r\n+  const promptUrl = `${apiBaseUrl}/prompt`\r\n \r\n-    const response = await fetch(promptUrl, {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-        'Accept': '*/*',\r\n-        'comfy-user': config.CLIENT_ID,\r\n-        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n-      },\r\n-      body: JSON.stringify(requestBody),\r\n-      mode: 'cors',\r\n-      credentials: 'omit'\r\n-    })\r\n+  const response = await fetch(promptUrl, {\r\n+    method: 'POST',\r\n+    headers: {\r\n+      'Content-Type': 'application/json',\r\n+      'Accept': '*/*',\r\n+      'comfy-user': config.CLIENT_ID,\r\n+      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n+    },\r\n+    body: JSON.stringify(requestBody),\r\n+    mode: 'cors',\r\n+    credentials: 'omit'\r\n+  })\r\n \r\n-    if (!response.ok) {\r\n-      const errorText = await response.text()\r\n-      throw new Error(`工作流提交失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n-    }\r\n+  if (!response.ok) {\r\n+    const errorText = await response.text()\r\n+    throw new Error(`工作流提交失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n+  }\r\n \r\n-    const result = await response.json()\r\n+  const result = await response.json()\r\n \r\n-    // 验证返回结果\r\n-    if (!result.prompt_id) {\r\n-      throw new Error('工作流响应中缺少prompt_id')\r\n-    }\r\n+  // 验证返回结果\r\n+  if (!result.prompt_id) {\r\n+    throw new Error('工作流响应中缺少prompt_id')\r\n+  }\r\n \r\n-    console.log('✅ 工作流提交成功，任务ID:', result.prompt_id)\r\n-    return result.prompt_id // 返回任务ID\r\n-  })\r\n+  console.log('✅ 工作流提交成功，任务ID:', result.prompt_id)\r\n+  return result.prompt_id // 返回任务ID\r\n }\r\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n"
                },
                {
                    "date": 1752555137347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,20 +547,10 @@\n async function initializeWebSocket(forceNewConnection = false) {\r\n   try {\r\n     // 检查是否需要重新连接\r\n     if (!forceNewConnection && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n-      // 检查当前连接的服务器是否仍然是最优选择\r\n-      const currentOptimalServer = await getApiBaseUrl()\r\n-      if (currentWebSocketServer === currentOptimalServer) {\r\n-        console.log('🎯 WebSocket 已连接到最优服务器，无需重新初始化')\r\n-        return true\r\n-      } else {\r\n-        console.log(`🔄 最优服务器已变更 (${currentWebSocketServer} → ${currentOptimalServer})，重新连接WebSocket`)\r\n-        // 关闭当前连接\r\n-        if (wsConnection) {\r\n-          wsConnection.close()\r\n-        }\r\n-      }\r\n+      console.log('🎯 WebSocket 已连接，无需重新初始化')\r\n+      return true\r\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n \r\n"
                },
                {
                    "date": 1752555179855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,9 +380,9 @@\n // 检查任务状态\r\n async function checkTaskStatus(promptId) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    const apiBaseUrl = await getApiBaseUrl()\r\n     console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n     const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n@@ -393,22 +393,8 @@\n     return result[promptId] || null\r\n \r\n   } catch (error) {\r\n     console.error('状态查询失败:', error)\r\n-\r\n-    // 如果是网络错误或服务器错误，记录失败\r\n-    if (error.message.includes('fetch') || error.message.includes('network') || error.message.includes('timeout')) {\r\n-      const currentServer = await getApiBaseUrl()\r\n-\r\n-      // 确定错误类型\r\n-      let errorType = 'status_check_error'\r\n-      if (error.message.includes('timeout')) errorType = 'timeout'\r\n-      else if (error.message.includes('network')) errorType = 'network'\r\n-      else if (error.message.includes('fetch')) errorType = 'connection'\r\n-\r\n-      await loadBalancer.recordFailure(currentServer, errorType)\r\n-    }\r\n-\r\n     throw new Error(`状态查询失败: ${error.message}`)\r\n   }\r\n }\r\n \r\n"
                },
                {
                    "date": 1752555224500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,9 +401,9 @@\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    const apiBaseUrl = await getApiBaseUrl()\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n     let imageInfo = null\r\n"
                },
                {
                    "date": 1752555240268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -627,12 +627,9 @@\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n         // 清理WebSocket服务器记录\r\n-        if (currentWebSocketServer) {\r\n-          console.log(`🔌 WebSocket连接已断开: ${currentWebSocketServer}`)\r\n-          currentWebSocketServer = null\r\n-        }\r\n+        currentWebSocketServer = null\r\n \r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n \r\n"
                },
                {
                    "date": 1752555256475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1234,11 +1234,9 @@\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n \r\n     const serverStatus = await checkComfyUIServerStatus()\r\n     if (serverStatus.status === 'error') {\r\n-      console.warn('⚠️ 服务器状态异常，重新评估...')\r\n-      // 强制重新评估服务器\r\n-      await getApiBaseUrl(true)\r\n+      throw new Error(`ComfyUI服务器不可用: ${serverStatus.error}`)\r\n     }\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n     if (onProgress) onProgress('正在检查积分...', 10)\r\n"
                },
                {
                    "date": 1752555283173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1338,9 +1338,9 @@\n \r\n // 检查ComfyUI服务器状态 - 使用统一的官方端点配置\r\n async function checkComfyUIServerStatus() {\r\n   try {\r\n-    const apiBaseUrl = await getApiBaseUrl() // 现在是异步的\r\n+    const apiBaseUrl = await getApiBaseUrl()\r\n     const testEndpoints = comfyUIConfig.getHealthCheckEndpoints()\r\n \r\n     console.log('🔍 检查ComfyUI服务器状态:', apiBaseUrl)\r\n     console.log('📋 使用端点列表:', testEndpoints)\r\n"
                },
                {
                    "date": 1752556173343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n   formData.append('overwrite', 'false')\r\n \r\n   console.log('🔄 开始上传图片...')\r\n \r\n-  const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n+  const response = await fetch(`${apiBaseUrl}/api/upload/image`, {\r\n     method: 'POST',\r\n     body: formData\r\n   })\r\n \r\n"
                },
                {
                    "date": 1752556188792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,18 +336,18 @@\n \r\n   const config = getComfyUIConfig()\r\n   const apiBaseUrl = await getApiBaseUrl()\r\n   console.log('🔄 第二步：提交工作流到ComfyUI')\r\n-  console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n+  console.log('📡 API地址:', `${apiBaseUrl}/api/prompt`)\r\n \r\n   // 构建请求体，按照ComfyUI API文档格式\r\n   const requestBody = {\r\n     client_id: config.CLIENT_ID,\r\n     prompt: workflowPrompt\r\n   }\r\n \r\n   // 第二步API调用：提交工作流到ComfyUI\r\n-  const promptUrl = `${apiBaseUrl}/prompt`\r\n+  const promptUrl = `${apiBaseUrl}/api/prompt`\r\n \r\n   const response = await fetch(promptUrl, {\r\n     method: 'POST',\r\n     headers: {\r\n"
                },
                {
                    "date": 1752556203168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,10 +381,10 @@\n async function checkTaskStatus(promptId) {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n     const apiBaseUrl = await getApiBaseUrl()\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n-    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n+    console.log('🔍 查询任务状态:', `${apiBaseUrl}/api/history/${promptId}`)\r\n+    const response = await fetch(`${apiBaseUrl}/api/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n     }\r\n"
                },
                {
                    "date": 1752556218053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -453,9 +453,9 @@\n       filename: imageInfo.filename,\r\n       type: imageInfo.type,\r\n       subfolder: imageInfo.subfolder || ''\r\n     })\r\n-    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n+    const imageUrl = `${apiBaseUrl}/api/view?${params.toString()}`\r\n \r\n     console.log('🌐 获取图片URL:', imageUrl)\r\n \r\n     // 保存 ComfyUI 原始URL到全局变量，供积分扣除时使用\r\n"
                },
                {
                    "date": 1752556233457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1306,9 +1306,9 @@\n         subfolder: ''\r\n       })\r\n       const config = getComfyUIConfig()\r\n       const apiBaseUrl = await getApiBaseUrl()\r\n-      originalImage = `${apiBaseUrl}/view?${params.toString()}`\r\n+      originalImage = `${apiBaseUrl}/api/view?${params.toString()}`\r\n     } catch (error) {\r\n       console.warn('⚠️ 获取原图失败:', error)\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752556763382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,16 +350,11 @@\n \r\n   const response = await fetch(promptUrl, {\r\n     method: 'POST',\r\n     headers: {\r\n-      'Content-Type': 'application/json',\r\n-      'Accept': '*/*',\r\n-      'comfy-user': config.CLIENT_ID,\r\n-      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\r\n+      'Content-Type': 'application/json'\r\n     },\r\n-    body: JSON.stringify(requestBody),\r\n-    mode: 'cors',\r\n-    credentials: 'omit'\r\n+    body: JSON.stringify(requestBody)\r\n   })\r\n \r\n   if (!response.ok) {\r\n     const errorText = await response.text()\r\n"
                },
                {
                    "date": 1752557291305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -556,9 +556,8 @@\n       for (const endpoint of testEndpoints) {\r\n         try {\r\n           const testResponse = await fetch(`${baseUrl}${endpoint}`, {\r\n             method: 'GET',\r\n-            headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\r\n             signal: AbortSignal.timeout(comfyUIConfig.HEALTH_CHECK.TIMEOUT / 2) // 使用一半超时时间\r\n           })\r\n \r\n           if (testResponse.ok) {\r\n"
                },
                {
                    "date": 1752557305272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1342,9 +1342,8 @@\n     for (const endpoint of testEndpoints) {\r\n       try {\r\n         const response = await fetch(`${apiBaseUrl}${endpoint}`, {\r\n           method: 'GET',\r\n-          headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\r\n           signal: AbortSignal.timeout(comfyUIConfig.HEALTH_CHECK.TIMEOUT)\r\n         })\r\n \r\n         if (response.ok) {\r\n"
                },
                {
                    "date": 1752561207986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -524,9 +524,9 @@\n \r\n \r\n \r\n // 初始化 WebSocket 连接\r\n-async function initializeWebSocket(forceNewConnection = false) {\r\n+async function initializeWebSocket(forceNewConnection = false, userId = 'anonymous') {\r\n   try {\r\n     // 检查是否需要重新连接\r\n     if (!forceNewConnection && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n       console.log('🎯 WebSocket 已连接，无需重新初始化')\r\n@@ -534,13 +534,17 @@\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n \r\n-    // 获取服务器URL用于WebSocket连接\r\n-    const baseUrl = await getApiBaseUrl()\r\n+    // 获取用户的最优服务器（支持用户级锁定）\r\n+    const baseUrl = await loadBalancer.getOptimalServer(userId)\r\n     currentWebSocketServer = baseUrl\r\n-    console.log(`🔌 准备连接WebSocket服务器: ${baseUrl}`)\r\n+    console.log(`🔌 为用户${userId}准备连接WebSocket服务器: ${baseUrl}`)\r\n \r\n+    // 锁定服务器给当前用户（WebSocket连接期间）\r\n+    loadBalancer.lockServerForUser(userId, baseUrl)\r\n+    console.log(`🔒 为用户${userId}锁定服务器: ${baseUrl}`)\r\n+\r\n     // 确保使用正确的WebSocket URL格式\r\n     let wsUrl\r\n     if (baseUrl.startsWith('https://')) {\r\n       wsUrl = baseUrl.replace('https://', 'wss://') + '/ws?clientId=' + config.CLIENT_ID\r\n"
                },
                {
                    "date": 1752561232487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -624,8 +624,12 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n+        // 解锁用户的服务器（WebSocket连接结束）\r\n+        loadBalancer.unlockServerForUser(userId)\r\n+        console.log(`🔓 WebSocket关闭，为用户${userId}解锁服务器`)\r\n+\r\n         // 清理WebSocket服务器记录\r\n         currentWebSocketServer = null\r\n \r\n         // 显示前端通知\r\n"
                },
                {
                    "date": 1752561275486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,27 +186,27 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 使用负载均衡选择的最优服务器\r\n-async function getApiBaseUrl() {\r\n+// 获取API基础URL - 使用负载均衡选择的最优服务器（支持用户级锁定）\r\n+async function getApiBaseUrl(userId = 'anonymous') {\r\n   try {\r\n-    console.log('🎯 使用负载均衡选择最优服务器...')\r\n+    console.log(`🎯 为用户${userId}使用负载均衡选择最优服务器...`)\r\n \r\n-    // 使用负载均衡器选择最优服务器\r\n-    const optimalServer = await loadBalancer.getOptimalServer()\r\n-    console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n+    // 使用负载均衡器选择最优服务器（支持用户级锁定）\r\n+    const optimalServer = await loadBalancer.getOptimalServer(userId)\r\n+    console.log(`🎯 为用户${userId}负载均衡选择的服务器:`, optimalServer)\r\n \r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n     }\r\n \r\n-    console.log(`🔗 最终API基础URL: ${baseUrl}`)\r\n+    console.log(`🔗 用户${userId}的最终API基础URL: ${baseUrl}`)\r\n     return baseUrl\r\n   } catch (error) {\r\n-    console.error('❌ 获取API基础URL失败:', error)\r\n+    console.error(`❌ 为用户${userId}获取API基础URL失败:`, error)\r\n \r\n     // 备用方案：使用配置中的默认服务器\r\n     const config = getComfyUIConfig(true)\r\n     let baseUrl = config.COMFYUI_SERVER_URL\r\n"
                },
                {
                    "date": 1752561295044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,15 +329,15 @@\n   }\r\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n-async function submitWorkflow(workflowPrompt) {\r\n-  // 确保 WebSocket 连接\r\n-  await initializeWebSocket()\r\n+async function submitWorkflow(workflowPrompt, userId = 'anonymous') {\r\n+  // 确保 WebSocket 连接（传递用户ID）\r\n+  await initializeWebSocket(false, userId)\r\n \r\n   const config = getComfyUIConfig()\r\n-  const apiBaseUrl = await getApiBaseUrl()\r\n-  console.log('🔄 第二步：提交工作流到ComfyUI')\r\n+  const apiBaseUrl = await getApiBaseUrl(userId)\r\n+  console.log(`🔄 第二步：为用户${userId}提交工作流到ComfyUI`)\r\n   console.log('📡 API地址:', `${apiBaseUrl}/api/prompt`)\r\n \r\n   // 构建请求体，按照ComfyUI API文档格式\r\n   const requestBody = {\r\n"
                },
                {
                    "date": 1752561312390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,12 +232,12 @@\n   return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n }\r\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n-async function uploadImageToComfyUI(base64Image) {\r\n+async function uploadImageToComfyUI(base64Image, userId = 'anonymous') {\r\n   const config = getComfyUIConfig()\r\n-  const apiBaseUrl = await getApiBaseUrl()\r\n-  console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n+  const apiBaseUrl = await getApiBaseUrl(userId)\r\n+  console.log(`🔄 第一步：为用户${userId}上传图片到ComfyUI服务器`)\r\n   console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n   // 验证base64格式\r\n   if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n"
                },
                {
                    "date": 1752561328511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,13 +372,13 @@\n   return result.prompt_id // 返回任务ID\r\n }\r\n \r\n // 检查任务状态\r\n-async function checkTaskStatus(promptId) {\r\n+async function checkTaskStatus(promptId, userId = 'anonymous') {\r\n   try {\r\n     const config = getComfyUIConfig()\r\n-    const apiBaseUrl = await getApiBaseUrl()\r\n-    console.log('🔍 查询任务状态:', `${apiBaseUrl}/api/history/${promptId}`)\r\n+    const apiBaseUrl = await getApiBaseUrl(userId)\r\n+    console.log(`🔍 为用户${userId}查询任务状态:`, `${apiBaseUrl}/api/history/${promptId}`)\r\n     const response = await fetch(`${apiBaseUrl}/api/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n"
                },
                {
                    "date": 1752561372134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1227,11 +1227,11 @@\n   }\r\n }\r\n \r\n // 主要的换衣API函数 - 两步流程\r\n-async function processUndressImage(base64Image, onProgress = null) {\r\n+async function processUndressImage(base64Image, onProgress = null, userId = 'anonymous') {\r\n   try {\r\n-    console.log('🚀 开始处理换衣请求')\r\n+    console.log(`🚀 为用户${userId}开始处理换衣请求`)\r\n \r\n     // 预检查服务器状态\r\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n \r\n@@ -1254,23 +1254,23 @@\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的图片数据格式')\r\n     }\r\n \r\n-    // 第一步：上传图片到ComfyUI服务器\r\n+    // 第一步：上传图片到ComfyUI服务器（传递用户ID）\r\n     if (onProgress) onProgress('正在上传图片到ComfyUI...', 20)\r\n \r\n-    const uploadedImageName = await uploadImageToComfyUI(base64Image)\r\n+    const uploadedImageName = await uploadImageToComfyUI(base64Image, userId)\r\n     console.log('✅ 图片上传完成:', uploadedImageName)\r\n \r\n     // 创建工作流提示词，将上传的图片关联到节点49\r\n     if (onProgress) onProgress('正在配置工作流...', 30)\r\n \r\n     const workflowPrompt = createUndressWorkflowPrompt(uploadedImageName)\r\n \r\n-    // 第二步：提交工作流\r\n+    // 第二步：提交工作流（传递用户ID）\r\n     if (onProgress) onProgress('正在提交工作流到ComfyUI...', 40)\r\n \r\n-    const promptId = await submitWorkflow(workflowPrompt)\r\n+    const promptId = await submitWorkflow(workflowPrompt, userId)\r\n     console.log('✅ 工作流提交完成，任务ID:', promptId)\r\n \r\n     // 等待任务完成 - 传递前端进度回调\r\n     if (onProgress) onProgress('正在等待ComfyUI处理...', 50)\r\n"
                },
                {
                    "date": 1752561432868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1383,11 +1383,11 @@\n   }\r\n }\r\n \r\n // 换脸处理函数\r\n-async function processFaceSwapImage({ facePhotos, targetImage, onProgress }) {\r\n+async function processFaceSwapImage({ facePhotos, targetImage, onProgress, userId = 'anonymous' }) {\r\n   try {\r\n-    console.log('🚀 开始换脸处理')\r\n+    console.log(`🚀 为用户${userId}开始换脸处理`)\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n@@ -1420,22 +1420,22 @@\n     }\r\n \r\n     if (onProgress) onProgress('正在上传人脸照片...', 20)\r\n \r\n-    // 上传4张人脸照片\r\n+    // 上传4张人脸照片（传递用户ID）\r\n     const uploadedFacePhotos = []\r\n     for (let i = 0; i < facePhotos.length; i++) {\r\n       const photo = facePhotos[i]\r\n       if (onProgress) onProgress(`正在上传人脸照片 ${i + 1}/4...`, 20 + (i * 10))\r\n \r\n-      const uploadedFilename = await uploadImageToComfyUI(photo)\r\n+      const uploadedFilename = await uploadImageToComfyUI(photo, userId)\r\n       uploadedFacePhotos.push(uploadedFilename)\r\n     }\r\n \r\n     if (onProgress) onProgress('正在上传目标图片...', 60)\r\n \r\n-    // 上传目标图片\r\n-    const targetUploadedFilename = await uploadImageToComfyUI(targetImage)\r\n+    // 上传目标图片（传递用户ID）\r\n+    const targetUploadedFilename = await uploadImageToComfyUI(targetImage, userId)\r\n \r\n     if (onProgress) onProgress('正在准备换脸工作流...', 70)\r\n \r\n     // 准备工作流\r\n"
                },
                {
                    "date": 1752561457924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1467,10 +1467,10 @@\n     }\r\n \r\n     if (onProgress) onProgress('正在提交换脸任务...', 80)\r\n \r\n-    // 提交工作流\r\n-    const promptId = await submitWorkflow(workflow)\r\n+    // 提交工作流（传递用户ID）\r\n+    const promptId = await submitWorkflow(workflow, userId)\r\n \r\n     if (onProgress) onProgress('正在处理换脸...', 85)\r\n \r\n     // 等待任务完成 - 换脸需要更长时间，设置10分钟超时\r\n"
                },
                {
                    "date": 1752561491486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,8 +231,23 @@\n function generateClientId() {\r\n   return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n }\r\n \r\n+// 生成用户会话ID\r\n+function generateUserId() {\r\n+  // 尝试从localStorage获取持久化的用户ID\r\n+  let userId = localStorage.getItem('comfyui_user_id')\r\n+  if (!userId) {\r\n+    // 生成新的用户ID：时间戳 + 随机字符串\r\n+    userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substring(2, 8)\r\n+    localStorage.setItem('comfyui_user_id', userId)\r\n+    console.log(`🆔 生成新用户ID: ${userId}`)\r\n+  } else {\r\n+    console.log(`🆔 使用现有用户ID: ${userId}`)\r\n+  }\r\n+  return userId\r\n+}\r\n+\r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image, userId = 'anonymous') {\r\n   const config = getComfyUIConfig()\r\n   const apiBaseUrl = await getApiBaseUrl(userId)\r\n"
                },
                {
                    "date": 1752561509067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1242,10 +1242,14 @@\n   }\r\n }\r\n \r\n // 主要的换衣API函数 - 两步流程\r\n-async function processUndressImage(base64Image, onProgress = null, userId = 'anonymous') {\r\n+async function processUndressImage(base64Image, onProgress = null, userId = null) {\r\n   try {\r\n+    // 如果没有提供用户ID，自动生成一个\r\n+    if (!userId) {\r\n+      userId = generateUserId()\r\n+    }\r\n     console.log(`🚀 为用户${userId}开始处理换衣请求`)\r\n \r\n     // 预检查服务器状态\r\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n"
                },
                {
                    "date": 1752561522800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1402,10 +1402,14 @@\n   }\r\n }\r\n \r\n // 换脸处理函数\r\n-async function processFaceSwapImage({ facePhotos, targetImage, onProgress, userId = 'anonymous' }) {\r\n+async function processFaceSwapImage({ facePhotos, targetImage, onProgress, userId = null }) {\r\n   try {\r\n+    // 如果没有提供用户ID，自动生成一个\r\n+    if (!userId) {\r\n+      userId = generateUserId()\r\n+    }\r\n     console.log(`🚀 为用户${userId}开始换脸处理`)\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n"
                },
                {
                    "date": 1752561541260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1540,8 +1540,9 @@\n   getCurrentConfig,\r\n   updateComfyUIConfig,\r\n   resetToDefaultConfig,\r\n   generateClientId,\r\n+  generateUserId,\r\n   getApiBaseUrl,\r\n   addConfigChangeListener,\r\n   removeConfigChangeListener,\r\n   processUndressImage,\r\n"
                },
                {
                    "date": 1752561690063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,8 @@\n }\r\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image, userId = 'anonymous') {\r\n-  const config = getComfyUIConfig()\r\n   const apiBaseUrl = await getApiBaseUrl(userId)\r\n   console.log(`🔄 第一步：为用户${userId}上传图片到ComfyUI服务器`)\r\n   console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n"
                },
                {
                    "date": 1752561709312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,9 +388,8 @@\n \r\n // 检查任务状态\r\n async function checkTaskStatus(promptId, userId = 'anonymous') {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n     const apiBaseUrl = await getApiBaseUrl(userId)\r\n     console.log(`🔍 为用户${userId}查询任务状态:`, `${apiBaseUrl}/api/history/${promptId}`)\r\n     const response = await fetch(`${apiBaseUrl}/api/history/${promptId}`)\r\n \r\n"
                },
                {
                    "date": 1752561725606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,9 +408,8 @@\n \r\n // 获取生成的图片\r\n async function getGeneratedImage(taskResult) {\r\n   try {\r\n-    const config = getComfyUIConfig()\r\n     const apiBaseUrl = await getApiBaseUrl()\r\n \r\n     // 从任务结果中找到输出图片\r\n     const outputs = taskResult.outputs\r\n"
                },
                {
                    "date": 1752561741376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -983,9 +983,9 @@\n   }\r\n }\r\n \r\n // 处理状态消息 - 队列状态变化\r\n-function handleStatusMessage(data) {\r\n+function handleStatusMessage() {\r\n   // 队列状态消息，通常用于监控队列状态\r\n   // 这里可以根据需要添加队列状态处理逻辑\r\n }\r\n \r\n"
                },
                {
                    "date": 1752561756327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1322,9 +1322,8 @@\n         filename: uploadedImageName,\r\n         type: 'input',\r\n         subfolder: ''\r\n       })\r\n-      const config = getComfyUIConfig()\r\n       const apiBaseUrl = await getApiBaseUrl()\r\n       originalImage = `${apiBaseUrl}/api/view?${params.toString()}`\r\n     } catch (error) {\r\n       console.warn('⚠️ 获取原图失败:', error)\r\n"
                },
                {
                    "date": 1752562850547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,23 +231,10 @@\n function generateClientId() {\r\n   return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n }\r\n \r\n-// 生成用户会话ID\r\n-function generateUserId() {\r\n-  // 尝试从localStorage获取持久化的用户ID\r\n-  let userId = localStorage.getItem('comfyui_user_id')\r\n-  if (!userId) {\r\n-    // 生成新的用户ID：时间戳 + 随机字符串\r\n-    userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substring(2, 8)\r\n-    localStorage.setItem('comfyui_user_id', userId)\r\n-    console.log(`🆔 生成新用户ID: ${userId}`)\r\n-  } else {\r\n-    console.log(`🆔 使用现有用户ID: ${userId}`)\r\n-  }\r\n-  return userId\r\n-}\r\n \r\n+\r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n async function uploadImageToComfyUI(base64Image, userId = 'anonymous') {\r\n   const apiBaseUrl = await getApiBaseUrl(userId)\r\n   console.log(`🔄 第一步：为用户${userId}上传图片到ComfyUI服务器`)\r\n"
                },
                {
                    "date": 1752562874964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -523,9 +523,9 @@\n \r\n \r\n \r\n // 初始化 WebSocket 连接\r\n-async function initializeWebSocket(forceNewConnection = false, userId = 'anonymous') {\r\n+async function initializeWebSocket(forceNewConnection = false) {\r\n   try {\r\n     // 检查是否需要重新连接\r\n     if (!forceNewConnection && wsConnection && wsConnection.readyState === WebSocket.OPEN) {\r\n       console.log('🎯 WebSocket 已连接，无需重新初始化')\r\n@@ -533,17 +533,13 @@\n     }\r\n \r\n     const config = getComfyUIConfig()\r\n \r\n-    // 获取用户的最优服务器（支持用户级锁定）\r\n-    const baseUrl = await loadBalancer.getOptimalServer(userId)\r\n+    // 获取最优服务器\r\n+    const baseUrl = await loadBalancer.getOptimalServer()\r\n     currentWebSocketServer = baseUrl\r\n-    console.log(`🔌 为用户${userId}准备连接WebSocket服务器: ${baseUrl}`)\r\n+    console.log(`🔌 准备连接WebSocket服务器: ${baseUrl}`)\r\n \r\n-    // 锁定服务器给当前用户（WebSocket连接期间）\r\n-    loadBalancer.lockServerForUser(userId, baseUrl)\r\n-    console.log(`🔒 为用户${userId}锁定服务器: ${baseUrl}`)\r\n-\r\n     // 确保使用正确的WebSocket URL格式\r\n     let wsUrl\r\n     if (baseUrl.startsWith('https://')) {\r\n       wsUrl = baseUrl.replace('https://', 'wss://') + '/ws?clientId=' + config.CLIENT_ID\r\n"
                },
                {
                    "date": 1752562911498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -619,12 +619,8 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n-        // 解锁用户的服务器（WebSocket连接结束）\r\n-        loadBalancer.unlockServerForUser(userId)\r\n-        console.log(`🔓 WebSocket关闭，为用户${userId}解锁服务器`)\r\n-\r\n         // 清理WebSocket服务器记录\r\n         currentWebSocketServer = null\r\n \r\n         // 显示前端通知\r\n"
                },
                {
                    "date": 1752563038031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,27 +186,27 @@\n function getCurrentConfig(forceRefresh = false) {\r\n   return getComfyUIConfig(forceRefresh)\r\n }\r\n \r\n-// 获取API基础URL - 使用负载均衡选择的最优服务器（支持用户级锁定）\r\n-async function getApiBaseUrl(userId = 'anonymous') {\r\n+// 获取API基础URL - 使用负载均衡选择的最优服务器\r\n+async function getApiBaseUrl() {\r\n   try {\r\n-    console.log(`🎯 为用户${userId}使用负载均衡选择最优服务器...`)\r\n+    console.log('🎯 使用负载均衡选择最优服务器...')\r\n \r\n-    // 使用负载均衡器选择最优服务器（支持用户级锁定）\r\n-    const optimalServer = await loadBalancer.getOptimalServer(userId)\r\n-    console.log(`🎯 为用户${userId}负载均衡选择的服务器:`, optimalServer)\r\n+    // 使用负载均衡器选择最优服务器\r\n+    const optimalServer = await loadBalancer.getOptimalServer()\r\n+    console.log('🎯 负载均衡选择的服务器:', optimalServer)\r\n \r\n     // 确保URL格式正确，移除末尾的斜杠\r\n     let baseUrl = optimalServer\r\n     if (baseUrl && baseUrl.endsWith('/')) {\r\n       baseUrl = baseUrl.slice(0, -1)\r\n     }\r\n \r\n-    console.log(`🔗 用户${userId}的最终API基础URL: ${baseUrl}`)\r\n+    console.log('🔗 最终API基础URL:', baseUrl)\r\n     return baseUrl\r\n   } catch (error) {\r\n-    console.error(`❌ 为用户${userId}获取API基础URL失败:`, error)\r\n+    console.error('❌ 获取API基础URL失败:', error)\r\n \r\n     // 备用方案：使用配置中的默认服务器\r\n     const config = getComfyUIConfig(true)\r\n     let baseUrl = config.COMFYUI_SERVER_URL\r\n"
                },
                {
                    "date": 1752563107439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1218,15 +1218,11 @@\n   }\r\n }\r\n \r\n // 主要的换衣API函数 - 两步流程\r\n-async function processUndressImage(base64Image, onProgress = null, userId = null) {\r\n+async function processUndressImage(base64Image, onProgress = null) {\r\n   try {\r\n-    // 如果没有提供用户ID，自动生成一个\r\n-    if (!userId) {\r\n-      userId = generateUserId()\r\n-    }\r\n-    console.log(`🚀 为用户${userId}开始处理换衣请求`)\r\n+    console.log('🚀 开始处理换衣请求')\r\n \r\n     // 预检查服务器状态\r\n     if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n \r\n"
                },
                {
                    "date": 1752563140180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1373,15 +1373,11 @@\n   }\r\n }\r\n \r\n // 换脸处理函数\r\n-async function processFaceSwapImage({ facePhotos, targetImage, onProgress, userId = null }) {\r\n+async function processFaceSwapImage({ facePhotos, targetImage, onProgress }) {\r\n   try {\r\n-    // 如果没有提供用户ID，自动生成一个\r\n-    if (!userId) {\r\n-      userId = generateUserId()\r\n-    }\r\n-    console.log(`🚀 为用户${userId}开始换脸处理`)\r\n+    console.log('🚀 开始换脸处理')\r\n \r\n     // 检查积分（优先使用等级卡系统）\r\n     const pointsStatus = await levelCardPointsManager.getPointsStatus()\r\n     if (!pointsStatus.canGenerate) {\r\n"
                },
                {
                    "date": 1752563154332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1507,9 +1507,8 @@\n   getCurrentConfig,\r\n   updateComfyUIConfig,\r\n   resetToDefaultConfig,\r\n   generateClientId,\r\n-  generateUserId,\r\n   getApiBaseUrl,\r\n   addConfigChangeListener,\r\n   removeConfigChangeListener,\r\n   processUndressImage,\r\n"
                },
                {
                    "date": 1752563254302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,10 +485,10 @@\n let wsHealthCheckTimer = null\r\n let lastMessageTime = Date.now()\r\n let connectionAttempts = 0\r\n let maxConnectionAttempts = 5\r\n-let currentWebSocketServer = null // 记录当前WebSocket连接的服务器\r\n \r\n+\r\n // 前端通知函数\r\n function showWebSocketStatusNotification(message, type = 'info') {\r\n   try {\r\n     // 在控制台显示明显标记\r\n"
                },
                {
                    "date": 1752563273149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -535,9 +535,8 @@\n     const config = getComfyUIConfig()\r\n \r\n     // 获取最优服务器\r\n     const baseUrl = await loadBalancer.getOptimalServer()\r\n-    currentWebSocketServer = baseUrl\r\n     console.log(`🔌 准备连接WebSocket服务器: ${baseUrl}`)\r\n \r\n     // 确保使用正确的WebSocket URL格式\r\n     let wsUrl\r\n"
                },
                {
                    "date": 1752563302527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -618,11 +618,8 @@\n \r\n         // 停止健康检查\r\n         stopWebSocketHealthCheck()\r\n \r\n-        // 清理WebSocket服务器记录\r\n-        currentWebSocketServer = null\r\n-\r\n         // 显示前端通知\r\n         showWebSocketStatusNotification('WebSocket连接已断开', 'warning')\r\n \r\n         // 分析关闭原因\r\n"
                },
                {
                    "date": 1752564178171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,15 +330,15 @@\n   }\r\n }\r\n \r\n // 第二步：提交工作流到ComfyUI\r\n-async function submitWorkflow(workflowPrompt, userId = 'anonymous') {\r\n-  // 确保 WebSocket 连接（传递用户ID）\r\n-  await initializeWebSocket(false, userId)\r\n+async function submitWorkflow(workflowPrompt) {\r\n+  // 确保 WebSocket 连接\r\n+  await initializeWebSocket(false)\r\n \r\n   const config = getComfyUIConfig()\r\n-  const apiBaseUrl = await getApiBaseUrl(userId)\r\n-  console.log(`🔄 第二步：为用户${userId}提交工作流到ComfyUI`)\r\n+  const apiBaseUrl = await getApiBaseUrl()\r\n+  console.log('🔄 第二步：提交工作流到ComfyUI')\r\n   console.log('📡 API地址:', `${apiBaseUrl}/api/prompt`)\r\n \r\n   // 构建请求体，按照ComfyUI API文档格式\r\n   const requestBody = {\r\n"
                },
                {
                    "date": 1752564218328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1241,23 +1241,23 @@\n     if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n       throw new Error('无效的图片数据格式')\r\n     }\r\n \r\n-    // 第一步：上传图片到ComfyUI服务器（传递用户ID）\r\n+    // 第一步：上传图片到ComfyUI服务器\r\n     if (onProgress) onProgress('正在上传图片到ComfyUI...', 20)\r\n \r\n-    const uploadedImageName = await uploadImageToComfyUI(base64Image, userId)\r\n+    const uploadedImageName = await uploadImageToComfyUI(base64Image)\r\n     console.log('✅ 图片上传完成:', uploadedImageName)\r\n \r\n     // 创建工作流提示词，将上传的图片关联到节点49\r\n     if (onProgress) onProgress('正在配置工作流...', 30)\r\n \r\n     const workflowPrompt = createUndressWorkflowPrompt(uploadedImageName)\r\n \r\n-    // 第二步：提交工作流（传递用户ID）\r\n+    // 第二步：提交工作流\r\n     if (onProgress) onProgress('正在提交工作流到ComfyUI...', 40)\r\n \r\n-    const promptId = await submitWorkflow(workflowPrompt, userId)\r\n+    const promptId = await submitWorkflow(workflowPrompt)\r\n     console.log('✅ 工作流提交完成，任务ID:', promptId)\r\n \r\n     // 等待任务完成 - 传递前端进度回调\r\n     if (onProgress) onProgress('正在等待ComfyUI处理...', 50)\r\n"
                },
                {
                    "date": 1752564282406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,11 +234,11 @@\n \r\n \r\n \r\n // 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\n-async function uploadImageToComfyUI(base64Image, userId = 'anonymous') {\r\n-  const apiBaseUrl = await getApiBaseUrl(userId)\r\n-  console.log(`🔄 第一步：为用户${userId}上传图片到ComfyUI服务器`)\r\n+async function uploadImageToComfyUI(base64Image) {\r\n+  const apiBaseUrl = await getApiBaseUrl()\r\n+  console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n   console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n \r\n   // 验证base64格式\r\n   if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n"
                },
                {
                    "date": 1752564355176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1406,22 +1406,22 @@\n     }\r\n \r\n     if (onProgress) onProgress('正在上传人脸照片...', 20)\r\n \r\n-    // 上传4张人脸照片（传递用户ID）\r\n+    // 上传4张人脸照片\r\n     const uploadedFacePhotos = []\r\n     for (let i = 0; i < facePhotos.length; i++) {\r\n       const photo = facePhotos[i]\r\n       if (onProgress) onProgress(`正在上传人脸照片 ${i + 1}/4...`, 20 + (i * 10))\r\n \r\n-      const uploadedFilename = await uploadImageToComfyUI(photo, userId)\r\n+      const uploadedFilename = await uploadImageToComfyUI(photo)\r\n       uploadedFacePhotos.push(uploadedFilename)\r\n     }\r\n \r\n     if (onProgress) onProgress('正在上传目标图片...', 60)\r\n \r\n-    // 上传目标图片（传递用户ID）\r\n-    const targetUploadedFilename = await uploadImageToComfyUI(targetImage, userId)\r\n+    // 上传目标图片\r\n+    const targetUploadedFilename = await uploadImageToComfyUI(targetImage)\r\n \r\n     if (onProgress) onProgress('正在准备换脸工作流...', 70)\r\n \r\n     // 准备工作流\r\n"
                },
                {
                    "date": 1752564455977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1453,10 +1453,10 @@\n     }\r\n \r\n     if (onProgress) onProgress('正在提交换脸任务...', 80)\r\n \r\n-    // 提交工作流（传递用户ID）\r\n-    const promptId = await submitWorkflow(workflow, userId)\r\n+    // 提交工作流\r\n+    const promptId = await submitWorkflow(workflow)\r\n \r\n     if (onProgress) onProgress('正在处理换脸...', 85)\r\n \r\n     // 等待任务完成 - 换脸需要更长时间，设置10分钟超时\r\n"
                },
                {
                    "date": 1752564589397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,12 +373,12 @@\n   return result.prompt_id // 返回任务ID\r\n }\r\n \r\n // 检查任务状态\r\n-async function checkTaskStatus(promptId, userId = 'anonymous') {\r\n+async function checkTaskStatus(promptId) {\r\n   try {\r\n-    const apiBaseUrl = await getApiBaseUrl(userId)\r\n-    console.log(`🔍 为用户${userId}查询任务状态:`, `${apiBaseUrl}/api/history/${promptId}`)\r\n+    const apiBaseUrl = await getApiBaseUrl()\r\n+    console.log(`🔍 查询任务状态:`, `${apiBaseUrl}/api/history/${promptId}`)\r\n     const response = await fetch(`${apiBaseUrl}/api/history/${promptId}`)\r\n \r\n     if (!response.ok) {\r\n       throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n"
                }
            ],
            "date": 1752326450066,
            "name": "Commit-0",
            "content": "// ComfyUI工作流服务 - 动态配置模式\r\nimport undressWorkflow from '../workflows/undress.json'\r\nimport faceSwapWorkflow from '../workflows/faceswap2.0.json'\r\nimport comfyUIConfig from '../config/comfyui.config.js'\r\nimport pointsManager from '../utils/pointsManager.js'\r\n\r\n// 获取动态配置的默认值\r\nasync function getDefaultConfig() {\r\n  try {\r\n    const config = await comfyUIConfig.getConfig();\r\n    return {\r\n      COMFYUI_SERVER_URL: config.BASE_URL,\r\n      CLIENT_ID: config.CLIENT_ID,\r\n      TIMEOUT: config.REQUEST_TIMEOUT,\r\n      BACKUP_SERVERS: config.BACKUP_SERVERS,\r\n      AUTO_SWITCH: config.AUTO_SWITCH,\r\n      MAX_RETRIES: config.MAX_RETRIES\r\n    };\r\n  } catch (error) {\r\n    console.warn('⚠️ 获取服务器配置失败，使用硬编码默认值:', error);\r\n    return {\r\n      COMFYUI_SERVER_URL: 'https://hwf0p724ub-8188.cnb.run',\r\n      CLIENT_ID: 'abc1373d4ad648a3a81d0587fbe5534b',\r\n      TIMEOUT: 300000,\r\n      BACKUP_SERVERS: [],\r\n      AUTO_SWITCH: true,\r\n      MAX_RETRIES: 3\r\n    };\r\n  }\r\n}\r\n\r\n// 配置缓存\r\nlet configCache = null\r\n\r\n// 从localStorage获取配置，如果没有则使用默认配置\r\nfunction getComfyUIConfig(forceRefresh = false) {\r\n  // 如果强制刷新或缓存为空，重新读取配置\r\n  if (forceRefresh || !configCache) {\r\n    const savedConfig = localStorage.getItem('comfyui_config')\r\n    if (savedConfig) {\r\n      try {\r\n        const parsed = JSON.parse(savedConfig)\r\n        configCache = { ...DEFAULT_CONFIG, ...parsed }\r\n        console.log('🔄 配置已刷新:', configCache)\r\n      } catch (error) {\r\n        console.warn('解析保存的配置失败，使用默认配置:', error)\r\n        configCache = { ...DEFAULT_CONFIG }\r\n      }\r\n    } else {\r\n      configCache = { ...DEFAULT_CONFIG }\r\n    }\r\n  }\r\n  return { ...configCache }\r\n}\r\n\r\n// 保存配置到localStorage\r\nfunction saveComfyUIConfig(config) {\r\n  try {\r\n    localStorage.setItem('comfyui_config', JSON.stringify(config))\r\n    // 清除缓存，强制下次读取时重新加载\r\n    configCache = null\r\n    console.log('ComfyUI配置已保存:', config)\r\n  } catch (error) {\r\n    console.error('保存配置失败:', error)\r\n  }\r\n}\r\n\r\n// 更新代理服务器配置\r\nasync function updateProxyServerConfig(config) {\r\n  try {\r\n    // 只有在使用代理时才更新代理服务器配置\r\n    if (!config.USE_PROXY) {\r\n      console.log('🔧 不使用代理，跳过代理服务器配置更新')\r\n      return { success: true, message: '不使用代理模式' }\r\n    }\r\n\r\n    const proxyConfigUrl = config.PROXY_SERVER_URL.replace('/api', '/api/config')\r\n    console.log('🔧 更新代理服务器配置:', proxyConfigUrl)\r\n\r\n    const response = await fetch(proxyConfigUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        COMFYUI_SERVER_URL: config.COMFYUI_SERVER_URL,\r\n        CLIENT_ID: config.CLIENT_ID\r\n      }),\r\n      timeout: 10000\r\n    })\r\n\r\n    if (response.ok) {\r\n      const result = await response.json()\r\n      console.log('✅ 代理服务器配置更新成功:', result)\r\n      return { success: true, message: '代理服务器配置更新成功' }\r\n    } else {\r\n      console.warn('⚠️ 代理服务器配置更新失败:', response.status)\r\n      return { success: false, message: `代理服务器响应错误: ${response.status}` }\r\n    }\r\n  } catch (error) {\r\n    console.warn('⚠️ 无法连接到代理服务器，可能代理服务器未启动:', error.message)\r\n    return { success: false, message: '无法连接到代理服务器' }\r\n  }\r\n}\r\n\r\n// 配置变更监听器\r\nconst configChangeListeners = []\r\n\r\n// 添加配置变更监听器\r\nfunction addConfigChangeListener(listener) {\r\n  configChangeListeners.push(listener)\r\n}\r\n\r\n// 移除配置变更监听器\r\nfunction removeConfigChangeListener(listener) {\r\n  const index = configChangeListeners.indexOf(listener)\r\n  if (index > -1) {\r\n    configChangeListeners.splice(index, 1)\r\n  }\r\n}\r\n\r\n// 通知配置变更\r\nfunction notifyConfigChange(config) {\r\n  configChangeListeners.forEach(listener => {\r\n    try {\r\n      listener(config)\r\n    } catch (error) {\r\n      console.error('配置变更监听器执行失败:', error)\r\n    }\r\n  })\r\n}\r\n\r\n// 更新配置\r\nasync function updateComfyUIConfig(newConfig) {\r\n  const currentConfig = getComfyUIConfig(true) // 强制刷新当前配置\r\n  const updatedConfig = { ...currentConfig, ...newConfig }\r\n\r\n  console.log('🔄 更新配置:', updatedConfig)\r\n\r\n  // 保存到localStorage（这会清除缓存）\r\n  saveComfyUIConfig(updatedConfig)\r\n\r\n  // 强制刷新配置缓存\r\n  configCache = null\r\n\r\n  // 通知配置变更\r\n  notifyConfigChange(updatedConfig)\r\n\r\n  // 同时更新代理服务器配置\r\n  const proxyUpdateResult = await updateProxyServerConfig(updatedConfig)\r\n\r\n  console.log('✅ 配置更新完成，新配置已生效')\r\n\r\n  return {\r\n    config: updatedConfig,\r\n    proxyUpdate: proxyUpdateResult\r\n  }\r\n}\r\n\r\n// 获取当前配置\r\nfunction getCurrentConfig(forceRefresh = false) {\r\n  return getComfyUIConfig(forceRefresh)\r\n}\r\n\r\n// 获取API基础URL - 直连模式\r\nfunction getApiBaseUrl() {\r\n  const config = getComfyUIConfig(true)\r\n  console.log('🎯 直连ComfyUI服务器:', config.COMFYUI_SERVER_URL)\r\n\r\n  let baseUrl = config.COMFYUI_SERVER_URL\r\n\r\n  // 确保URL格式正确，移除末尾的斜杠\r\n  if (baseUrl && baseUrl.endsWith('/')) {\r\n    baseUrl = baseUrl.slice(0, -1)\r\n  }\r\n\r\n  return baseUrl\r\n}\r\n\r\n// 重置为默认配置\r\nfunction resetToDefaultConfig() {\r\n  localStorage.removeItem('comfyui_config')\r\n  return { ...DEFAULT_CONFIG }\r\n}\r\n\r\n// 生成随机客户端ID（备用函数）\r\nfunction generateClientId() {\r\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n}\r\n\r\n// 第一步：上传Base64图片到ComfyUI服务器并获取文件名\r\nasync function uploadImageToComfyUI(base64Image) {\r\n  try {\r\n    const config = getComfyUIConfig()\r\n    const apiBaseUrl = getApiBaseUrl()\r\n    console.log('🔄 第一步：上传图片到ComfyUI服务器')\r\n    console.log('📡 API地址:', `${apiBaseUrl}/upload/image`)\r\n\r\n    // 验证base64格式\r\n    if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n      throw new Error('无效的base64图片格式')\r\n    }\r\n\r\n    // 从base64数据中提取图片信息\r\n    const base64Data = base64Image.split(',')[1]\r\n    const mimeType = base64Image.split(',')[0].split(':')[1].split(';')[0]\r\n    const extension = mimeType.split('/')[1] || 'jpg'\r\n\r\n    // 生成唯一文件名\r\n    const filename = `upload_${Date.now()}_${Math.random().toString(36).substring(7)}.${extension}`\r\n\r\n    // 将base64转换为Blob\r\n    const byteCharacters = atob(base64Data)\r\n    const byteNumbers = new Array(byteCharacters.length)\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i)\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers)\r\n    const blob = new Blob([byteArray], { type: mimeType })\r\n\r\n    console.log('📤 上传文件信息:', {\r\n      filename,\r\n      type: mimeType,\r\n      size: `${(blob.size / 1024).toFixed(2)} KB`\r\n    })\r\n\r\n    // 直连上传图片\r\n    const formData = new FormData()\r\n    formData.append('image', blob, filename)\r\n    formData.append('type', 'input')\r\n    formData.append('subfolder', '')\r\n    formData.append('overwrite', 'false')\r\n\r\n    console.log('🔄 开始上传图片...')\r\n\r\n    const response = await fetch(`${apiBaseUrl}/upload/image`, {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n\r\n    console.log('📥 上传响应状态:', response.status, response.statusText)\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text().catch(() => response.statusText)\r\n      throw new Error(`上传失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n    }\r\n\r\n    const result = await response.json()\r\n    console.log('✅ 图片上传成功:', result)\r\n\r\n    // 验证返回结果\r\n    if (!result.name) {\r\n      throw new Error('上传响应中缺少文件名')\r\n    }\r\n\r\n    return result.name\r\n\r\n  } catch (error) {\r\n    console.error('❌ 图片上传失败:', error)\r\n    throw new Error(`图片上传失败: ${error.message}`)\r\n  }\r\n}\r\n\r\n// 创建工作流提示词，将用户图片关联到节点49\r\nfunction createUndressWorkflowPrompt(uploadedImageName) {\r\n  try {\r\n    // 深拷贝工作流\r\n    const workflow = JSON.parse(JSON.stringify(undressWorkflow))\r\n\r\n    // 将上传的图片文件名设置到节点49\r\n    if (workflow['49'] && workflow['49'].class_type === 'LoadImage') {\r\n      workflow['49'].inputs.image = uploadedImageName\r\n      console.log('节点49图片设置为:', uploadedImageName)\r\n    } else {\r\n      throw new Error('工作流中未找到节点49或节点类型不正确')\r\n    }\r\n\r\n    // 随机化种子以获得不同的结果\r\n    if (workflow['174'] && workflow['174'].inputs) {\r\n      const newSeed = Math.floor(Math.random() * 1000000000000000)\r\n      workflow['174'].inputs.noise_seed = newSeed\r\n      console.log('随机种子设置为:', newSeed)\r\n    }\r\n\r\n    console.log('工作流配置完成')\r\n    return workflow\r\n\r\n  } catch (error) {\r\n    console.error('工作流创建失败:', error)\r\n    throw new Error(`工作流创建失败: ${error.message}`)\r\n  }\r\n}\r\n\r\n// 第二步：提交工作流到ComfyUI\r\nasync function submitWorkflow(workflowPrompt) {\r\n  try {\r\n    const config = getComfyUIConfig()\r\n    const apiBaseUrl = getApiBaseUrl()\r\n    console.log('🔄 第二步：提交工作流到ComfyUI')\r\n    console.log('📡 API地址:', `${apiBaseUrl}/prompt`)\r\n    console.log('🔧 使用代理:', config.USE_PROXY ? '是' : '否')\r\n\r\n    // 构建请求体，按照ComfyUI API文档格式\r\n    const requestBody = {\r\n      client_id: config.CLIENT_ID,\r\n      prompt: workflowPrompt\r\n    }\r\n\r\n    console.log('📋 请求体结构:', {\r\n      client_id: requestBody.client_id,\r\n      prompt_keys: Object.keys(requestBody.prompt),\r\n      node_49_exists: !!requestBody.prompt['49'],\r\n      node_49_image: requestBody.prompt['49']?.inputs?.image\r\n    })\r\n\r\n    // 第二步API调用：提交工作流到ComfyUI\r\n    const promptUrl = `${apiBaseUrl}/prompt`\r\n    console.log('🌐 调用工作流API:', promptUrl)\r\n\r\n    const response = await fetch(promptUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n      mode: 'cors',\r\n      credentials: 'omit'\r\n    })\r\n\r\n    console.log('📥 工作流响应状态:', response.status, response.statusText)\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text()\r\n      console.error('❌ 工作流提交失败响应:', errorText)\r\n      throw new Error(`工作流提交失败: ${response.status} ${response.statusText} - ${errorText}`)\r\n    }\r\n\r\n    const result = await response.json()\r\n    console.log('✅ 工作流提交成功:', result)\r\n\r\n    // 验证返回结果\r\n    if (!result.prompt_id) {\r\n      throw new Error('工作流响应中缺少prompt_id')\r\n    }\r\n\r\n    return result.prompt_id // 返回任务ID\r\n\r\n  } catch (error) {\r\n    console.error('❌ 工作流提交失败:', error)\r\n    throw new Error(`工作流提交失败: ${error.message}`)\r\n  }\r\n}\r\n\r\n// 检查任务状态\r\nasync function checkTaskStatus(promptId) {\r\n  try {\r\n    const config = getComfyUIConfig()\r\n    const apiBaseUrl = getApiBaseUrl()\r\n    console.log('🔍 查询任务状态:', `${apiBaseUrl}/history/${promptId}`)\r\n    const response = await fetch(`${apiBaseUrl}/history/${promptId}`)\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`状态查询失败: ${response.status} ${response.statusText}`)\r\n    }\r\n\r\n    const result = await response.json()\r\n    return result[promptId] || null\r\n\r\n  } catch (error) {\r\n    console.error('状态查询失败:', error)\r\n    throw new Error(`状态查询失败: ${error.message}`)\r\n  }\r\n}\r\n\r\n// 获取生成的图片\r\nasync function getGeneratedImage(taskResult) {\r\n  try {\r\n    const config = getComfyUIConfig()\r\n    const apiBaseUrl = getApiBaseUrl()\r\n\r\n    // 从任务结果中找到输出图片\r\n    const outputs = taskResult.outputs\r\n    let imageInfo = null\r\n\r\n    // 优先查找节点730的输出图片（一键换衣处理结果）\r\n    if (outputs['730'] && outputs['730'].images && outputs['730'].images.length > 0) {\r\n      imageInfo = outputs['730'].images[0]\r\n      console.log('📷 找到节点730的一键换衣处理结果图片:', imageInfo)\r\n    } else if (outputs['812'] && outputs['812'].images && outputs['812'].images.length > 0) {\r\n      // 备用：查找节点812的输出图片（换脸处理结果）\r\n      imageInfo = outputs['812'].images[0]\r\n      console.log('📷 找到节点812的换脸处理结果图片:', imageInfo)\r\n    } else if (outputs['813'] && outputs['813'].images && outputs['813'].images.length > 0) {\r\n      // 备用：查找节点813的输出图片（旧版换脸结果）\r\n      imageInfo = outputs['813'].images[0]\r\n      console.log('📷 找到节点813的换脸处理结果图片:', imageInfo)\r\n    } else if (outputs['746'] && outputs['746'].images && outputs['746'].images.length > 0) {\r\n      // 备用：查找节点746的输出图片（更旧版换脸结果）\r\n      imageInfo = outputs['746'].images[0]\r\n      console.log('📷 找到节点746的换脸处理结果图片:', imageInfo)\r\n    } else if (outputs['710'] && outputs['710'].images && outputs['710'].images.length > 0) {\r\n      // 备用：查找节点710的输出图片（换衣处理结果）\r\n      imageInfo = outputs['710'].images[0]\r\n      console.log('📷 找到节点710的处理结果图片:', imageInfo)\r\n    } else {\r\n      // 如果主要节点都没有输出，则查找其他节点的输出图片\r\n      console.log('⚠️ 节点812、813、746和710都无输出，查找其他节点...')\r\n      for (const nodeId in outputs) {\r\n        const nodeOutput = outputs[nodeId]\r\n        if (nodeOutput.images && nodeOutput.images.length > 0) {\r\n          imageInfo = nodeOutput.images[0]\r\n          console.log(`📷 找到节点${nodeId}的图片:`, imageInfo)\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!imageInfo) {\r\n      console.error('❌ 所有节点输出:', JSON.stringify(outputs, null, 2))\r\n      throw new Error('未找到生成的图片')\r\n    }\r\n\r\n    console.log('📷 最终选择的图片:', imageInfo)\r\n\r\n    // 构建图片URL - 按照ComfyUI API文档格式\r\n    const params = new URLSearchParams({\r\n      filename: imageInfo.filename,\r\n      type: imageInfo.type,\r\n      subfolder: imageInfo.subfolder || ''\r\n    })\r\n    const imageUrl = `${apiBaseUrl}/view?${params.toString()}`\r\n\r\n    console.log('🌐 获取图片URL:', imageUrl)\r\n\r\n    // 获取图片数据并转换为base64\r\n    const imageResponse = await fetch(imageUrl)\r\n    if (!imageResponse.ok) {\r\n      throw new Error(`图片获取失败: ${imageResponse.status}`)\r\n    }\r\n\r\n    const imageBlob = await imageResponse.blob()\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader()\r\n      reader.onload = () => resolve(reader.result)\r\n      reader.onerror = reject\r\n      reader.readAsDataURL(imageBlob)\r\n    })\r\n\r\n  } catch (error) {\r\n    console.error('图片获取失败:', error)\r\n    throw new Error(`图片获取失败: ${error.message}`)\r\n  }\r\n}\r\n\r\n// 等待任务完成\r\nasync function waitForTaskCompletion(promptId, maxWaitTime = 300000) {\r\n  const startTime = Date.now()\r\n  const pollInterval = 2000 // 2秒轮询一次\r\n\r\n  while (Date.now() - startTime < maxWaitTime) {\r\n    const taskResult = await checkTaskStatus(promptId)\r\n\r\n    if (taskResult) {\r\n      if (taskResult.status && taskResult.status.completed) {\r\n        return taskResult\r\n      } else if (taskResult.status && taskResult.status.status_str === 'error') {\r\n        throw new Error(`任务执行失败: ${JSON.stringify(taskResult.status)}`)\r\n      }\r\n    }\r\n\r\n    // 等待下次轮询\r\n    await new Promise(resolve => setTimeout(resolve, pollInterval))\r\n  }\r\n\r\n  throw new Error('任务执行超时')\r\n}\r\n\r\n// 主要的换衣API函数 - 两步流程\r\nasync function processUndressImage(base64Image) {\r\n  try {\r\n    console.log('🚀 开始处理换衣请求...')\r\n\r\n    // 检查体验点\r\n    console.log('💎 检查体验点...')\r\n    if (!pointsManager.hasEnoughPoints()) {\r\n      const status = pointsManager.getPointsStatus()\r\n      throw new Error(`体验点不足！当前点数: ${status.current}，需要: ${status.generationCost}`)\r\n    }\r\n\r\n    console.log('📋 流程：第一步上传图片 → 第二步提交工作流')\r\n\r\n    // 验证图片数据格式\r\n    console.log('🔍 验证图片数据格式...')\r\n    if (!base64Image || !base64Image.startsWith('data:image/')) {\r\n      throw new Error('无效的图片数据格式')\r\n    }\r\n\r\n    // 第一步：上传图片到ComfyUI服务器\r\n    console.log('📤 第一步：上传图片到 /api/upload/image')\r\n    const uploadedImageName = await uploadImageToComfyUI(base64Image)\r\n    console.log('✅ 第一步完成，获得文件名:', uploadedImageName)\r\n\r\n    // 创建工作流提示词，将上传的图片关联到节点49\r\n    console.log('🔧 配置工作流，关联图片到节点49...')\r\n    const workflowPrompt = createUndressWorkflowPrompt(uploadedImageName)\r\n\r\n    // 第二步：提交工作流\r\n    console.log('🚀 第二步：提交工作流到 /api/prompt')\r\n    const promptId = await submitWorkflow(workflowPrompt)\r\n    console.log('✅ 第二步完成，获得任务ID:', promptId)\r\n\r\n    // 等待任务完成\r\n    console.log('⏳ 等待ComfyUI处理任务...')\r\n    const taskResult = await waitForTaskCompletion(promptId)\r\n    console.log('✅ 任务处理完成')\r\n\r\n    // 获取生成的图片\r\n    console.log('📥 获取生成的图片...')\r\n    const resultImage = await getGeneratedImage(taskResult)\r\n    console.log('🎉 换衣处理完全成功！')\r\n\r\n    // 消耗体验点\r\n    console.log('💎 消耗体验点...')\r\n    const pointsResult = pointsManager.consumePoints()\r\n    console.log(`✅ 已消耗 ${pointsResult.consumed} 体验点，剩余: ${pointsResult.remaining}`)\r\n\r\n    // 获取节点49的原图用于对比\r\n    let originalImage = null\r\n    try {\r\n      // 构建节点49原图的URL\r\n      const params = new URLSearchParams({\r\n        filename: uploadedImageName,\r\n        type: 'input',\r\n        subfolder: ''\r\n      })\r\n      const config = getComfyUIConfig()\r\n      const apiBaseUrl = getApiBaseUrl()\r\n      originalImage = `${apiBaseUrl}/view?${params.toString()}`\r\n      console.log('📷 获取节点49原图URL:', originalImage)\r\n    } catch (error) {\r\n      console.warn('⚠️ 获取节点49原图失败，使用用户上传的图片:', error)\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      resultImage: resultImage,\r\n      originalImage: originalImage, // 新增：节点49的原图\r\n      promptId: promptId,\r\n      uploadedImageName: uploadedImageName,\r\n      pointsConsumed: pointsResult.consumed,\r\n      pointsRemaining: pointsResult.remaining,\r\n      message: '换衣处理完成'\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ 换衣处理失败:', error)\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      message: '换衣处理失败'\r\n    }\r\n  }\r\n}\r\n\r\n// 检查ComfyUI服务器状态\r\nasync function checkComfyUIServerStatus() {\r\n  try {\r\n    const apiBaseUrl = getApiBaseUrl()\r\n    console.log('🔍 检查ComfyUI服务器状态:', apiBaseUrl)\r\n\r\n    const response = await fetch(`${apiBaseUrl}/system_stats`, {\r\n      method: 'GET',\r\n      signal: AbortSignal.timeout(10000) // 10秒超时\r\n    })\r\n\r\n    if (response.ok) {\r\n      const stats = await response.json()\r\n      console.log('✅ ComfyUI服务器状态正常:', stats)\r\n      return { status: 'ok', stats }\r\n    } else {\r\n      console.warn('⚠️ ComfyUI服务器响应异常:', response.status)\r\n      return { status: 'error', code: response.status }\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ ComfyUI服务器连接失败:', error)\r\n    return { status: 'error', error: error.message }\r\n  }\r\n}\r\n\r\n// 换脸处理函数\r\nasync function processFaceSwapImage({ facePhotos, targetImage, onProgress }) {\r\n  try {\r\n    console.log('🚀 开始换脸处理')\r\n\r\n    // 检查体验点\r\n    console.log('💎 检查体验点...')\r\n    if (!pointsManager.hasEnoughPoints()) {\r\n      const status = pointsManager.getPointsStatus()\r\n      throw new Error(`体验点不足！当前点数: ${status.current}，需要: ${status.generationCost}`)\r\n    }\r\n\r\n    if (onProgress) onProgress('正在检查服务器状态...', 5)\r\n\r\n    // 检查ComfyUI服务器状态\r\n    const serverStatus = await checkComfyUIServerStatus()\r\n    if (serverStatus.status === 'error') {\r\n      throw new Error(`ComfyUI服务器不可用: ${serverStatus.error || serverStatus.code}`)\r\n    }\r\n\r\n    if (onProgress) onProgress('正在准备工作流...', 10)\r\n\r\n    // 验证输入\r\n    if (!facePhotos || facePhotos.length !== 4) {\r\n      throw new Error('需要提供4张人脸照片')\r\n    }\r\n\r\n    if (!targetImage) {\r\n      throw new Error('需要提供目标图片')\r\n    }\r\n\r\n    // 检查是否所有人脸照片都已上传\r\n    const validFacePhotos = facePhotos.filter(photo => photo !== null)\r\n    if (validFacePhotos.length !== 4) {\r\n      throw new Error('请上传4张人脸照片')\r\n    }\r\n\r\n    if (onProgress) onProgress('正在上传人脸照片...', 20)\r\n\r\n    // 上传4张人脸照片\r\n    const uploadedFacePhotos = []\r\n    for (let i = 0; i < facePhotos.length; i++) {\r\n      const photo = facePhotos[i]\r\n      if (onProgress) onProgress(`正在上传人脸照片 ${i + 1}/4...`, 20 + (i * 10))\r\n\r\n      const uploadedFilename = await uploadImageToComfyUI(photo)\r\n      uploadedFacePhotos.push(uploadedFilename)\r\n    }\r\n\r\n    if (onProgress) onProgress('正在上传目标图片...', 60)\r\n\r\n    // 上传目标图片\r\n    const targetUploadedFilename = await uploadImageToComfyUI(targetImage)\r\n\r\n    if (onProgress) onProgress('正在准备换脸工作流...', 70)\r\n\r\n    // 准备工作流\r\n    const workflow = JSON.parse(JSON.stringify(faceSwapWorkflow))\r\n\r\n    // 更新工作流中的图片节点\r\n    // 根据最新工作流，正确的节点映射：\r\n    // 节点670: 第一张人脸照片\r\n    // 节点662: 第二张人脸照片\r\n    // 节点658: 第三张人脸照片\r\n    // 节点655: 第四张人脸照片\r\n    // 节点737: 目标图片\r\n    // 节点812: 处理结果输出（最新）\r\n\r\n    if (workflow['670']) {\r\n      workflow['670'].inputs.image = uploadedFacePhotos[0]\r\n      console.log('✅ 节点670设置第一张人脸照片:', uploadedFacePhotos[0])\r\n    }\r\n    if (workflow['662']) {\r\n      workflow['662'].inputs.image = uploadedFacePhotos[1]\r\n      console.log('✅ 节点662设置第二张人脸照片:', uploadedFacePhotos[1])\r\n    }\r\n    if (workflow['658']) {\r\n      workflow['658'].inputs.image = uploadedFacePhotos[2]\r\n      console.log('✅ 节点658设置第三张人脸照片:', uploadedFacePhotos[2])\r\n    }\r\n    if (workflow['655']) {\r\n      workflow['655'].inputs.image = uploadedFacePhotos[3]\r\n      console.log('✅ 节点655设置第四张人脸照片:', uploadedFacePhotos[3])\r\n    }\r\n    if (workflow['737']) {\r\n      workflow['737'].inputs.image = targetUploadedFilename\r\n      console.log('✅ 节点737设置目标图片:', targetUploadedFilename)\r\n    }\r\n\r\n    if (onProgress) onProgress('正在提交换脸任务...', 80)\r\n\r\n    // 提交工作流\r\n    const promptId = await submitWorkflow(workflow)\r\n\r\n    if (onProgress) onProgress('正在处理换脸...', 85)\r\n\r\n    // 等待任务完成 - 换脸需要更长时间，设置10分钟超时\r\n    const maxWaitTime = 600000 // 10分钟\r\n    console.log(`⏳ 开始等待换脸任务完成，任务ID: ${promptId}，最大等待时间: ${maxWaitTime/1000}秒`)\r\n\r\n    const taskResult = await waitForTaskCompletion(promptId, maxWaitTime)\r\n    console.log('✅ 换脸任务处理完成，结果:', taskResult)\r\n\r\n    if (onProgress) onProgress('正在获取处理结果...', 95)\r\n\r\n    // 获取结果图片\r\n    // 根据最新工作流，最终结果应该在节点812的输出\r\n    console.log('📥 开始获取换脸结果图片，查找节点812的输出...')\r\n    console.log('🔍 任务结果结构:', JSON.stringify(taskResult, null, 2))\r\n\r\n    const imageUrl = await getGeneratedImage(taskResult)\r\n    console.log('🖼️ 成功获取换脸结果图片URL')\r\n\r\n    // 消耗体验点\r\n    console.log('💎 消耗体验点...')\r\n    const pointsResult = pointsManager.consumePoints()\r\n    console.log(`✅ 已消耗 ${pointsResult.consumed} 体验点，剩余: ${pointsResult.remaining}`)\r\n\r\n    if (onProgress) onProgress('换脸完成！', 100)\r\n\r\n    console.log('✅ 换脸处理完成')\r\n    return {\r\n      success: true,\r\n      imageUrl: imageUrl,\r\n      targetImageUrl: targetImage, // 返回目标图像用于对比\r\n      promptId: promptId,\r\n      pointsConsumed: pointsResult.consumed,\r\n      pointsRemaining: pointsResult.remaining,\r\n      message: '换脸处理完成'\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('❌ 换脸处理失败:', error)\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      message: '换脸处理失败'\r\n    }\r\n  }\r\n}\r\n\r\n// 导出所有公共函数\r\nexport {\r\n  getCurrentConfig,\r\n  updateComfyUIConfig,\r\n  resetToDefaultConfig,\r\n  generateClientId,\r\n  getApiBaseUrl,\r\n  addConfigChangeListener,\r\n  removeConfigChangeListener,\r\n  processUndressImage,\r\n  processFaceSwapImage\r\n}\r\n"
        }
    ]
}