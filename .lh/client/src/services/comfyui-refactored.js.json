{
    "sourceFile": "client/src/services/comfyui-refactored.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752945644077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752945644077,
            "name": "Commit-0",
            "content": "// ComfyUI服务 - 重构版本，基于服务端WebSocket管理\nimport SimpleWebSocketClient from './SimpleWebSocketClient.js'\nimport undressWorkflow from '../workflows/undress.json'\nimport faceSwapWorkflow from '../workflows/faceswap2.0.json'\nimport comfyUIConfig from '../config/comfyui.config.js'\nimport pointsManager from '../utils/pointsManager.js'\nimport levelCardPointsManager from '../utils/levelCardPointsManager.js'\nimport { showNotification } from '../utils/notification.js'\n\n// 全局WebSocket客户端实例\nlet wsClient = null;\n\n// 配置\nconst config = {\n  SERVER_URL: window.location.origin, // 使用当前服务器\n  TIMEOUT: 600000 // 10分钟超时\n};\n\n/**\n * 初始化WebSocket客户端\n */\nasync function initializeWebSocketClient() {\n  if (wsClient && wsClient.isConnected()) {\n    return wsClient;\n  }\n\n  try {\n    wsClient = new SimpleWebSocketClient();\n    await wsClient.connect(config.SERVER_URL);\n\n    // 设置事件监听器\n    setupEventListeners();\n\n    console.log('✅ WebSocket客户端初始化成功');\n    return wsClient;\n  } catch (error) {\n    console.error('❌ WebSocket客户端初始化失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 设置事件监听器\n */\nfunction setupEventListeners() {\n  if (!wsClient) return;\n\n  // 连接状态事件\n  wsClient.on('status_broadcast', (data) => {\n    console.log('📊 服务器状态更新:', data);\n  });\n\n  // 任务执行事件\n  wsClient.on('executing', (data) => {\n    console.log(`🎯 任务执行状态: ${data.prompt_id}, node: ${data.node}`);\n  });\n\n  // 进度事件\n  wsClient.on('progress', (data) => {\n    console.log(`📊 任务进度: ${data.prompt_id}, ${data.progress}%`);\n  });\n\n  // 二进制消息（预览图像）\n  wsClient.on('binary_message', (data) => {\n    console.log('🖼️ 收到预览图像数据');\n  });\n}\n\n/**\n * 处理换衣任务 - 重构版本\n */\nexport async function processUndressImage(imageFile, options = {}) {\n  const {\n    onProgress = () => {},\n    strength = 0.8,\n    steps = 20,\n    cfg = 7\n  } = options;\n\n  try {\n    console.log('🚀 开始换衣处理 (重构版本)');\n\n    // 初始化WebSocket连接\n    onProgress('正在连接服务器...', 5);\n    await initializeWebSocketClient();\n\n    // 上传图片\n    onProgress('正在上传图片...', 10);\n    const uploadedImage = await uploadImageToServer(imageFile);\n    console.log('📤 图片上传成功:', uploadedImage);\n\n    // 准备工作流\n    onProgress('正在准备工作流...', 20);\n    const workflow = prepareUndressWorkflow(uploadedImage, { strength, steps, cfg });\n\n    // 提交任务\n    onProgress('正在提交任务...', 30);\n    const submitResult = await wsClient.submitTask(workflow);\n    const promptId = submitResult.promptId;\n    console.log(`✅ 任务提交成功: ${promptId}`);\n\n    // 等待任务完成\n    onProgress('正在处理图片...', 40);\n    const results = await wsClient.waitForTaskCompletion(promptId, (status, progress) => {\n      const adjustedProgress = Math.min(90, Math.max(40, 40 + (progress * 0.5)));\n      onProgress(status, adjustedProgress);\n    });\n\n    // 获取结果图片URL\n    onProgress('正在获取结果...', 95);\n    const resultImageUrl = extractImageUrl(results);\n\n    if (!resultImageUrl) {\n      throw new Error('未能获取处理结果');\n    }\n\n    console.log('🎉 换衣处理完成:', resultImageUrl);\n    onProgress('处理完成', 100);\n\n    // 消耗积分\n    await consumePoints('undress');\n\n    return resultImageUrl;\n\n  } catch (error) {\n    console.error('❌ 换衣处理失败:', error);\n    showNotification('换衣处理失败: ' + error.message, 'error');\n    throw error;\n  }\n}\n\n/**\n * 处理换脸任务 - 重构版本\n */\nexport async function processFaceSwapImage(sourceImageFile, targetImageFile, options = {}) {\n  const {\n    onProgress = () => {},\n    strength = 0.8\n  } = options;\n\n  try {\n    console.log('🚀 开始换脸处理 (重构版本)');\n\n    // 初始化WebSocket连接\n    onProgress('正在连接服务器...', 5);\n    await initializeWebSocketClient();\n\n    // 上传图片\n    onProgress('正在上传图片...', 10);\n    const [sourceImage, targetImage] = await Promise.all([\n      uploadImageToServer(sourceImageFile),\n      uploadImageToServer(targetImageFile)\n    ]);\n    console.log('📤 图片上传成功');\n\n    // 准备工作流\n    onProgress('正在准备工作流...', 20);\n    const workflow = prepareFaceSwapWorkflow(sourceImage, targetImage, { strength });\n\n    // 提交任务\n    onProgress('正在提交任务...', 30);\n    const submitResult = await wsClient.submitTask(workflow);\n    const promptId = submitResult.promptId;\n    console.log(`✅ 任务提交成功: ${promptId}`);\n\n    // 等待任务完成\n    onProgress('正在处理图片...', 40);\n    const results = await wsClient.waitForTaskCompletion(promptId, (status, progress) => {\n      const adjustedProgress = Math.min(90, Math.max(40, 40 + (progress * 0.5)));\n      onProgress(status, adjustedProgress);\n    });\n\n    // 获取结果图片URL\n    onProgress('正在获取结果...', 95);\n    const resultImageUrl = extractImageUrl(results);\n\n    if (!resultImageUrl) {\n      throw new Error('未能获取处理结果');\n    }\n\n    console.log('🎉 换脸处理完成:', resultImageUrl);\n    onProgress('处理完成', 100);\n\n    // 消耗积分\n    await consumePoints('faceswap');\n\n    return resultImageUrl;\n\n  } catch (error) {\n    console.error('❌ 换脸处理失败:', error);\n    showNotification('换脸处理失败: ' + error.message, 'error');\n    throw error;\n  }\n}\n\n/**\n * 上传图片到服务器\n */\nasync function uploadImageToServer(imageFile) {\n  const formData = new FormData();\n  formData.append('image', imageFile);\n  formData.append('type', 'input');\n\n  const response = await fetch('/api/images/upload', {\n    method: 'POST',\n    body: formData\n  });\n\n  if (!response.ok) {\n    throw new Error(`图片上传失败: ${response.statusText}`);\n  }\n\n  const result = await response.json();\n  return result.data;\n}\n\n/**\n * 准备换衣工作流\n */\nfunction prepareUndressWorkflow(uploadedImage, options) {\n  const workflow = JSON.parse(JSON.stringify(undressWorkflow));\n\n  // 设置输入图片\n  if (workflow['10'] && workflow['10'].inputs) {\n    workflow['10'].inputs.image = uploadedImage.filename;\n  }\n\n  // 设置参数\n  if (workflow['3'] && workflow['3'].inputs) {\n    workflow['3'].inputs.denoise = options.strength;\n    workflow['3'].inputs.steps = options.steps;\n    workflow['3'].inputs.cfg = options.cfg;\n  }\n\n  return workflow;\n}\n\n/**\n * 准备换脸工作流\n */\nfunction prepareFaceSwapWorkflow(sourceImage, targetImage, options) {\n  const workflow = JSON.parse(JSON.stringify(faceSwapWorkflow));\n\n  // 设置输入图片\n  if (workflow['source_image'] && workflow['source_image'].inputs) {\n    workflow['source_image'].inputs.image = sourceImage.filename;\n  }\n\n  if (workflow['target_image'] && workflow['target_image'].inputs) {\n    workflow['target_image'].inputs.image = targetImage.filename;\n  }\n\n  // 设置参数\n  if (workflow['faceswap'] && workflow['faceswap'].inputs) {\n    workflow['faceswap'].inputs.strength = options.strength;\n  }\n\n  return workflow;\n}\n\n/**\n * 从结果中提取图片URL\n */\nfunction extractImageUrl(results) {\n  // 查找输出节点的图片\n  for (const nodeId in results) {\n    const nodeOutput = results[nodeId];\n    if (nodeOutput && nodeOutput.length > 0 && nodeOutput[0].url) {\n      return nodeOutput[0].url;\n    }\n  }\n  return null;\n}\n\n/**\n * 消耗积分\n */\nasync function consumePoints(type) {\n  try {\n    const pointsToConsume = type === 'undress' ? 10 : 15;\n\n    // 优先从等级卡扣除\n    const levelCardResult = await levelCardPointsManager.consumePoints(pointsToConsume);\n    if (levelCardResult.success) {\n      console.log(`✅ 从等级卡消耗 ${pointsToConsume} 积分`);\n      return;\n    }\n\n    // 从普通积分扣除\n    const pointsResult = await pointsManager.consumePoints(pointsToConsume);\n    if (pointsResult.success) {\n      console.log(`✅ 从普通积分消耗 ${pointsToConsume} 积分`);\n      return;\n    }\n\n    throw new Error('积分不足');\n  } catch (error) {\n    console.error('❌ 消耗积分失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 获取WebSocket客户端状态\n */\nexport function getWebSocketStatus() {\n  return {\n    connected: wsClient ? wsClient.isConnected() : false,\n    clientId: wsClient ? wsClient.clientId : null\n  };\n}\n\n/**\n * 关闭WebSocket连接\n */\nexport function closeWebSocketConnection() {\n  if (wsClient) {\n    wsClient.close();\n    wsClient = null;\n  }\n}\n\n// 页面卸载时关闭连接\nwindow.addEventListener('beforeunload', () => {\n  closeWebSocketConnection();\n});\n\n// 导出所有公共函数\nexport {\n  initializeWebSocketClient,\n  processUndressImage,\n  processFaceSwapImage,\n  getWebSocketStatus,\n  closeWebSocketConnection\n};\n"
        }
    ]
}