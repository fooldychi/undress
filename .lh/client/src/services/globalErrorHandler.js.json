{
    "sourceFile": "client/src/services/globalErrorHandler.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752899660459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752900067878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,23 +74,23 @@\n export function showGlobalError(error, options = {}) {\n   console.error('🚨 全局错误处理器捕获错误:', error)\n \n   let errorType = ERROR_TYPES.UNKNOWN_ERROR\n-  let title = '系统错误'\n-  let message = '系统发生未知错误，请稍后重试'\n-  let showRetry = true\n+  let title = '服务器不可用'\n+  let message = '目前服务器不可用，请刷新页面或稍后再试！'\n+  let showRetry = false // 默认不显示重试按钮\n \n-  // 根据错误类型设置不同的提示\n+  // 根据错误类型设置提示\n   if (isComfyUIServerError(error)) {\n     errorType = ERROR_TYPES.COMFYUI_SERVER_UNAVAILABLE\n-    title = 'ComfyUI 服务器连接异常'\n-    message = 'ComfyUI 服务器暂时不可用，这可能是由于服务器维护或网络问题导致的。请稍后重试或刷新页面。'\n-    showRetry = true\n+    title = '服务器不可用'\n+    message = '目前服务器不可用，请刷新页面或稍后再试！'\n+    showRetry = false // ComfyUI 服务器错误只提供刷新页面\n   } else if (isNetworkError(error)) {\n     errorType = ERROR_TYPES.NETWORK_ERROR\n-    title = '网络连接异常'\n-    message = '网络连接出现问题，请检查您的网络连接后重试。'\n-    showRetry = true\n+    title = '服务器不可用'\n+    message = '目前服务器不可用，请刷新页面或稍后再试！'\n+    showRetry = false\n   } else if (isAuthError(error)) {\n     errorType = ERROR_TYPES.AUTH_ERROR\n     title = '登录状态异常'\n     message = '您的登录状态已过期，请刷新页面重新登录。'\n"
                },
                {
                    "date": 1752900496905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,25 +101,13 @@\n   if (options.title) title = options.title\n   if (options.message) message = options.message\n   if (options.showRetry !== undefined) showRetry = options.showRetry\n \n-  // 获取错误详情\n-  let details = ''\n-  if (error?.stack) {\n-    details = error.stack\n-  } else if (error?.message) {\n-    details = error.message\n-  } else if (typeof error === 'string') {\n-    details = error\n-  }\n-\n   // 更新错误状态\n   errorState.value = {\n     visible: true,\n     title,\n     message,\n-    details,\n-    showRetry,\n     errorType\n   }\n \n   // 阻止页面交互\n"
                },
                {
                    "date": 1752947431569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,16 @@\n   'ComfyUI服务器不可用',\n   '所有端点测试失败',\n   'ComfyUI服务器不可达',\n   'WebSocket连接失败',\n+  'WebSocket连接后未能锁定服务器',\n   'ComfyUI服务器响应异常',\n   'ComfyUI服务器集群不可用',\n   '个服务器都无法连接',\n   '没有找到健康的服务器',\n-  '没有可用的健康服务器'\n+  '没有可用的健康服务器',\n+  '无法获取可用的ComfyUI服务器',\n+  '负载均衡器未返回有效的服务器URL'\n ]\n \n // 检查是否为 ComfyUI 服务器错误\n function isComfyUIServerError(error) {\n"
                },
                {
                    "date": 1753553565119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,21 @@\n   // 拦截未捕获的 Promise 错误\n   window.addEventListener('unhandledrejection', (event) => {\n     console.error('🚨 未处理的 Promise 拒绝:', event.reason)\n \n+    // Vue递归更新错误应该暴露给开发者，不要掩盖\n+    if (event.reason?.message?.includes('Maximum recursive updates exceeded')) {\n+      console.error('❌ Vue递归更新错误 - 需要修复代码逻辑!')\n+      console.error('检查以下可能原因:')\n+      console.error('1. watch中修改被监听的数据')\n+      console.error('2. computed中修改响应式数据')\n+      console.error('3. 模板中调用修改状态的函数')\n+      // 开发环境下不阻止错误，让开发者看到完整错误信息\n+      if (process.env.NODE_ENV === 'development') {\n+        return\n+      }\n+    }\n+\n     // 检查是否为关键错误\n     if (isComfyUIServerError(event.reason) ||\n         isNetworkError(event.reason) ||\n         isAuthError(event.reason)) {\n"
                }
            ],
            "date": 1752899660459,
            "name": "Commit-0",
            "content": "import { ref } from 'vue'\n\n// 全局错误状态\nconst errorState = ref({\n  visible: false,\n  title: '',\n  message: '',\n  details: '',\n  showRetry: true,\n  errorType: null\n})\n\n// 错误类型常量\nexport const ERROR_TYPES = {\n  COMFYUI_SERVER_UNAVAILABLE: 'comfyui_server_unavailable',\n  NETWORK_ERROR: 'network_error',\n  AUTH_ERROR: 'auth_error',\n  UNKNOWN_ERROR: 'unknown_error'\n}\n\n// ComfyUI 服务器不可用的错误关键词\nconst COMFYUI_ERROR_KEYWORDS = [\n  'ComfyUI服务器不可用',\n  '所有端点测试失败',\n  'ComfyUI服务器不可达',\n  'WebSocket连接失败',\n  'ComfyUI服务器响应异常',\n  'ComfyUI服务器集群不可用',\n  '个服务器都无法连接',\n  '没有找到健康的服务器',\n  '没有可用的健康服务器'\n]\n\n// 检查是否为 ComfyUI 服务器错误\nfunction isComfyUIServerError(error) {\n  const errorMessage = error?.message || error?.toString() || ''\n  return COMFYUI_ERROR_KEYWORDS.some(keyword =>\n    errorMessage.includes(keyword)\n  )\n}\n\n// 检查是否为网络错误\nfunction isNetworkError(error) {\n  const errorMessage = error?.message || error?.toString() || ''\n  const networkKeywords = [\n    'Failed to fetch',\n    'NetworkError',\n    'fetch',\n    'ECONNREFUSED',\n    'ENOTFOUND',\n    'timeout'\n  ]\n  return networkKeywords.some(keyword =>\n    errorMessage.toLowerCase().includes(keyword.toLowerCase())\n  )\n}\n\n// 检查是否为认证错误\nfunction isAuthError(error) {\n  const errorMessage = error?.message || error?.toString() || ''\n  const authKeywords = [\n    '登录已过期',\n    '令牌已过期',\n    '无效的访问令牌',\n    '认证验证失败',\n    '401'\n  ]\n  return authKeywords.some(keyword =>\n    errorMessage.includes(keyword)\n  )\n}\n\n// 显示全局错误弹窗\nexport function showGlobalError(error, options = {}) {\n  console.error('🚨 全局错误处理器捕获错误:', error)\n\n  let errorType = ERROR_TYPES.UNKNOWN_ERROR\n  let title = '系统错误'\n  let message = '系统发生未知错误，请稍后重试'\n  let showRetry = true\n\n  // 根据错误类型设置不同的提示\n  if (isComfyUIServerError(error)) {\n    errorType = ERROR_TYPES.COMFYUI_SERVER_UNAVAILABLE\n    title = 'ComfyUI 服务器连接异常'\n    message = 'ComfyUI 服务器暂时不可用，这可能是由于服务器维护或网络问题导致的。请稍后重试或刷新页面。'\n    showRetry = true\n  } else if (isNetworkError(error)) {\n    errorType = ERROR_TYPES.NETWORK_ERROR\n    title = '网络连接异常'\n    message = '网络连接出现问题，请检查您的网络连接后重试。'\n    showRetry = true\n  } else if (isAuthError(error)) {\n    errorType = ERROR_TYPES.AUTH_ERROR\n    title = '登录状态异常'\n    message = '您的登录状态已过期，请刷新页面重新登录。'\n    showRetry = false\n  }\n\n  // 应用自定义选项\n  if (options.title) title = options.title\n  if (options.message) message = options.message\n  if (options.showRetry !== undefined) showRetry = options.showRetry\n\n  // 获取错误详情\n  let details = ''\n  if (error?.stack) {\n    details = error.stack\n  } else if (error?.message) {\n    details = error.message\n  } else if (typeof error === 'string') {\n    details = error\n  }\n\n  // 更新错误状态\n  errorState.value = {\n    visible: true,\n    title,\n    message,\n    details,\n    showRetry,\n    errorType\n  }\n\n  // 阻止页面交互\n  document.body.style.overflow = 'hidden'\n\n  return errorState\n}\n\n// 隐藏全局错误弹窗\nexport function hideGlobalError() {\n  errorState.value.visible = false\n  document.body.style.overflow = ''\n}\n\n// 获取错误状态\nexport function getErrorState() {\n  return errorState\n}\n\n// 全局错误拦截器\nexport function setupGlobalErrorHandler() {\n  // 拦截未捕获的 Promise 错误\n  window.addEventListener('unhandledrejection', (event) => {\n    console.error('🚨 未处理的 Promise 拒绝:', event.reason)\n\n    // 检查是否为关键错误\n    if (isComfyUIServerError(event.reason) ||\n        isNetworkError(event.reason) ||\n        isAuthError(event.reason)) {\n      showGlobalError(event.reason)\n      event.preventDefault() // 阻止默认的错误处理\n    }\n  })\n\n  // 拦截未捕获的 JavaScript 错误\n  window.addEventListener('error', (event) => {\n    console.error('🚨 未捕获的 JavaScript 错误:', event.error)\n\n    // 检查是否为关键错误\n    if (isComfyUIServerError(event.error) ||\n        isNetworkError(event.error) ||\n        isAuthError(event.error)) {\n      showGlobalError(event.error)\n    }\n  })\n\n  console.log('✅ 全局错误处理器已启动')\n}\n\n// 手动触发错误处理（供组件使用）\nexport function handleError(error, context = '') {\n  console.error(`🚨 ${context} 错误:`, error)\n\n  // 检查是否为需要全局处理的错误\n  if (isComfyUIServerError(error) ||\n      isNetworkError(error) ||\n      isAuthError(error)) {\n    showGlobalError(error)\n    return true // 表示已被全局处理\n  }\n\n  return false // 表示需要组件自行处理\n}\n\nexport default {\n  showGlobalError,\n  hideGlobalError,\n  getErrorState,\n  setupGlobalErrorHandler,\n  handleError,\n  ERROR_TYPES\n}\n"
        }
    ]
}