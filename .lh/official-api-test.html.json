{
    "sourceFile": "official-api-test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752515683456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752515683456,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ComfyUI 官方 API 测试</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .endpoint-test {\n            margin: 15px 0;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            background: #f9f9f9;\n        }\n        .log {\n            background: #f8f9fa;\n            border: 1px solid #e9ecef;\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 5px;\n            font-family: monospace;\n            font-size: 12px;\n            max-height: 400px;\n            overflow-y: auto;\n            white-space: pre-wrap;\n        }\n        .response {\n            background: #e7f3ff;\n            border: 1px solid #b3d9ff;\n            padding: 10px;\n            margin: 10px 0;\n            border-radius: 3px;\n            font-family: monospace;\n            font-size: 11px;\n            max-height: 200px;\n            overflow-y: auto;\n        }\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            font-weight: bold;\n            padding: 5px 10px;\n            border-radius: 3px;\n            display: inline-block;\n            margin: 5px 0;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .server-section {\n            margin: 20px 0;\n            padding: 15px;\n            border: 2px solid #007bff;\n            border-radius: 8px;\n            background: #f8f9ff;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔍 ComfyUI 官方 API 端点测试</h1>\n        <p>基于 <a href=\"https://docs.comfy.org/development/comfyui-server/comms_routes\" target=\"_blank\">ComfyUI 官方文档</a> 的 API 端点测试。</p>\n\n        <div>\n            <button onclick=\"testAllOfficialEndpoints()\">测试所有官方端点</button>\n            <button onclick=\"testQueueEndpoint()\">仅测试队列端点</button>\n            <button onclick=\"clearResults()\">清除结果</button>\n        </div>\n\n        <div id=\"results\"></div>\n        <div class=\"log\" id=\"log\"></div>\n    </div>\n\n    <script>\n        const servers = [\n            'https://l9s75ay3rp-8188.cnb.run',\n            'https://0rv00xh2vg-8188.cnb.run'\n        ];\n\n        // 基于官方文档的端点列表\n        const officialEndpoints = [\n            { path: '/', method: 'GET', description: '加载 ComfyUI 网页' },\n            { path: '/embeddings', method: 'GET', description: '获取可用的 embeddings 列表' },\n            { path: '/extensions', method: 'GET', description: '获取扩展列表' },\n            { path: '/workflow_templates', method: 'GET', description: '获取工作流模板' },\n            { path: '/system_stats', method: 'GET', description: '获取系统信息' },\n            { path: '/prompt', method: 'GET', description: '获取当前状态' },\n            { path: '/object_info', method: 'GET', description: '获取所有节点类型详情' },\n            { path: '/history', method: 'GET', description: '获取队列历史' },\n            { path: '/queue', method: 'GET', description: '获取队列状态' }\n        ];\n\n        let logElement = document.getElementById('log');\n        let resultsElement = document.getElementById('results');\n\n        function log(message) {\n            const timestamp = new Date().toLocaleTimeString();\n            const logEntry = `[${timestamp}] ${message}\\n`;\n            console.log(message);\n            logElement.textContent += logEntry;\n            logElement.scrollTop = logElement.scrollHeight;\n        }\n\n        function clearResults() {\n            logElement.textContent = '';\n            resultsElement.innerHTML = '';\n        }\n\n        async function testEndpoint(serverUrl, endpoint) {\n            const fullUrl = `${serverUrl}${endpoint.path}`;\n            log(`🔍 测试: ${endpoint.method} ${fullUrl}`);\n            log(`   描述: ${endpoint.description}`);\n\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 15000);\n\n                const startTime = Date.now();\n                const response = await fetch(fullUrl, {\n                    method: endpoint.method,\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': 'application/json, text/html, text/plain, */*',\n                        'Cache-Control': 'no-cache',\n                        'User-Agent': 'ComfyUI-Test-Client/1.0'\n                    }\n                });\n\n                clearTimeout(timeoutId);\n                const endTime = Date.now();\n                const responseTime = endTime - startTime;\n\n                log(`   状态码: ${response.status} ${response.statusText}`);\n                log(`   响应时间: ${responseTime}ms`);\n                log(`   Content-Type: ${response.headers.get('content-type')}`);\n\n                const result = {\n                    endpoint: endpoint.path,\n                    method: endpoint.method,\n                    description: endpoint.description,\n                    success: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    responseTime: responseTime,\n                    contentType: response.headers.get('content-type')\n                };\n\n                if (response.ok) {\n                    try {\n                        const responseText = await response.text();\n                        log(`   响应长度: ${responseText.length} 字符`);\n\n                        // 尝试解析 JSON\n                        if (response.headers.get('content-type')?.includes('application/json')) {\n                            try {\n                                const data = JSON.parse(responseText);\n                                log(`   ✅ JSON 解析成功`);\n\n                                // 特殊处理队列端点\n                                if (endpoint.path === '/queue') {\n                                    log(`   📊 队列数据分析:`);\n                                    log(`     - 数据类型: ${typeof data}`);\n                                    log(`     - 数据键: ${Object.keys(data).join(', ')}`);\n\n                                    // 分析队列结构\n                                    if (data.queue_running !== undefined) {\n                                        const runningCount = Array.isArray(data.queue_running) ? data.queue_running.length : data.queue_running;\n                                        log(`     - queue_running: ${runningCount} (类型: ${typeof data.queue_running})`);\n                                    }\n                                    if (data.queue_pending !== undefined) {\n                                        const pendingCount = Array.isArray(data.queue_pending) ? data.queue_pending.length : data.queue_pending;\n                                        log(`     - queue_pending: ${pendingCount} (类型: ${typeof data.queue_pending})`);\n                                    }\n\n                                    result.queueData = data;\n                                }\n\n                                result.data = data;\n                                result.rawText = responseText.substring(0, 1000);\n                            } catch (parseError) {\n                                log(`   ⚠️ JSON 解析失败: ${parseError.message}`);\n                                result.parseError = parseError.message;\n                                result.rawText = responseText.substring(0, 500);\n                            }\n                        } else {\n                            log(`   📄 非 JSON 响应`);\n                            result.rawText = responseText.substring(0, 500);\n                        }\n\n                    } catch (textError) {\n                        log(`   ❌ 读取响应失败: ${textError.message}`);\n                        result.error = textError.message;\n                    }\n                } else {\n                    log(`   ❌ HTTP 错误: ${response.status} ${response.statusText}`);\n                    try {\n                        const errorText = await response.text();\n                        result.errorText = errorText.substring(0, 200);\n                        log(`   错误响应: ${result.errorText}`);\n                    } catch (e) {\n                        log(`   无法读取错误响应`);\n                    }\n                }\n\n                return result;\n\n            } catch (error) {\n                log(`   ❌ 请求失败: ${error.message}`);\n\n                let errorType = '未知错误';\n                if (error.name === 'AbortError') {\n                    errorType = '请求超时';\n                } else if (error.message.includes('CORS')) {\n                    errorType = 'CORS跨域错误';\n                } else if (error.message.includes('Failed to fetch')) {\n                    errorType = '网络连接失败';\n                }\n\n                return {\n                    endpoint: endpoint.path,\n                    method: endpoint.method,\n                    description: endpoint.description,\n                    success: false,\n                    error: error.message,\n                    errorType: errorType\n                };\n            }\n        }\n\n        async function testServer(serverUrl, endpointsToTest = officialEndpoints) {\n            log(`\\n🚀 开始测试服务器: ${serverUrl}`);\n\n            const serverDiv = document.createElement('div');\n            serverDiv.className = 'server-section';\n            serverDiv.innerHTML = `<h3>🖥️ ${serverUrl}</h3>`;\n\n            const results = [];\n\n            for (const endpoint of endpointsToTest) {\n                const result = await testEndpoint(serverUrl, endpoint);\n                results.push(result);\n\n                // 创建端点结果显示\n                const endpointDiv = document.createElement('div');\n                endpointDiv.className = 'endpoint-test';\n\n                const status = result.success ? '✅' : '❌';\n                const statusClass = result.success ? 'success' : 'error';\n\n                let content = `\n                    <h4>${status} ${result.method} ${result.endpoint}</h4>\n                    <div class=\"status ${statusClass}\">${result.success ? '成功' : '失败'}</div>\n                    <div><strong>描述:</strong> ${result.description}</div>\n                `;\n\n                if (result.responseTime) {\n                    content += `<div><strong>响应时间:</strong> ${result.responseTime}ms</div>`;\n                }\n\n                if (result.status) {\n                    content += `<div><strong>状态码:</strong> ${result.status} ${result.statusText}</div>`;\n                }\n\n                if (result.contentType) {\n                    content += `<div><strong>Content-Type:</strong> ${result.contentType}</div>`;\n                }\n\n                // 特殊处理队列数据\n                if (result.endpoint === '/queue' && result.queueData) {\n                    content += `<div><strong>队列信息:</strong></div>`;\n                    if (result.queueData.queue_running !== undefined) {\n                        const runningCount = Array.isArray(result.queueData.queue_running) ?\n                            result.queueData.queue_running.length : result.queueData.queue_running;\n                        content += `<div>- 运行中: ${runningCount}</div>`;\n                    }\n                    if (result.queueData.queue_pending !== undefined) {\n                        const pendingCount = Array.isArray(result.queueData.queue_pending) ?\n                            result.queueData.queue_pending.length : result.queueData.queue_pending;\n                        content += `<div>- 等待中: ${pendingCount}</div>`;\n                    }\n                }\n\n                if (result.error) {\n                    content += `<div style=\"color: #dc3545;\"><strong>错误:</strong> ${result.error}</div>`;\n                    if (result.errorType) {\n                        content += `<div style=\"color: #dc3545;\"><strong>错误类型:</strong> ${result.errorType}</div>`;\n                    }\n                }\n\n                if (result.rawText) {\n                    content += `<details><summary>原始响应</summary><div class=\"response\">${result.rawText}</div></details>`;\n                }\n\n                endpointDiv.innerHTML = content;\n                serverDiv.appendChild(endpointDiv);\n            }\n\n            resultsElement.appendChild(serverDiv);\n            log(`✅ 服务器 ${serverUrl} 测试完成\\n`);\n\n            return results;\n        }\n\n        window.testAllOfficialEndpoints = async function() {\n            clearResults();\n            log('🚀 开始测试所有官方 API 端点...\\n');\n\n            for (const server of servers) {\n                await testServer(server);\n            }\n\n            log('✅ 所有端点测试完成');\n        };\n\n        window.testQueueEndpoint = async function() {\n            clearResults();\n            log('🚀 仅测试队列端点...\\n');\n\n            const queueEndpoint = officialEndpoints.find(ep => ep.path === '/queue');\n\n            for (const server of servers) {\n                await testServer(server, [queueEndpoint]);\n            }\n\n            log('✅ 队列端点测试完成');\n        };\n\n        window.clearResults = clearResults;\n\n        // 页面加载时自动测试队列端点\n        window.addEventListener('load', () => {\n            log('📋 页面加载完成，开始测试队列端点...');\n            setTimeout(() => {\n                testQueueEndpoint();\n            }, 1000);\n        });\n    </script>\n</body>\n</html>\n"
        }
    ]
}