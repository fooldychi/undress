{
    "sourceFile": "admin/complete-cards-demo.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752324476375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752324504912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,11 +89,10 @@\n                     </el-button>\n                 </div>\n \n                 <el-table :data=\"cardList\" v-loading=\"loading\" border style=\"width: 100%\">\n-                    <el-table-column prop=\"card_number\" label=\"卡号\" width=\"150\" />\n-                    <el-table-column prop=\"card_password\" label=\"卡密\" width=\"120\" />\n-                    <el-table-column label=\"类型\" width=\"100\">\n+                    <el-table-column prop=\"card_number\" label=\"卡号\" width=\"180\" />\n+                    <el-table-column label=\"类型\" width=\"120\">\n                         <template #default=\"{ row }\">\n                             <span>{{ row.icon }} {{ row.type_name }}</span>\n                         </template>\n                     </el-table-column>\n@@ -123,19 +122,26 @@\n                         <template #default=\"{ row }\">\n                             {{ formatDate(row.created_at) }}\n                         </template>\n                     </el-table-column>\n-                    <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\n+                    <el-table-column label=\"操作\" width=\"150\" fixed=\"right\">\n                         <template #default=\"{ row }\">\n                             <el-button\n+                                type=\"text\"\n+                                size=\"small\"\n+                                @click=\"copyCardInfo(row)\"\n+                            >\n+                                <el-icon><DocumentCopy /></el-icon>\n+                                复制卡密\n+                            </el-button>\n+                            <el-button\n                                 v-if=\"row.bound_user_id\"\n                                 type=\"text\"\n                                 size=\"small\"\n                                 @click=\"handleUnbind(row)\"\n                             >\n                                 解绑\n                             </el-button>\n-                            <span v-else class=\"no-action\">无操作</span>\n                         </template>\n                     </el-table-column>\n                 </el-table>\n             </div>\n"
                },
                {
                    "date": 1752324518683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,24 +145,10 @@\n                     </el-table-column>\n                 </el-table>\n             </div>\n \n-            <!-- 生成体验卡弹窗 -->\n-            <el-dialog v-model=\"generateDialogVisible\" title=\"生成体验卡\" width=\"400px\">\n-                <el-form :model=\"generateForm\" label-width=\"80px\">\n-                    <el-form-item label=\"数量\">\n-                        <el-input-number v-model=\"generateForm.count\" :min=\"1\" :max=\"100\" />\n-                    </el-form-item>\n-                    <el-form-item label=\"积分\">\n-                        <el-input-number v-model=\"generateForm.points\" :min=\"1\" :max=\"1000\" />\n-                    </el-form-item>\n-                </el-form>\n-                <template #footer>\n-                    <el-button @click=\"generateDialogVisible = false\">取消</el-button>\n-                    <el-button type=\"primary\" @click=\"handleGenerate\">生成</el-button>\n-                </template>\n-            </el-dialog>\n \n+\n             <!-- 批量生成等级卡弹窗 -->\n             <el-dialog\n                 v-model=\"batchGenerateDialogVisible\"\n                 title=\"批量生成等级卡\"\n"
                },
                {
                    "date": 1752324545827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,9 +246,8 @@\n             setup() {\n                 // 响应式数据\n                 const loading = ref(false);\n                 const cardList = ref([]);\n-                const generateDialogVisible = ref(false);\n                 const batchGenerateDialogVisible = ref(false);\n                 const cardTypes = ref([]);\n                 const cardTypesLoading = ref(false);\n                 const batchGenerating = ref(false);\n@@ -256,13 +255,8 @@\n                 const resultDialogTitle = ref('');\n                 const generatedCards = ref([]);\n                 const selectedCardTypeName = ref('');\n \n-                const generateForm = reactive({\n-                    count: 10,\n-                    points: 100\n-                });\n-\n                 const batchGenerateForm = reactive({\n                     cardTypeId: null,\n                     count: 5\n                 });\n"
                },
                {
                    "date": 1752324579359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -334,10 +334,35 @@\n                         loading.value = false;\n                     }\n                 };\n \n-                const showGenerateDialog = () => {\n-                    generateDialogVisible.value = true;\n+                // 复制卡号卡密\n+                const copyCardInfo = async (row) => {\n+                    try {\n+                        const copyText = `卡号: ${row.card_number}\\n卡密: ${row.card_password}\\n类型: ${row.type_name}\\n积分: ${row.remaining_points}/${row.total_points}\\n价格: ¥${row.price}`;\n+\n+                        // 使用现代浏览器的 Clipboard API\n+                        if (navigator.clipboard && window.isSecureContext) {\n+                            await navigator.clipboard.writeText(copyText);\n+                        } else {\n+                            // 降级方案：使用传统的 document.execCommand\n+                            const textArea = document.createElement('textarea');\n+                            textArea.value = copyText;\n+                            textArea.style.position = 'fixed';\n+                            textArea.style.left = '-999999px';\n+                            textArea.style.top = '-999999px';\n+                            document.body.appendChild(textArea);\n+                            textArea.focus();\n+                            textArea.select();\n+                            document.execCommand('copy');\n+                            document.body.removeChild(textArea);\n+                        }\n+\n+                        ElMessage.success('卡号卡密已复制到剪贴板');\n+                    } catch (error) {\n+                        console.error('复制失败:', error);\n+                        ElMessage.error('复制失败，请手动复制');\n+                    }\n                 };\n \n                 const showBatchGenerateDialog = async () => {\n                     await loadCardTypes();\n@@ -357,21 +382,8 @@\n                         cardTypesLoading.value = false;\n                     }\n                 };\n \n-                const handleGenerate = async () => {\n-                    try {\n-                        // 模拟生成体验卡\n-                        await new Promise(resolve => setTimeout(resolve, 800));\n-                        ElMessage.success(`已生成 ${generateForm.count} 张体验卡`);\n-                        generateDialogVisible.value = false;\n-                        loadCards();\n-                    } catch (error) {\n-                        console.error('生成体验卡失败:', error);\n-                        ElMessage.error('生成体验卡失败');\n-                    }\n-                };\n-\n                 const handleBatchGenerate = async () => {\n                     if (!batchGenerateForm.cardTypeId) {\n                         ElMessage.warning('请选择等级卡类型');\n                         return;\n"
                },
                {
                    "date": 1752324608232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -491,24 +491,21 @@\n \n                 return {\n                     loading,\n                     cardList,\n-                    generateDialogVisible,\n                     batchGenerateDialogVisible,\n                     cardTypes,\n                     cardTypesLoading,\n                     batchGenerating,\n                     resultDialogVisible,\n                     resultDialogTitle,\n                     generatedCards,\n                     selectedCardTypeName,\n-                    generateForm,\n                     batchGenerateForm,\n                     formatDate,\n                     loadCards,\n-                    showGenerateDialog,\n+                    copyCardInfo,\n                     showBatchGenerateDialog,\n-                    handleGenerate,\n                     handleBatchGenerate,\n                     copyAllCards,\n                     handleUnbind\n                 };\n"
                }
            ],
            "date": 1752324476375,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>等级卡管理系统 - 完整演示</title>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/element-plus/dist/index.css\">\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n    <script src=\"https://unpkg.com/element-plus/dist/index.full.js\"></script>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f7fa;\n        }\n        .cards-page {\n            max-width: 1400px;\n            margin: 0 auto;\n        }\n        .page-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 20px;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 12px rgba(0,0,0,0.1);\n        }\n        .header-actions {\n            display: flex;\n            gap: 12px;\n        }\n        .page-title {\n            font-size: 24px;\n            font-weight: 600;\n            color: #303133;\n            margin: 0;\n        }\n        .cards-table-container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 12px rgba(0,0,0,0.1);\n        }\n        .no-action {\n            color: #c0c4cc;\n            font-size: 12px;\n        }\n        .cards-table {\n            max-height: 400px;\n            overflow-y: auto;\n        }\n        .result-summary {\n            margin-bottom: 16px;\n        }\n        .dialog-footer {\n            display: flex;\n            justify-content: flex-end;\n            gap: 12px;\n        }\n        .status-tag {\n            font-size: 12px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <div class=\"cards-page\">\n            <!-- 页面头部 -->\n            <div class=\"page-header\">\n                <h1 class=\"page-title\">🎫 等级卡管理</h1>\n                <div class=\"header-actions\">\n                    <el-button type=\"primary\" @click=\"showBatchGenerateDialog\">\n                        <el-icon><Plus /></el-icon>\n                        批量生成等级卡\n                    </el-button>\n                </div>\n            </div>\n\n            <!-- 等级卡列表 -->\n            <div class=\"cards-table-container\">\n                <div style=\"margin-bottom: 16px; display: flex; justify-content: space-between; align-items: center;\">\n                    <h3 style=\"margin: 0;\">等级卡列表</h3>\n                    <el-button @click=\"loadCards\" :loading=\"loading\">\n                        <el-icon><Refresh /></el-icon>\n                        刷新\n                    </el-button>\n                </div>\n\n                <el-table :data=\"cardList\" v-loading=\"loading\" border style=\"width: 100%\">\n                    <el-table-column prop=\"card_number\" label=\"卡号\" width=\"150\" />\n                    <el-table-column prop=\"card_password\" label=\"卡密\" width=\"120\" />\n                    <el-table-column label=\"类型\" width=\"100\">\n                        <template #default=\"{ row }\">\n                            <span>{{ row.icon }} {{ row.type_name }}</span>\n                        </template>\n                    </el-table-column>\n                    <el-table-column prop=\"total_points\" label=\"总积分\" width=\"100\" />\n                    <el-table-column prop=\"remaining_points\" label=\"剩余积分\" width=\"100\" />\n                    <el-table-column prop=\"price\" label=\"价格\" width=\"100\">\n                        <template #default=\"{ row }\">\n                            ¥{{ row.price }}\n                        </template>\n                    </el-table-column>\n                    <el-table-column label=\"状态\" width=\"100\">\n                        <template #default=\"{ row }\">\n                            <el-tag\n                                :type=\"row.bound_user_id ? 'success' : 'info'\"\n                                class=\"status-tag\"\n                            >\n                                {{ row.bound_user_id ? '已绑定' : '未绑定' }}\n                            </el-tag>\n                        </template>\n                    </el-table-column>\n                    <el-table-column prop=\"bound_username\" label=\"绑定用户\" width=\"120\">\n                        <template #default=\"{ row }\">\n                            {{ row.bound_username || '-' }}\n                        </template>\n                    </el-table-column>\n                    <el-table-column prop=\"created_at\" label=\"创建时间\" width=\"180\">\n                        <template #default=\"{ row }\">\n                            {{ formatDate(row.created_at) }}\n                        </template>\n                    </el-table-column>\n                    <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\n                        <template #default=\"{ row }\">\n                            <el-button\n                                v-if=\"row.bound_user_id\"\n                                type=\"text\"\n                                size=\"small\"\n                                @click=\"handleUnbind(row)\"\n                            >\n                                解绑\n                            </el-button>\n                            <span v-else class=\"no-action\">无操作</span>\n                        </template>\n                    </el-table-column>\n                </el-table>\n            </div>\n\n            <!-- 生成体验卡弹窗 -->\n            <el-dialog v-model=\"generateDialogVisible\" title=\"生成体验卡\" width=\"400px\">\n                <el-form :model=\"generateForm\" label-width=\"80px\">\n                    <el-form-item label=\"数量\">\n                        <el-input-number v-model=\"generateForm.count\" :min=\"1\" :max=\"100\" />\n                    </el-form-item>\n                    <el-form-item label=\"积分\">\n                        <el-input-number v-model=\"generateForm.points\" :min=\"1\" :max=\"1000\" />\n                    </el-form-item>\n                </el-form>\n                <template #footer>\n                    <el-button @click=\"generateDialogVisible = false\">取消</el-button>\n                    <el-button type=\"primary\" @click=\"handleGenerate\">生成</el-button>\n                </template>\n            </el-dialog>\n\n            <!-- 批量生成等级卡弹窗 -->\n            <el-dialog\n                v-model=\"batchGenerateDialogVisible\"\n                title=\"批量生成等级卡\"\n                width=\"500px\"\n                :close-on-click-modal=\"false\"\n            >\n                <el-form :model=\"batchGenerateForm\" label-width=\"100px\">\n                    <el-form-item label=\"等级卡类型\" required>\n                        <el-select\n                            v-model=\"batchGenerateForm.cardTypeId\"\n                            placeholder=\"请选择等级卡类型\"\n                            style=\"width: 100%\"\n                            :loading=\"cardTypesLoading\"\n                        >\n                            <el-option\n                                v-for=\"cardType in cardTypes\"\n                                :key=\"cardType.id\"\n                                :label=\"`${cardType.icon} ${cardType.name} (${cardType.points}积分 - ¥${cardType.price})`\"\n                                :value=\"cardType.id\"\n                            />\n                        </el-select>\n                    </el-form-item>\n                    <el-form-item label=\"生成数量\" required>\n                        <el-input-number\n                            v-model=\"batchGenerateForm.count\"\n                            :min=\"1\"\n                            :max=\"100\"\n                            style=\"width: 100%\"\n                        />\n                    </el-form-item>\n                </el-form>\n                <template #footer>\n                    <el-button @click=\"batchGenerateDialogVisible = false\">取消</el-button>\n                    <el-button\n                        type=\"primary\"\n                        @click=\"handleBatchGenerate\"\n                        :loading=\"batchGenerating\"\n                    >\n                        生成\n                    </el-button>\n                </template>\n            </el-dialog>\n\n            <!-- 生成结果弹窗 -->\n            <el-dialog\n                v-model=\"resultDialogVisible\"\n                :title=\"resultDialogTitle\"\n                width=\"80%\"\n                :close-on-click-modal=\"false\"\n                class=\"result-dialog\"\n            >\n                <div class=\"result-content\">\n                    <div class=\"result-summary\">\n                        <el-alert\n                            :title=\"`成功生成 ${generatedCards.length} 张${selectedCardTypeName}！`\"\n                            type=\"success\"\n                            :closable=\"false\"\n                            show-icon\n                        />\n                    </div>\n\n                    <div class=\"cards-table\">\n                        <el-table :data=\"generatedCards\" border style=\"width: 100%\">\n                            <el-table-column prop=\"cardNumber\" label=\"卡号\" width=\"200\" />\n                            <el-table-column prop=\"cardPassword\" label=\"卡密\" width=\"200\" />\n                            <el-table-column prop=\"typeName\" label=\"类型\" width=\"120\" />\n                            <el-table-column prop=\"points\" label=\"积分\" width=\"100\" />\n                            <el-table-column prop=\"price\" label=\"价格\" width=\"100\">\n                                <template #default=\"{ row }\">\n                                    ¥{{ row.price }}\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                    </div>\n                </div>\n\n                <template #footer>\n                    <div class=\"dialog-footer\">\n                        <el-button @click=\"resultDialogVisible = false\">关闭</el-button>\n                        <el-button type=\"primary\" @click=\"copyAllCards\">\n                            <el-icon><DocumentCopy /></el-icon>\n                            一键复制所有卡号卡密\n                        </el-button>\n                    </div>\n                </template>\n            </el-dialog>\n        </div>\n    </div>\n\n    <script>\n        const { createApp, ref, reactive, onMounted } = Vue;\n        const { ElMessage, ElMessageBox } = ElementPlus;\n\n        createApp({\n            setup() {\n                // 响应式数据\n                const loading = ref(false);\n                const cardList = ref([]);\n                const generateDialogVisible = ref(false);\n                const batchGenerateDialogVisible = ref(false);\n                const cardTypes = ref([]);\n                const cardTypesLoading = ref(false);\n                const batchGenerating = ref(false);\n                const resultDialogVisible = ref(false);\n                const resultDialogTitle = ref('');\n                const generatedCards = ref([]);\n                const selectedCardTypeName = ref('');\n\n                const generateForm = reactive({\n                    count: 10,\n                    points: 100\n                });\n\n                const batchGenerateForm = reactive({\n                    cardTypeId: null,\n                    count: 5\n                });\n\n                // 模拟数据\n                const mockCardList = [\n                    {\n                        id: 1,\n                        card_number: 'DEMO001',\n                        card_password: 'ABC123',\n                        type_name: '体验卡',\n                        icon: '🎁',\n                        total_points: 20,\n                        remaining_points: 20,\n                        price: 0.00,\n                        bound_username: null,\n                        bound_user_id: null,\n                        bound_at: null,\n                        created_at: new Date().toISOString()\n                    },\n                    {\n                        id: 2,\n                        card_number: 'DEMO002',\n                        card_password: 'DEF456',\n                        type_name: '基础卡',\n                        icon: '🥉',\n                        total_points: 300,\n                        remaining_points: 300,\n                        price: 9.90,\n                        bound_username: null,\n                        bound_user_id: null,\n                        bound_at: null,\n                        created_at: new Date().toISOString()\n                    },\n                    {\n                        id: 3,\n                        card_number: 'DEMO003',\n                        card_password: 'GHI789',\n                        type_name: '高级卡',\n                        icon: '🥈',\n                        total_points: 1000,\n                        remaining_points: 800,\n                        price: 30.00,\n                        bound_username: 'testuser',\n                        bound_user_id: 1,\n                        bound_at: new Date().toISOString(),\n                        created_at: new Date().toISOString()\n                    }\n                ];\n\n                const mockCardTypes = [\n                    { id: 1, name: '体验卡', icon: '🎁', points: 20, price: 0.00, description: '免费体验卡，每张20积分' },\n                    { id: 2, name: '基础卡', icon: '🥉', points: 300, price: 9.90, description: '适合轻度使用的用户' },\n                    { id: 3, name: '高级卡', icon: '🥈', points: 1000, price: 30.00, description: '适合中度使用的用户' },\n                    { id: 4, name: '至尊卡', icon: '🥇', points: 2000, price: 50.00, description: '适合重度使用的用户' }\n                ];\n\n                // 方法\n                const formatDate = (date) => {\n                    if (!date) return '';\n                    return new Date(date).toLocaleString();\n                };\n\n                const loadCards = async () => {\n                    loading.value = true;\n                    try {\n                        // 模拟API调用\n                        await new Promise(resolve => setTimeout(resolve, 500));\n                        cardList.value = mockCardList;\n                        ElMessage.success('等级卡列表加载成功');\n                    } catch (error) {\n                        console.error('加载等级卡列表失败:', error);\n                        ElMessage.error('加载等级卡列表失败');\n                    } finally {\n                        loading.value = false;\n                    }\n                };\n\n                const showGenerateDialog = () => {\n                    generateDialogVisible.value = true;\n                };\n\n                const showBatchGenerateDialog = async () => {\n                    await loadCardTypes();\n                    batchGenerateDialogVisible.value = true;\n                };\n\n                const loadCardTypes = async () => {\n                    cardTypesLoading.value = true;\n                    try {\n                        // 模拟API调用\n                        await new Promise(resolve => setTimeout(resolve, 300));\n                        cardTypes.value = mockCardTypes;\n                    } catch (error) {\n                        console.error('加载等级卡类型失败:', error);\n                        ElMessage.error('加载等级卡类型失败');\n                    } finally {\n                        cardTypesLoading.value = false;\n                    }\n                };\n\n                const handleGenerate = async () => {\n                    try {\n                        // 模拟生成体验卡\n                        await new Promise(resolve => setTimeout(resolve, 800));\n                        ElMessage.success(`已生成 ${generateForm.count} 张体验卡`);\n                        generateDialogVisible.value = false;\n                        loadCards();\n                    } catch (error) {\n                        console.error('生成体验卡失败:', error);\n                        ElMessage.error('生成体验卡失败');\n                    }\n                };\n\n                const handleBatchGenerate = async () => {\n                    if (!batchGenerateForm.cardTypeId) {\n                        ElMessage.warning('请选择等级卡类型');\n                        return;\n                    }\n\n                    if (!batchGenerateForm.count || batchGenerateForm.count <= 0) {\n                        ElMessage.warning('请输入有效的生成数量');\n                        return;\n                    }\n\n                    batchGenerating.value = true;\n                    try {\n                        // 模拟生成等级卡\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n\n                        const selectedCardType = cardTypes.value.find(type => type.id === batchGenerateForm.cardTypeId);\n                        selectedCardTypeName.value = selectedCardType?.name || '等级卡';\n\n                        // 生成模拟卡片数据\n                        const cards = [];\n                        for (let i = 1; i <= batchGenerateForm.count; i++) {\n                            const cardNumber = `DEMO${Date.now().toString().slice(-6)}${i.toString().padStart(3, '0')}`;\n                            const cardPassword = Math.random().toString(36).substring(2, 10).toUpperCase();\n\n                            cards.push({\n                                cardNumber,\n                                cardPassword,\n                                typeName: selectedCardType.name,\n                                points: selectedCardType.points,\n                                price: selectedCardType.price\n                            });\n                        }\n\n                        generatedCards.value = cards;\n                        resultDialogTitle.value = `生成结果 - ${selectedCardTypeName.value}`;\n\n                        batchGenerateDialogVisible.value = false;\n                        resultDialogVisible.value = true;\n\n                        ElMessage.success(`成功生成${batchGenerateForm.count}张${selectedCardTypeName.value}！`);\n\n                        // 刷新列表\n                        loadCards();\n                    } catch (error) {\n                        console.error('批量生成等级卡失败:', error);\n                        ElMessage.error('批量生成等级卡失败');\n                    } finally {\n                        batchGenerating.value = false;\n                    }\n                };\n\n                const copyAllCards = async () => {\n                    if (generatedCards.value.length === 0) {\n                        ElMessage.warning('没有可复制的卡片信息');\n                        return;\n                    }\n\n                    try {\n                        let copyText = `${selectedCardTypeName.value} - 共${generatedCards.value.length}张\\n\\n`;\n                        copyText += '卡号\\t卡密\\t类型\\t积分\\t价格\\n';\n                        copyText += '----------------------------------------\\n';\n\n                        generatedCards.value.forEach(card => {\n                            copyText += `${card.cardNumber}\\t${card.cardPassword}\\t${card.typeName}\\t${card.points}\\t¥${card.price}\\n`;\n                        });\n\n                        copyText += '\\n生成时间: ' + new Date().toLocaleString();\n\n                        await navigator.clipboard.writeText(copyText);\n                        ElMessage.success('卡号卡密信息已复制到剪贴板');\n                    } catch (error) {\n                        console.error('复制失败:', error);\n                        ElMessage.error('复制失败，请手动复制');\n                    }\n                };\n\n                const handleUnbind = async (row) => {\n                    try {\n                        await ElMessageBox.confirm(\n                            `确定要解绑等级卡 \"${row.card_number}\" 吗？`,\n                            '确认操作',\n                            {\n                                confirmButtonText: '确定',\n                                cancelButtonText: '取消',\n                                type: 'warning'\n                            }\n                        );\n\n                        // 模拟解绑操作\n                        await new Promise(resolve => setTimeout(resolve, 500));\n                        ElMessage.success('等级卡解绑成功');\n                        loadCards();\n                    } catch (error) {\n                        if (error !== 'cancel') {\n                            console.error('解绑等级卡失败:', error);\n                            ElMessage.error('解绑等级卡失败');\n                        }\n                    }\n                };\n\n                // 页面加载时获取数据\n                onMounted(() => {\n                    loadCards();\n                });\n\n                return {\n                    loading,\n                    cardList,\n                    generateDialogVisible,\n                    batchGenerateDialogVisible,\n                    cardTypes,\n                    cardTypesLoading,\n                    batchGenerating,\n                    resultDialogVisible,\n                    resultDialogTitle,\n                    generatedCards,\n                    selectedCardTypeName,\n                    generateForm,\n                    batchGenerateForm,\n                    formatDate,\n                    loadCards,\n                    showGenerateDialog,\n                    showBatchGenerateDialog,\n                    handleGenerate,\n                    handleBatchGenerate,\n                    copyAllCards,\n                    handleUnbind\n                };\n            }\n        }).use(ElementPlus).mount('#app');\n    </script>\n</body>\n</html>\n"
        }
    ]
}