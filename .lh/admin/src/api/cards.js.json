{
    "sourceFile": "admin/src/api/cards.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752316890568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752321887321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,4 +51,25 @@\n     url: `/admin/cards/${id}/unbind`,\n     method: 'put'\n   })\n }\n+\n+/**\n+ * 获取等级卡类型列表\n+ */\n+export function getCardTypes() {\n+  return request({\n+    url: '/admin/card-types',\n+    method: 'get'\n+  })\n+}\n+\n+/**\n+ * 批量生成等级卡\n+ */\n+export function generateCards(data) {\n+  return request({\n+    url: '/admin/generate-cards',\n+    method: 'post',\n+    data\n+  })\n+}\n"
                },
                {
                    "date": 1752322934956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,50 @@\n export function getCardTypes() {\n   return request({\n     url: '/admin/card-types',\n     method: 'get'\n+  }).catch(error => {\n+    // 如果服务器连接失败，返回模拟数据用于开发测试\n+    console.warn('服务器连接失败，使用模拟数据:', error.message);\n+    return Promise.resolve({\n+      success: true,\n+      data: {\n+        cardTypes: [\n+          {\n+            id: 1,\n+            name: '体验卡',\n+            icon: '🎁',\n+            points: 20,\n+            price: 0.00,\n+            description: '免费体验卡，每张20积分'\n+          },\n+          {\n+            id: 2,\n+            name: '基础卡',\n+            icon: '🥉',\n+            points: 300,\n+            price: 9.90,\n+            description: '适合轻度使用的用户'\n+          },\n+          {\n+            id: 3,\n+            name: '高级卡',\n+            icon: '🥈',\n+            points: 1000,\n+            price: 30.00,\n+            description: '适合中度使用的用户'\n+          },\n+          {\n+            id: 4,\n+            name: '至尊卡',\n+            icon: '🥇',\n+            points: 2000,\n+            price: 50.00,\n+            description: '适合重度使用的用户'\n+          }\n+        ]\n+      }\n+    });\n   })\n }\n \n /**\n"
                },
                {
                    "date": 1752322956599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,6 +112,42 @@\n   return request({\n     url: '/admin/generate-cards',\n     method: 'post',\n     data\n+  }).catch(error => {\n+    // 如果服务器连接失败，返回模拟数据用于开发测试\n+    console.warn('服务器连接失败，使用模拟数据:', error.message);\n+\n+    // 模拟生成卡片数据\n+    const cardTypeNames = ['体验卡', '基础卡', '高级卡', '至尊卡'];\n+    const cardTypePoints = [20, 300, 1000, 2000];\n+    const cardTypePrices = [0.00, 9.90, 30.00, 50.00];\n+\n+    const typeName = cardTypeNames[data.cardTypeId - 1] || '基础卡';\n+    const points = cardTypePoints[data.cardTypeId - 1] || 300;\n+    const price = cardTypePrices[data.cardTypeId - 1] || 9.90;\n+\n+    const generatedCards = [];\n+    for (let i = 1; i <= data.count; i++) {\n+      const cardNumber = `DEMO${Date.now().toString().slice(-6)}${i.toString().padStart(3, '0')}`;\n+      const cardPassword = Math.random().toString(36).substring(2, 10).toUpperCase();\n+\n+      generatedCards.push({\n+        cardNumber,\n+        cardPassword,\n+        typeName,\n+        points,\n+        price\n+      });\n+    }\n+\n+    return Promise.resolve({\n+      success: true,\n+      message: `成功生成${data.count}张${typeName}（模拟数据）`,\n+      data: {\n+        cards: generatedCards,\n+        cardType: typeName,\n+        totalGenerated: data.count\n+      }\n+    });\n   })\n }\n"
                },
                {
                    "date": 1752323568406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,63 @@\n   return request({\n     url: '/admin/cards',\n     method: 'get',\n     params\n+  }).catch(error => {\n+    // 如果服务器连接失败，返回模拟数据用于开发测试\n+    console.warn('服务器连接失败，使用模拟数据:', error.message);\n+    return Promise.resolve({\n+      success: true,\n+      data: {\n+        cards: [\n+          {\n+            id: 1,\n+            card_number: 'DEMO001',\n+            card_password: 'ABC123',\n+            type_name: '体验卡',\n+            icon: '🎁',\n+            total_points: 20,\n+            remaining_points: 20,\n+            price: 0.00,\n+            bound_username: null,\n+            bound_user_id: null,\n+            bound_at: null,\n+            created_at: new Date().toISOString()\n+          },\n+          {\n+            id: 2,\n+            card_number: 'DEMO002',\n+            card_password: 'DEF456',\n+            type_name: '基础卡',\n+            icon: '🥉',\n+            total_points: 300,\n+            remaining_points: 300,\n+            price: 9.90,\n+            bound_username: null,\n+            bound_user_id: null,\n+            bound_at: null,\n+            created_at: new Date().toISOString()\n+          },\n+          {\n+            id: 3,\n+            card_number: 'DEMO003',\n+            card_password: 'GHI789',\n+            type_name: '高级卡',\n+            icon: '🥈',\n+            total_points: 1000,\n+            remaining_points: 800,\n+            price: 30.00,\n+            bound_username: 'testuser',\n+            bound_user_id: 1,\n+            bound_at: new Date().toISOString(),\n+            created_at: new Date().toISOString()\n+          }\n+        ],\n+        total: 3,\n+        page: 1,\n+        pageSize: 10\n+      }\n+    });\n   })\n }\n \n /**\n"
                },
                {
                    "date": 1752323582530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,18 @@\n   return request({\n     url: '/admin/generate-experience-cards',\n     method: 'post',\n     data\n+  }).catch(error => {\n+    // 如果服务器连接失败，返回模拟数据用于开发测试\n+    console.warn('服务器连接失败，使用模拟数据:', error.message);\n+    return Promise.resolve({\n+      success: true,\n+      message: `成功生成${data.count}张体验卡（模拟数据）`,\n+      data: {\n+        generated: data.count\n+      }\n+    });\n   })\n }\n \n /**\n"
                },
                {
                    "date": 1752323598310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,15 @@\n export function unbindCard(id) {\n   return request({\n     url: `/admin/cards/${id}/unbind`,\n     method: 'put'\n+  }).catch(error => {\n+    // 如果服务器连接失败，返回模拟数据用于开发测试\n+    console.warn('服务器连接失败，使用模拟数据:', error.message);\n+    return Promise.resolve({\n+      success: true,\n+      message: '等级卡解绑成功（模拟数据）'\n+    });\n   })\n }\n \n /**\n"
                },
                {
                    "date": 1752978267706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,42 +184,6 @@\n   return request({\n     url: '/admin/generate-cards',\n     method: 'post',\n     data\n-  }).catch(error => {\n-    // 如果服务器连接失败，返回模拟数据用于开发测试\n-    console.warn('服务器连接失败，使用模拟数据:', error.message);\n-\n-    // 模拟生成卡片数据\n-    const cardTypeNames = ['体验卡', '基础卡', '高级卡', '至尊卡'];\n-    const cardTypePoints = [20, 300, 1000, 2000];\n-    const cardTypePrices = [0.00, 9.90, 30.00, 50.00];\n-\n-    const typeName = cardTypeNames[data.cardTypeId - 1] || '基础卡';\n-    const points = cardTypePoints[data.cardTypeId - 1] || 300;\n-    const price = cardTypePrices[data.cardTypeId - 1] || 9.90;\n-\n-    const generatedCards = [];\n-    for (let i = 1; i <= data.count; i++) {\n-      const cardNumber = `DEMO${Date.now().toString().slice(-6)}${i.toString().padStart(3, '0')}`;\n-      const cardPassword = Math.random().toString(36).substring(2, 10).toUpperCase();\n-\n-      generatedCards.push({\n-        cardNumber,\n-        cardPassword,\n-        typeName,\n-        points,\n-        price\n-      });\n-    }\n-\n-    return Promise.resolve({\n-      success: true,\n-      message: `成功生成${data.count}张${typeName}（模拟数据）`,\n-      data: {\n-        cards: generatedCards,\n-        cardType: typeName,\n-        totalGenerated: data.count\n-      }\n-    });\n   })\n }\n"
                },
                {
                    "date": 1752985421949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,12 +128,24 @@\n /**\n  * 获取等级卡类型列表\n  */\n export function getCardTypes() {\n+  console.log('🚀 开始调用 getCardTypes API...');\n+\n   return request({\n     url: '/admin/card-types',\n     method: 'get'\n+  }).then(response => {\n+    console.log('✅ getCardTypes API 调用成功:', response);\n+    return response;\n   }).catch(error => {\n+    console.error('❌ getCardTypes API 调用失败:');\n+    console.error('错误对象:', error);\n+    console.error('错误消息:', error.message);\n+    console.error('错误响应:', error.response);\n+    console.error('错误状态:', error.response?.status);\n+    console.error('错误数据:', error.response?.data);\n+\n     // 如果服务器连接失败，返回模拟数据用于开发测试\n     console.warn('服务器连接失败，使用模拟数据:', error.message);\n     return Promise.resolve({\n       success: true,\n"
                }
            ],
            "date": 1752316890568,
            "name": "Commit-0",
            "content": "import request from '@/utils/request'\n\n/**\n * 获取等级卡列表\n */\nexport function getCardList(params) {\n  return request({\n    url: '/admin/cards',\n    method: 'get',\n    params\n  })\n}\n\n/**\n * 生成体验卡\n */\nexport function generateExperienceCards(data) {\n  return request({\n    url: '/admin/generate-experience-cards',\n    method: 'post',\n    data\n  })\n}\n\n/**\n * 获取体验卡统计\n */\nexport function getExperienceCardsStats() {\n  return request({\n    url: '/admin/experience-cards-stats',\n    method: 'get'\n  })\n}\n\n/**\n * 更新等级卡状态\n */\nexport function updateCardStatus(id, status) {\n  return request({\n    url: `/admin/cards/${id}/status`,\n    method: 'put',\n    data: { status }\n  })\n}\n\n/**\n * 解绑等级卡\n */\nexport function unbindCard(id) {\n  return request({\n    url: `/admin/cards/${id}/unbind`,\n    method: 'put'\n  })\n}\n"
        }
    ]
}