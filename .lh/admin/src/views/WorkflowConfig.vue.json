{
    "sourceFile": "admin/src/views/WorkflowConfig.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 38,
            "patches": [
                {
                    "date": 1752812189560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752812665309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n <script setup>\n import { ref, reactive, onMounted } from 'vue'\n import { ElMessage } from 'element-plus'\n import { Check } from '@element-plus/icons-vue'\n-import { getSystemConfig, saveSystemConfig } from '@/api/config'\n+import axios from 'axios'\n \n const loading = ref(false)\n const saving = ref(false)\n \n"
                },
                {
                    "date": 1752812700176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,50 +230,62 @@\n // 加载配置\n const loadConfig = async () => {\n   loading.value = true\n   try {\n-    const response = await getSystemConfig()\n-    if (response.success && response.data) {\n-      const configData = response.data\n+    const response = await axios.get('/api/workflow-config')\n+    if (response.data.success && response.data.data) {\n+      const workflowData = response.data.data\n \n       // 映射换脸工作流配置\n-      if (configData.workflow) {\n-        const workflowConfigs = configData.workflow\n+      if (workflowData.faceswap) {\n+        const faceswap = workflowData.faceswap\n+        config.faceswap.enabled = faceswap.enabled\n+        config.faceswap.name = faceswap.name\n+        config.faceswap.description = faceswap.description\n \n-        // 换脸工作流\n-        config.faceswap.enabled = getBooleanValue(workflowConfigs, 'workflow.faceswap.enabled', true)\n-        config.faceswap.name = getStringValue(workflowConfigs, 'workflow.faceswap.name', 'Face Swap 2.0')\n-        config.faceswap.description = getStringValue(workflowConfigs, 'workflow.faceswap.description', '高质量人脸替换工作流')\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || '737'\n \n-        config.faceswap.input_nodes.face_photo_1 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_1', '670')\n-        config.faceswap.input_nodes.face_photo_2 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_2', '662')\n-        config.faceswap.input_nodes.face_photo_3 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_3', '658')\n-        config.faceswap.input_nodes.face_photo_4 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_4', '655')\n-        config.faceswap.input_nodes.target_image = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.target_image', '737')\n+        // 处理输出节点\n+        const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n+        config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n \n-        config.faceswap.output_nodes.primary = getStringValue(workflowConfigs, 'workflow.faceswap.output_nodes.primary', '812')\n-        config.faceswap.output_nodes.secondary = getStringValue(workflowConfigs, 'workflow.faceswap.output_nodes.secondary', '813,746,710')\n+        const secondaryOutputs = faceswap.outputNodes\n+          .filter(node => node.key.startsWith('secondary'))\n+          .sort((a, b) => a.order - b.order)\n+          .map(node => node.nodeId)\n+        config.faceswap.output_nodes.secondary = secondaryOutputs.join(',')\n+      }\n \n-        // 一键褪衣工作流\n-        config.undress.enabled = getBooleanValue(workflowConfigs, 'workflow.undress.enabled', true)\n-        config.undress.name = getStringValue(workflowConfigs, 'workflow.undress.name', 'Undress AI')\n-        config.undress.description = getStringValue(workflowConfigs, 'workflow.undress.description', '一键褪衣AI工作流')\n+      // 映射一键褪衣工作流配置\n+      if (workflowData.undress) {\n+        const undress = workflowData.undress\n+        config.undress.enabled = undress.enabled\n+        config.undress.name = undress.name\n+        config.undress.description = undress.description\n \n-        config.undress.input_nodes.main_image = getStringValue(workflowConfigs, 'workflow.undress.input_nodes.main_image', '49')\n-        config.undress.input_nodes.seed_node = getStringValue(workflowConfigs, 'workflow.undress.input_nodes.seed_node', '174')\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || '174'\n \n-        config.undress.output_nodes.primary = getStringValue(workflowConfigs, 'workflow.undress.output_nodes.primary', '730')\n-        config.undress.output_nodes.secondary = getStringValue(workflowConfigs, 'workflow.undress.output_nodes.secondary', '812,813,746,710')\n-      } else {\n-        // 如果没有workflow分组，使用默认值\n-        console.warn('未找到workflow配置分组，使用默认值')\n+        // 处理输出节点\n+        const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n+        config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n+\n+        const secondaryOutputs = undress.outputNodes\n+          .filter(node => node.key.startsWith('secondary'))\n+          .sort((a, b) => a.order - b.order)\n+          .map(node => node.nodeId)\n+        config.undress.output_nodes.secondary = secondaryOutputs.join(',')\n       }\n \n       ElMessage.success('配置加载成功')\n     }\n   } catch (error) {\n     console.error('加载配置失败:', error)\n-    ElMessage.error('加载配置失败')\n+    ElMessage.error('加载配置失败: ' + (error.response?.data?.message || error.message))\n   } finally {\n     loading.value = false\n   }\n }\n"
                },
                {
                    "date": 1752812731152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,40 +306,58 @@\n // 保存配置\n const saveConfig = async () => {\n   saving.value = true\n   try {\n-    const configs = [\n-      // 换脸工作流配置\n-      { config_key: 'workflow.faceswap.enabled', config_value: config.faceswap.enabled.toString() },\n-      { config_key: 'workflow.faceswap.name', config_value: config.faceswap.name },\n-      { config_key: 'workflow.faceswap.description', config_value: config.faceswap.description },\n-      { config_key: 'workflow.faceswap.input_nodes.face_photo_1', config_value: config.faceswap.input_nodes.face_photo_1 },\n-      { config_key: 'workflow.faceswap.input_nodes.face_photo_2', config_value: config.faceswap.input_nodes.face_photo_2 },\n-      { config_key: 'workflow.faceswap.input_nodes.face_photo_3', config_value: config.faceswap.input_nodes.face_photo_3 },\n-      { config_key: 'workflow.faceswap.input_nodes.face_photo_4', config_value: config.faceswap.input_nodes.face_photo_4 },\n-      { config_key: 'workflow.faceswap.input_nodes.target_image', config_value: config.faceswap.input_nodes.target_image },\n-      { config_key: 'workflow.faceswap.output_nodes.primary', config_value: config.faceswap.output_nodes.primary },\n-      { config_key: 'workflow.faceswap.output_nodes.secondary', config_value: config.faceswap.output_nodes.secondary },\n+    // 构建更新数据\n+    const workflows = {\n+      faceswap: {\n+        name: config.faceswap.name,\n+        description: config.faceswap.description,\n+        enabled: config.faceswap.enabled,\n+        inputNodes: {\n+          face_photo_1: config.faceswap.input_nodes.face_photo_1,\n+          face_photo_2: config.faceswap.input_nodes.face_photo_2,\n+          face_photo_3: config.faceswap.input_nodes.face_photo_3,\n+          face_photo_4: config.faceswap.input_nodes.face_photo_4,\n+          target_image: config.faceswap.input_nodes.target_image\n+        },\n+        outputNodes: [\n+          { key: 'primary', nodeId: config.faceswap.output_nodes.primary, order: 1 },\n+          ...config.faceswap.output_nodes.secondary.split(',').map((nodeId, index) => ({\n+            key: `secondary_${index + 1}`,\n+            nodeId: nodeId.trim(),\n+            order: index + 2\n+          })).filter(node => node.nodeId)\n+        ]\n+      },\n+      undress: {\n+        name: config.undress.name,\n+        description: config.undress.description,\n+        enabled: config.undress.enabled,\n+        inputNodes: {\n+          main_image: config.undress.input_nodes.main_image,\n+          seed_node: config.undress.input_nodes.seed_node\n+        },\n+        outputNodes: [\n+          { key: 'primary', nodeId: config.undress.output_nodes.primary, order: 1 },\n+          ...config.undress.output_nodes.secondary.split(',').map((nodeId, index) => ({\n+            key: `secondary_${index + 1}`,\n+            nodeId: nodeId.trim(),\n+            order: index + 2\n+          })).filter(node => node.nodeId)\n+        ]\n+      }\n+    }\n \n-      // 一键褪衣工作流配置\n-      { config_key: 'workflow.undress.enabled', config_value: config.undress.enabled.toString() },\n-      { config_key: 'workflow.undress.name', config_value: config.undress.name },\n-      { config_key: 'workflow.undress.description', config_value: config.undress.description },\n-      { config_key: 'workflow.undress.input_nodes.main_image', config_value: config.undress.input_nodes.main_image },\n-      { config_key: 'workflow.undress.input_nodes.seed_node', config_value: config.undress.input_nodes.seed_node },\n-      { config_key: 'workflow.undress.output_nodes.primary', config_value: config.undress.output_nodes.primary },\n-      { config_key: 'workflow.undress.output_nodes.secondary', config_value: config.undress.output_nodes.secondary }\n-    ]\n-\n-    const response = await saveSystemConfig(configs)\n-    if (response.success) {\n+    const response = await axios.post('/api/workflow-config/batch-update', { workflows })\n+    if (response.data.success) {\n       ElMessage.success('配置保存成功')\n     } else {\n-      throw new Error(response.message || '保存失败')\n+      throw new Error(response.data.message || '保存失败')\n     }\n   } catch (error) {\n     console.error('保存配置失败:', error)\n-    ElMessage.error('保存配置失败: ' + error.message)\n+    ElMessage.error('保存配置失败: ' + (error.response?.data?.message || error.message))\n   } finally {\n     saving.value = false\n   }\n }\n"
                },
                {
                    "date": 1752812747464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,21 +289,10 @@\n     loading.value = false\n   }\n }\n \n-// 辅助函数：从配置数组中获取字符串值\n-const getStringValue = (configs, key, defaultValue) => {\n-  const item = configs.find(c => c.config_key === key)\n-  return item ? item.config_value : defaultValue\n-}\n+// 删除不需要的辅助函数\n \n-// 辅助函数：从配置数组中获取布尔值\n-const getBooleanValue = (configs, key, defaultValue) => {\n-  const item = configs.find(c => c.config_key === key)\n-  if (!item) return defaultValue\n-  return item.config_value === 'true' || item.config_value === true\n-}\n-\n // 保存配置\n const saveConfig = async () => {\n   saving.value = true\n   try {\n"
                },
                {
                    "date": 1752816122284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n <script setup>\n import { ref, reactive, onMounted } from 'vue'\n import { ElMessage } from 'element-plus'\n import { Check } from '@element-plus/icons-vue'\n-import axios from 'axios'\n+import { getWorkflowConfig, batchUpdateWorkflowConfig } from '@/api/workflow'\n \n const loading = ref(false)\n const saving = ref(false)\n \n"
                },
                {
                    "date": 1752816139407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,10 +230,10 @@\n // 加载配置\n const loadConfig = async () => {\n   loading.value = true\n   try {\n-    const response = await axios.get('/api/workflow-config')\n-    if (response.data.success && response.data.data) {\n+    const response = await getWorkflowConfig()\n+    if (response.success && response.data) {\n       const workflowData = response.data.data\n \n       // 映射换脸工作流配置\n       if (workflowData.faceswap) {\n"
                },
                {
                    "date": 1752816154760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n   loading.value = true\n   try {\n     const response = await getWorkflowConfig()\n     if (response.success && response.data) {\n-      const workflowData = response.data.data\n+      const workflowData = response.data\n \n       // 映射换脸工作流配置\n       if (workflowData.faceswap) {\n         const faceswap = workflowData.faceswap\n"
                },
                {
                    "date": 1752816170793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n       ElMessage.success('配置加载成功')\n     }\n   } catch (error) {\n     console.error('加载配置失败:', error)\n-    ElMessage.error('加载配置失败: ' + (error.response?.data?.message || error.message))\n+    ElMessage.error('加载配置失败: ' + (error.message || '未知错误'))\n   } finally {\n     loading.value = false\n   }\n }\n"
                },
                {
                    "date": 1752816187030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,13 +336,13 @@\n         ]\n       }\n     }\n \n-    const response = await axios.post('/api/workflow-config/batch-update', { workflows })\n-    if (response.data.success) {\n+    const response = await batchUpdateWorkflowConfig({ workflows })\n+    if (response.success) {\n       ElMessage.success('配置保存成功')\n     } else {\n-      throw new Error(response.data.message || '保存失败')\n+      throw new Error(response.message || '保存失败')\n     }\n   } catch (error) {\n     console.error('保存配置失败:', error)\n     ElMessage.error('保存配置失败: ' + (error.response?.data?.message || error.message))\n"
                },
                {
                    "date": 1752816204655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n       throw new Error(response.message || '保存失败')\n     }\n   } catch (error) {\n     console.error('保存配置失败:', error)\n-    ElMessage.error('保存配置失败: ' + (error.response?.data?.message || error.message))\n+    ElMessage.error('保存配置失败: ' + (error.message || '未知错误'))\n   } finally {\n     saving.value = false\n   }\n }\n"
                },
                {
                    "date": 1752816316277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n <script setup>\n import { ref, reactive, onMounted } from 'vue'\n import { ElMessage } from 'element-plus'\n import { Check } from '@element-plus/icons-vue'\n-import { getWorkflowConfig, batchUpdateWorkflowConfig } from '@/api/workflow'\n+import { getWorkflowConfig, getPublicWorkflowConfig, batchUpdateWorkflowConfig } from '@/api/workflow'\n \n const loading = ref(false)\n const saving = ref(false)\n \n"
                },
                {
                    "date": 1752816333791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,17 @@\n // 加载配置\n const loadConfig = async () => {\n   loading.value = true\n   try {\n-    const response = await getWorkflowConfig()\n+    // 先尝试使用管理员API，如果失败则使用公开API\n+    let response\n+    try {\n+      response = await getWorkflowConfig()\n+    } catch (error) {\n+      console.warn('管理员API失败，尝试使用公开API:', error.message)\n+      response = await getPublicWorkflowConfig()\n+    }\n+\n     if (response.success && response.data) {\n       const workflowData = response.data\n \n       // 映射换脸工作流配置\n"
                },
                {
                    "date": 1752823926847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,13 +249,13 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || '737'\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n         config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n"
                },
                {
                    "date": 1752824017361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,10 +273,10 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || '174'\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n         config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n"
                },
                {
                    "date": 1752827154063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,13 +249,14 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n+        // 处理输入节点 - 管理员API返回的是对象格式 {nodeId, description, enabled}\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || faceswap.inputNodes.face_photo_1 || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || faceswap.inputNodes.face_photo_2 || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || faceswap.inputNodes.face_photo_3 || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || faceswap.inputNodes.face_photo_4 || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || faceswap.inputNodes.target_image || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n         config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n"
                },
                {
                    "date": 1752827182925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,11 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n+        // 处理输入节点 - 管理员API返回的是对象格式 {nodeId, description, enabled}\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || undress.inputNodes.main_image || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || undress.inputNodes.seed_node || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n         config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n"
                },
                {
                    "date": 1752828895123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,14 +249,13 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        // 处理输入节点 - 管理员API返回的是对象格式 {nodeId, description, enabled}\n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || faceswap.inputNodes.face_photo_1 || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || faceswap.inputNodes.face_photo_2 || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || faceswap.inputNodes.face_photo_3 || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || faceswap.inputNodes.face_photo_4 || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || faceswap.inputNodes.target_image || '737'\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n         config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n@@ -274,11 +273,10 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        // 处理输入节点 - 管理员API返回的是对象格式 {nodeId, description, enabled}\n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || undress.inputNodes.main_image || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || undress.inputNodes.seed_node || '174'\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n         config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n"
                },
                {
                    "date": 1752829254455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,13 +249,14 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n+        // 处理输入节点 - 管理员API返回的是对象，需要提取nodeId\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || faceswap.inputNodes.face_photo_1 || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || faceswap.inputNodes.face_photo_2 || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || faceswap.inputNodes.face_photo_3 || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || faceswap.inputNodes.face_photo_4 || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || faceswap.inputNodes.target_image || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n         config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n"
                },
                {
                    "date": 1752829361402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,10 +274,11 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n+        // 处理输入节点 - 管理员API返回的是对象，需要提取nodeId\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || undress.inputNodes.main_image || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || undress.inputNodes.seed_node || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n         config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n"
                },
                {
                    "date": 1752829477972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,14 +249,14 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        // 处理输入节点 - 管理员API返回的是对象，需要提取nodeId\n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1?.nodeId || faceswap.inputNodes.face_photo_1 || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2?.nodeId || faceswap.inputNodes.face_photo_2 || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3?.nodeId || faceswap.inputNodes.face_photo_3 || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4?.nodeId || faceswap.inputNodes.face_photo_4 || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image?.nodeId || faceswap.inputNodes.target_image || '737'\n+        // 处理输入节点 - API现在返回统一的字符串格式\n+        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n+        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n+        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n+        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n+        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n         config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n"
                },
                {
                    "date": 1752829536589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,11 +274,11 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        // 处理输入节点 - 管理员API返回的是对象，需要提取nodeId\n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image?.nodeId || undress.inputNodes.main_image || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node?.nodeId || undress.inputNodes.seed_node || '174'\n+        // 处理输入节点 - API现在返回统一的字符串格式\n+        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n+        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n         config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n"
                },
                {
                    "date": 1752831243817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,8 +301,27 @@\n }\n \n // 删除不需要的辅助函数\n \n+// 辅助函数：确保节点ID是字符串格式\n+const ensureStringNodeId = (nodeId) => {\n+  if (typeof nodeId === 'string') {\n+    // 如果已经是字符串，检查是否是JSON格式\n+    try {\n+      const parsed = JSON.parse(nodeId)\n+      // 如果能解析为JSON，说明可能是嵌套的JSON字符串，需要提取实际的nodeId\n+      if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n+        return ensureStringNodeId(parsed.nodeId) // 递归处理嵌套情况\n+      }\n+      return nodeId // 如果解析后不是预期格式，返回原字符串\n+    } catch (e) {\n+      // 不是JSON格式，直接返回\n+      return nodeId\n+    }\n+  }\n+  return String(nodeId || '')\n+}\n+\n // 保存配置\n const saveConfig = async () => {\n   saving.value = true\n   try {\n@@ -312,19 +331,23 @@\n         name: config.faceswap.name,\n         description: config.faceswap.description,\n         enabled: config.faceswap.enabled,\n         inputNodes: {\n-          face_photo_1: config.faceswap.input_nodes.face_photo_1,\n-          face_photo_2: config.faceswap.input_nodes.face_photo_2,\n-          face_photo_3: config.faceswap.input_nodes.face_photo_3,\n-          face_photo_4: config.faceswap.input_nodes.face_photo_4,\n-          target_image: config.faceswap.input_nodes.target_image\n+          face_photo_1: ensureStringNodeId(config.faceswap.input_nodes.face_photo_1),\n+          face_photo_2: ensureStringNodeId(config.faceswap.input_nodes.face_photo_2),\n+          face_photo_3: ensureStringNodeId(config.faceswap.input_nodes.face_photo_3),\n+          face_photo_4: ensureStringNodeId(config.faceswap.input_nodes.face_photo_4),\n+          target_image: ensureStringNodeId(config.faceswap.input_nodes.target_image)\n         },\n         outputNodes: [\n-          { key: 'primary', nodeId: config.faceswap.output_nodes.primary, order: 1 },\n+          {\n+            key: 'primary',\n+            nodeId: ensureStringNodeId(config.faceswap.output_nodes.primary),\n+            order: 1\n+          },\n           ...config.faceswap.output_nodes.secondary.split(',').map((nodeId, index) => ({\n             key: `secondary_${index + 1}`,\n-            nodeId: nodeId.trim(),\n+            nodeId: ensureStringNodeId(nodeId.trim()),\n             order: index + 2\n           })).filter(node => node.nodeId)\n         ]\n       },\n@@ -332,25 +355,33 @@\n         name: config.undress.name,\n         description: config.undress.description,\n         enabled: config.undress.enabled,\n         inputNodes: {\n-          main_image: config.undress.input_nodes.main_image,\n-          seed_node: config.undress.input_nodes.seed_node\n+          main_image: ensureStringNodeId(config.undress.input_nodes.main_image),\n+          seed_node: ensureStringNodeId(config.undress.input_nodes.seed_node)\n         },\n         outputNodes: [\n-          { key: 'primary', nodeId: config.undress.output_nodes.primary, order: 1 },\n+          {\n+            key: 'primary',\n+            nodeId: ensureStringNodeId(config.undress.output_nodes.primary),\n+            order: 1\n+          },\n           ...config.undress.output_nodes.secondary.split(',').map((nodeId, index) => ({\n             key: `secondary_${index + 1}`,\n-            nodeId: nodeId.trim(),\n+            nodeId: ensureStringNodeId(nodeId.trim()),\n             order: index + 2\n           })).filter(node => node.nodeId)\n         ]\n       }\n     }\n \n+    console.log('📊 准备保存的配置数据:', JSON.stringify(workflows, null, 2))\n+\n     const response = await batchUpdateWorkflowConfig({ workflows })\n     if (response.success) {\n       ElMessage.success('配置保存成功')\n+      // 保存成功后重新加载配置，确保显示最新数据\n+      await loadConfig()\n     } else {\n       throw new Error(response.message || '保存失败')\n     }\n   } catch (error) {\n"
                },
                {
                    "date": 1752831270644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,23 +249,23 @@\n         config.faceswap.enabled = faceswap.enabled\n         config.faceswap.name = faceswap.name\n         config.faceswap.description = faceswap.description\n \n-        // 处理输入节点 - API现在返回统一的字符串格式\n-        config.faceswap.input_nodes.face_photo_1 = faceswap.inputNodes.face_photo_1 || '670'\n-        config.faceswap.input_nodes.face_photo_2 = faceswap.inputNodes.face_photo_2 || '662'\n-        config.faceswap.input_nodes.face_photo_3 = faceswap.inputNodes.face_photo_3 || '658'\n-        config.faceswap.input_nodes.face_photo_4 = faceswap.inputNodes.face_photo_4 || '655'\n-        config.faceswap.input_nodes.target_image = faceswap.inputNodes.target_image || '737'\n+        // 处理输入节点 - 确保节点ID是纯字符串格式\n+        config.faceswap.input_nodes.face_photo_1 = ensureStringNodeId(faceswap.inputNodes.face_photo_1) || '670'\n+        config.faceswap.input_nodes.face_photo_2 = ensureStringNodeId(faceswap.inputNodes.face_photo_2) || '662'\n+        config.faceswap.input_nodes.face_photo_3 = ensureStringNodeId(faceswap.inputNodes.face_photo_3) || '658'\n+        config.faceswap.input_nodes.face_photo_4 = ensureStringNodeId(faceswap.inputNodes.face_photo_4) || '655'\n+        config.faceswap.input_nodes.target_image = ensureStringNodeId(faceswap.inputNodes.target_image) || '737'\n \n         // 处理输出节点\n         const primaryOutput = faceswap.outputNodes.find(node => node.key === 'primary')\n-        config.faceswap.output_nodes.primary = primaryOutput?.nodeId || '812'\n+        config.faceswap.output_nodes.primary = ensureStringNodeId(primaryOutput?.nodeId) || '812'\n \n         const secondaryOutputs = faceswap.outputNodes\n           .filter(node => node.key.startsWith('secondary'))\n           .sort((a, b) => a.order - b.order)\n-          .map(node => node.nodeId)\n+          .map(node => ensureStringNodeId(node.nodeId))\n         config.faceswap.output_nodes.secondary = secondaryOutputs.join(',')\n       }\n \n       // 映射一键褪衣工作流配置\n"
                },
                {
                    "date": 1752831300358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,20 +274,20 @@\n         config.undress.enabled = undress.enabled\n         config.undress.name = undress.name\n         config.undress.description = undress.description\n \n-        // 处理输入节点 - API现在返回统一的字符串格式\n-        config.undress.input_nodes.main_image = undress.inputNodes.main_image || '49'\n-        config.undress.input_nodes.seed_node = undress.inputNodes.seed_node || '174'\n+        // 处理输入节点 - 确保节点ID是纯字符串格式\n+        config.undress.input_nodes.main_image = ensureStringNodeId(undress.inputNodes.main_image) || '49'\n+        config.undress.input_nodes.seed_node = ensureStringNodeId(undress.inputNodes.seed_node) || '174'\n \n         // 处理输出节点\n         const primaryOutput = undress.outputNodes.find(node => node.key === 'primary')\n-        config.undress.output_nodes.primary = primaryOutput?.nodeId || '730'\n+        config.undress.output_nodes.primary = ensureStringNodeId(primaryOutput?.nodeId) || '730'\n \n         const secondaryOutputs = undress.outputNodes\n           .filter(node => node.key.startsWith('secondary'))\n           .sort((a, b) => a.order - b.order)\n-          .map(node => node.nodeId)\n+          .map(node => ensureStringNodeId(node.nodeId))\n         config.undress.output_nodes.secondary = secondaryOutputs.join(',')\n       }\n \n       ElMessage.success('配置加载成功')\n"
                },
                {
                    "date": 1752831330981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,27 @@\n     }\n   }\n })\n \n+// 辅助函数：确保节点ID是字符串格式\n+const ensureStringNodeId = (nodeId) => {\n+  if (typeof nodeId === 'string') {\n+    // 如果已经是字符串，检查是否是JSON格式\n+    try {\n+      const parsed = JSON.parse(nodeId)\n+      // 如果能解析为JSON，说明可能是嵌套的JSON字符串，需要提取实际的nodeId\n+      if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n+        return ensureStringNodeId(parsed.nodeId) // 递归处理嵌套情况\n+      }\n+      return nodeId // 如果解析后不是预期格式，返回原字符串\n+    } catch (e) {\n+      // 不是JSON格式，直接返回\n+      return nodeId\n+    }\n+  }\n+  return String(nodeId || '')\n+}\n+\n // 加载配置\n const loadConfig = async () => {\n   loading.value = true\n   try {\n"
                },
                {
                    "date": 1752831348699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,27 +320,8 @@\n }\n \n // 删除不需要的辅助函数\n \n-// 辅助函数：确保节点ID是字符串格式\n-const ensureStringNodeId = (nodeId) => {\n-  if (typeof nodeId === 'string') {\n-    // 如果已经是字符串，检查是否是JSON格式\n-    try {\n-      const parsed = JSON.parse(nodeId)\n-      // 如果能解析为JSON，说明可能是嵌套的JSON字符串，需要提取实际的nodeId\n-      if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n-        return ensureStringNodeId(parsed.nodeId) // 递归处理嵌套情况\n-      }\n-      return nodeId // 如果解析后不是预期格式，返回原字符串\n-    } catch (e) {\n-      // 不是JSON格式，直接返回\n-      return nodeId\n-    }\n-  }\n-  return String(nodeId || '')\n-}\n-\n // 保存配置\n const saveConfig = async () => {\n   saving.value = true\n   try {\n"
                },
                {
                    "date": 1752831409566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,10 +318,8 @@\n     loading.value = false\n   }\n }\n \n-// 删除不需要的辅助函数\n-\n // 保存配置\n const saveConfig = async () => {\n   saving.value = true\n   try {\n"
                },
                {
                    "date": 1752834012221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n \n // 配置数据\n const config = reactive({\n   faceswap: {\n-    enabled: true,\n+    enabled: false, // 初始状态设为false，等待从服务器加载\n     name: '',\n     description: '',\n     input_nodes: {\n       face_photo_1: '',\n@@ -212,9 +212,9 @@\n       secondary: ''\n     }\n   },\n   undress: {\n-    enabled: true,\n+    enabled: false, // 初始状态设为false，等待从服务器加载\n     name: '',\n     description: '',\n     input_nodes: {\n       main_image: '',\n"
                },
                {
                    "date": 1752834042818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,11 +264,12 @@\n \n       // 映射换脸工作流配置\n       if (workflowData.faceswap) {\n         const faceswap = workflowData.faceswap\n-        config.faceswap.enabled = faceswap.enabled\n-        config.faceswap.name = faceswap.name\n-        config.faceswap.description = faceswap.description\n+        // 确保enabled状态正确设置\n+        config.faceswap.enabled = Boolean(faceswap.enabled)\n+        config.faceswap.name = faceswap.name || ''\n+        config.faceswap.description = faceswap.description || ''\n \n         // 处理输入节点 - 确保节点ID是纯字符串格式\n         config.faceswap.input_nodes.face_photo_1 = ensureStringNodeId(faceswap.inputNodes.face_photo_1) || '670'\n         config.faceswap.input_nodes.face_photo_2 = ensureStringNodeId(faceswap.inputNodes.face_photo_2) || '662'\n@@ -284,8 +285,10 @@\n           .filter(node => node.key.startsWith('secondary'))\n           .sort((a, b) => a.order - b.order)\n           .map(node => ensureStringNodeId(node.nodeId))\n         config.faceswap.output_nodes.secondary = secondaryOutputs.join(',')\n+\n+        console.log('🔄 换脸工作流状态已设置为:', config.faceswap.enabled)\n       }\n \n       // 映射一键褪衣工作流配置\n       if (workflowData.undress) {\n"
                },
                {
                    "date": 1752834062143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,11 +292,12 @@\n \n       // 映射一键褪衣工作流配置\n       if (workflowData.undress) {\n         const undress = workflowData.undress\n-        config.undress.enabled = undress.enabled\n-        config.undress.name = undress.name\n-        config.undress.description = undress.description\n+        // 确保enabled状态正确设置\n+        config.undress.enabled = Boolean(undress.enabled)\n+        config.undress.name = undress.name || ''\n+        config.undress.description = undress.description || ''\n \n         // 处理输入节点 - 确保节点ID是纯字符串格式\n         config.undress.input_nodes.main_image = ensureStringNodeId(undress.inputNodes.main_image) || '49'\n         config.undress.input_nodes.seed_node = ensureStringNodeId(undress.inputNodes.seed_node) || '174'\n@@ -309,8 +310,10 @@\n           .filter(node => node.key.startsWith('secondary'))\n           .sort((a, b) => a.order - b.order)\n           .map(node => ensureStringNodeId(node.nodeId))\n         config.undress.output_nodes.secondary = secondaryOutputs.join(',')\n+\n+        console.log('👗 一键褪衣工作流状态已设置为:', config.undress.enabled)\n       }\n \n       ElMessage.success('配置加载成功')\n     }\n"
                },
                {
                    "date": 1752834086051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,10 +382,13 @@\n \n     const response = await batchUpdateWorkflowConfig({ workflows })\n     if (response.success) {\n       ElMessage.success('配置保存成功')\n+      console.log('💾 配置保存成功，重新加载配置以确保状态同步')\n       // 保存成功后重新加载配置，确保显示最新数据\n       await loadConfig()\n+      // 强制触发响应式更新\n+      console.log('🔄 当前状态 - 换脸:', config.faceswap.enabled, '一键褪衣:', config.undress.enabled)\n     } else {\n       throw new Error(response.message || '保存失败')\n     }\n   } catch (error) {\n"
                },
                {
                    "date": 1752834104121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n   </div>\n </template>\n \n <script setup>\n-import { ref, reactive, onMounted } from 'vue'\n+import { ref, reactive, onMounted, watch, nextTick } from 'vue'\n import { ElMessage } from 'element-plus'\n import { Check } from '@element-plus/icons-vue'\n import { getWorkflowConfig, getPublicWorkflowConfig, batchUpdateWorkflowConfig } from '@/api/workflow'\n \n"
                },
                {
                    "date": 1752834118273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,8 +398,21 @@\n     saving.value = false\n   }\n }\n \n+// 监听状态变化，确保UI同步\n+watch(\n+  () => [config.faceswap.enabled, config.undress.enabled],\n+  ([faceswapEnabled, undressEnabled]) => {\n+    console.log('👀 状态变化监听 - 换脸:', faceswapEnabled, '一键褪衣:', undressEnabled)\n+    // 强制触发DOM更新\n+    nextTick(() => {\n+      console.log('🔄 DOM已更新，当前状态 - 换脸:', config.faceswap.enabled, '一键褪衣:', config.undress.enabled)\n+    })\n+  },\n+  { deep: true }\n+)\n+\n onMounted(() => {\n   loadConfig()\n })\n </script>\n"
                },
                {
                    "date": 1752834138518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -245,8 +245,19 @@\n   }\n   return String(nodeId || '')\n }\n \n+// 调试函数：检查当前状态\n+const debugCurrentState = () => {\n+  console.log('🔍 当前配置状态调试:')\n+  console.log('  换脸工作流 enabled:', config.faceswap.enabled, typeof config.faceswap.enabled)\n+  console.log('  一键褪衣工作流 enabled:', config.undress.enabled, typeof config.undress.enabled)\n+  console.log('  完整配置对象:', JSON.stringify({\n+    faceswap: { enabled: config.faceswap.enabled },\n+    undress: { enabled: config.undress.enabled }\n+  }, null, 2))\n+}\n+\n // 加载配置\n const loadConfig = async () => {\n   loading.value = true\n   try {\n"
                },
                {
                    "date": 1752834162425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,8 +326,10 @@\n         console.log('👗 一键褪衣工作流状态已设置为:', config.undress.enabled)\n       }\n \n       ElMessage.success('配置加载成功')\n+      // 调试当前状态\n+      debugCurrentState()\n     }\n   } catch (error) {\n     console.error('加载配置失败:', error)\n     ElMessage.error('加载配置失败: ' + (error.message || '未知错误'))\n"
                },
                {
                    "date": 1752834178301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,10 +398,10 @@\n       ElMessage.success('配置保存成功')\n       console.log('💾 配置保存成功，重新加载配置以确保状态同步')\n       // 保存成功后重新加载配置，确保显示最新数据\n       await loadConfig()\n-      // 强制触发响应式更新\n-      console.log('🔄 当前状态 - 换脸:', config.faceswap.enabled, '一键褪衣:', config.undress.enabled)\n+      // 调试保存后的状态\n+      debugCurrentState()\n     } else {\n       throw new Error(response.message || '保存失败')\n     }\n   } catch (error) {\n"
                },
                {
                    "date": 1752834190848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,12 @@\n   <div class=\"workflow-config-page\">\n     <div class=\"page-header\">\n       <h1 class=\"page-title\">工作流节点配置</h1>\n       <div class=\"header-actions\">\n+        <el-button @click=\"loadConfig\" :loading=\"loading\">\n+          <el-icon><Refresh /></el-icon>\n+          刷新配置\n+        </el-button>\n         <el-button type=\"primary\" @click=\"saveConfig\" :loading=\"saving\">\n           <el-icon><Check /></el-icon>\n           保存配置\n         </el-button>\n"
                },
                {
                    "date": 1752834204580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,9 +191,9 @@\n \n <script setup>\n import { ref, reactive, onMounted, watch, nextTick } from 'vue'\n import { ElMessage } from 'element-plus'\n-import { Check } from '@element-plus/icons-vue'\n+import { Check, Refresh } from '@element-plus/icons-vue'\n import { getWorkflowConfig, getPublicWorkflowConfig, batchUpdateWorkflowConfig } from '@/api/workflow'\n \n const loading = ref(false)\n const saving = ref(false)\n"
                }
            ],
            "date": 1752812189560,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"workflow-config-page\">\n    <div class=\"page-header\">\n      <h1 class=\"page-title\">工作流节点配置</h1>\n      <div class=\"header-actions\">\n        <el-button type=\"primary\" @click=\"saveConfig\" :loading=\"saving\">\n          <el-icon><Check /></el-icon>\n          保存配置\n        </el-button>\n      </div>\n    </div>\n\n    <el-row :gutter=\"20\">\n      <!-- 换脸工作流配置 -->\n      <el-col :span=\"12\">\n        <el-card>\n          <template #header>\n            <div class=\"card-header\">\n              <span>🔄 换脸工作流配置</span>\n              <el-tag :type=\"config.faceswap.enabled ? 'success' : 'danger'\" size=\"small\">\n                {{ config.faceswap.enabled ? '已启用' : '已禁用' }}\n              </el-tag>\n            </div>\n          </template>\n\n          <el-form\n            :model=\"config.faceswap\"\n            label-width=\"140px\"\n            v-loading=\"loading\"\n          >\n            <!-- 基础配置 -->\n            <el-form-item label=\"启用状态\">\n              <el-switch v-model=\"config.faceswap.enabled\" />\n            </el-form-item>\n\n            <el-form-item label=\"工作流名称\">\n              <el-input v-model=\"config.faceswap.name\" placeholder=\"Face Swap 2.0\" />\n            </el-form-item>\n\n            <el-form-item label=\"工作流描述\">\n              <el-input v-model=\"config.faceswap.description\" placeholder=\"高质量人脸替换工作流\" />\n            </el-form-item>\n\n            <el-divider content-position=\"left\">输入节点配置</el-divider>\n\n            <el-form-item label=\"人脸照片1节点\">\n              <el-input v-model=\"config.faceswap.input_nodes.face_photo_1\" placeholder=\"670\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"人脸照片2节点\">\n              <el-input v-model=\"config.faceswap.input_nodes.face_photo_2\" placeholder=\"662\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"人脸照片3节点\">\n              <el-input v-model=\"config.faceswap.input_nodes.face_photo_3\" placeholder=\"658\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"人脸照片4节点\">\n              <el-input v-model=\"config.faceswap.input_nodes.face_photo_4\" placeholder=\"655\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"目标图片节点\">\n              <el-input v-model=\"config.faceswap.input_nodes.target_image\" placeholder=\"737\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-divider content-position=\"left\">输出节点配置</el-divider>\n\n            <el-form-item label=\"主要输出节点\">\n              <el-input v-model=\"config.faceswap.output_nodes.primary\" placeholder=\"812\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"备用输出节点\">\n              <el-input\n                v-model=\"config.faceswap.output_nodes.secondary\"\n                placeholder=\"813,746,710\"\n                type=\"textarea\"\n                :rows=\"2\"\n              >\n              </el-input>\n              <div class=\"form-tip\">多个节点ID用逗号分隔，按优先级排序</div>\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-col>\n\n      <!-- 一键褪衣工作流配置 -->\n      <el-col :span=\"12\">\n        <el-card>\n          <template #header>\n            <div class=\"card-header\">\n              <span>👗 一键褪衣工作流配置</span>\n              <el-tag :type=\"config.undress.enabled ? 'success' : 'danger'\" size=\"small\">\n                {{ config.undress.enabled ? '已启用' : '已禁用' }}\n              </el-tag>\n            </div>\n          </template>\n\n          <el-form\n            :model=\"config.undress\"\n            label-width=\"140px\"\n            v-loading=\"loading\"\n          >\n            <!-- 基础配置 -->\n            <el-form-item label=\"启用状态\">\n              <el-switch v-model=\"config.undress.enabled\" />\n            </el-form-item>\n\n            <el-form-item label=\"工作流名称\">\n              <el-input v-model=\"config.undress.name\" placeholder=\"Undress AI\" />\n            </el-form-item>\n\n            <el-form-item label=\"工作流描述\">\n              <el-input v-model=\"config.undress.description\" placeholder=\"一键褪衣AI工作流\" />\n            </el-form-item>\n\n            <el-divider content-position=\"left\">输入节点配置</el-divider>\n\n            <el-form-item label=\"主图片节点\">\n              <el-input v-model=\"config.undress.input_nodes.main_image\" placeholder=\"49\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"随机种子节点\">\n              <el-input v-model=\"config.undress.input_nodes.seed_node\" placeholder=\"174\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-divider content-position=\"left\">输出节点配置</el-divider>\n\n            <el-form-item label=\"主要输出节点\">\n              <el-input v-model=\"config.undress.output_nodes.primary\" placeholder=\"730\">\n                <template #append>节点ID</template>\n              </el-input>\n            </el-form-item>\n\n            <el-form-item label=\"备用输出节点\">\n              <el-input\n                v-model=\"config.undress.output_nodes.secondary\"\n                placeholder=\"812,813,746,710\"\n                type=\"textarea\"\n                :rows=\"2\"\n              >\n              </el-input>\n              <div class=\"form-tip\">多个节点ID用逗号分隔，按优先级排序</div>\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 配置说明 -->\n    <el-card style=\"margin-top: 20px;\">\n      <template #header>\n        <span>📖 配置说明</span>\n      </template>\n      <el-alert\n        title=\"节点配置说明\"\n        type=\"info\"\n        :closable=\"false\"\n        show-icon\n      >\n        <ul>\n          <li><strong>输入节点：</strong>指定哪些节点接收用户上传的图片</li>\n          <li><strong>输出节点：</strong>指定哪些节点作为最终结果输出</li>\n          <li><strong>主要输出节点：</strong>优先查找的输出节点</li>\n          <li><strong>备用输出节点：</strong>当主要节点无输出时，按顺序查找的备用节点</li>\n          <li><strong>节点ID：</strong>对应ComfyUI工作流JSON文件中的节点编号</li>\n        </ul>\n      </el-alert>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { Check } from '@element-plus/icons-vue'\nimport { getSystemConfig, saveSystemConfig } from '@/api/config'\n\nconst loading = ref(false)\nconst saving = ref(false)\n\n// 配置数据\nconst config = reactive({\n  faceswap: {\n    enabled: true,\n    name: '',\n    description: '',\n    input_nodes: {\n      face_photo_1: '',\n      face_photo_2: '',\n      face_photo_3: '',\n      face_photo_4: '',\n      target_image: ''\n    },\n    output_nodes: {\n      primary: '',\n      secondary: ''\n    }\n  },\n  undress: {\n    enabled: true,\n    name: '',\n    description: '',\n    input_nodes: {\n      main_image: '',\n      seed_node: ''\n    },\n    output_nodes: {\n      primary: '',\n      secondary: ''\n    }\n  }\n})\n\n// 加载配置\nconst loadConfig = async () => {\n  loading.value = true\n  try {\n    const response = await getSystemConfig()\n    if (response.success && response.data) {\n      const configData = response.data\n\n      // 映射换脸工作流配置\n      if (configData.workflow) {\n        const workflowConfigs = configData.workflow\n\n        // 换脸工作流\n        config.faceswap.enabled = getBooleanValue(workflowConfigs, 'workflow.faceswap.enabled', true)\n        config.faceswap.name = getStringValue(workflowConfigs, 'workflow.faceswap.name', 'Face Swap 2.0')\n        config.faceswap.description = getStringValue(workflowConfigs, 'workflow.faceswap.description', '高质量人脸替换工作流')\n\n        config.faceswap.input_nodes.face_photo_1 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_1', '670')\n        config.faceswap.input_nodes.face_photo_2 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_2', '662')\n        config.faceswap.input_nodes.face_photo_3 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_3', '658')\n        config.faceswap.input_nodes.face_photo_4 = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.face_photo_4', '655')\n        config.faceswap.input_nodes.target_image = getStringValue(workflowConfigs, 'workflow.faceswap.input_nodes.target_image', '737')\n\n        config.faceswap.output_nodes.primary = getStringValue(workflowConfigs, 'workflow.faceswap.output_nodes.primary', '812')\n        config.faceswap.output_nodes.secondary = getStringValue(workflowConfigs, 'workflow.faceswap.output_nodes.secondary', '813,746,710')\n\n        // 一键褪衣工作流\n        config.undress.enabled = getBooleanValue(workflowConfigs, 'workflow.undress.enabled', true)\n        config.undress.name = getStringValue(workflowConfigs, 'workflow.undress.name', 'Undress AI')\n        config.undress.description = getStringValue(workflowConfigs, 'workflow.undress.description', '一键褪衣AI工作流')\n\n        config.undress.input_nodes.main_image = getStringValue(workflowConfigs, 'workflow.undress.input_nodes.main_image', '49')\n        config.undress.input_nodes.seed_node = getStringValue(workflowConfigs, 'workflow.undress.input_nodes.seed_node', '174')\n\n        config.undress.output_nodes.primary = getStringValue(workflowConfigs, 'workflow.undress.output_nodes.primary', '730')\n        config.undress.output_nodes.secondary = getStringValue(workflowConfigs, 'workflow.undress.output_nodes.secondary', '812,813,746,710')\n      } else {\n        // 如果没有workflow分组，使用默认值\n        console.warn('未找到workflow配置分组，使用默认值')\n      }\n\n      ElMessage.success('配置加载成功')\n    }\n  } catch (error) {\n    console.error('加载配置失败:', error)\n    ElMessage.error('加载配置失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 辅助函数：从配置数组中获取字符串值\nconst getStringValue = (configs, key, defaultValue) => {\n  const item = configs.find(c => c.config_key === key)\n  return item ? item.config_value : defaultValue\n}\n\n// 辅助函数：从配置数组中获取布尔值\nconst getBooleanValue = (configs, key, defaultValue) => {\n  const item = configs.find(c => c.config_key === key)\n  if (!item) return defaultValue\n  return item.config_value === 'true' || item.config_value === true\n}\n\n// 保存配置\nconst saveConfig = async () => {\n  saving.value = true\n  try {\n    const configs = [\n      // 换脸工作流配置\n      { config_key: 'workflow.faceswap.enabled', config_value: config.faceswap.enabled.toString() },\n      { config_key: 'workflow.faceswap.name', config_value: config.faceswap.name },\n      { config_key: 'workflow.faceswap.description', config_value: config.faceswap.description },\n      { config_key: 'workflow.faceswap.input_nodes.face_photo_1', config_value: config.faceswap.input_nodes.face_photo_1 },\n      { config_key: 'workflow.faceswap.input_nodes.face_photo_2', config_value: config.faceswap.input_nodes.face_photo_2 },\n      { config_key: 'workflow.faceswap.input_nodes.face_photo_3', config_value: config.faceswap.input_nodes.face_photo_3 },\n      { config_key: 'workflow.faceswap.input_nodes.face_photo_4', config_value: config.faceswap.input_nodes.face_photo_4 },\n      { config_key: 'workflow.faceswap.input_nodes.target_image', config_value: config.faceswap.input_nodes.target_image },\n      { config_key: 'workflow.faceswap.output_nodes.primary', config_value: config.faceswap.output_nodes.primary },\n      { config_key: 'workflow.faceswap.output_nodes.secondary', config_value: config.faceswap.output_nodes.secondary },\n\n      // 一键褪衣工作流配置\n      { config_key: 'workflow.undress.enabled', config_value: config.undress.enabled.toString() },\n      { config_key: 'workflow.undress.name', config_value: config.undress.name },\n      { config_key: 'workflow.undress.description', config_value: config.undress.description },\n      { config_key: 'workflow.undress.input_nodes.main_image', config_value: config.undress.input_nodes.main_image },\n      { config_key: 'workflow.undress.input_nodes.seed_node', config_value: config.undress.input_nodes.seed_node },\n      { config_key: 'workflow.undress.output_nodes.primary', config_value: config.undress.output_nodes.primary },\n      { config_key: 'workflow.undress.output_nodes.secondary', config_value: config.undress.output_nodes.secondary }\n    ]\n\n    const response = await saveSystemConfig(configs)\n    if (response.success) {\n      ElMessage.success('配置保存成功')\n    } else {\n      throw new Error(response.message || '保存失败')\n    }\n  } catch (error) {\n    console.error('保存配置失败:', error)\n    ElMessage.error('保存配置失败: ' + error.message)\n  } finally {\n    saving.value = false\n  }\n}\n\nonMounted(() => {\n  loadConfig()\n})\n</script>\n\n<style scoped>\n.workflow-config-page {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.page-title {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 600;\n  color: #303133;\n}\n\n.header-actions {\n  display: flex;\n  gap: 12px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.form-tip {\n  font-size: 12px;\n  color: #909399;\n  margin-top: 4px;\n}\n\n:deep(.el-divider__text) {\n  font-weight: 600;\n  color: #409eff;\n}\n</style>\n"
        }
    ]
}