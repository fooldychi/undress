{
    "sourceFile": "admin/src/views/DebugConfig.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752403125147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752403125147,
            "name": "Commit-0",
            "content": "<template>\n  <div class=\"debug-config-page\">\n    <h1>配置调试页面</h1>\n\n    <el-card style=\"margin-bottom: 20px;\">\n      <template #header>\n        <span>认证状态检查</span>\n      </template>\n      <div>\n        <p><strong>Token:</strong> {{ authToken || '未找到' }}</p>\n        <p><strong>用户信息:</strong> {{ userInfo ? JSON.stringify(userInfo) : '未找到' }}</p>\n        <el-button @click=\"checkAuth\">刷新认证状态</el-button>\n        <el-button @click=\"forceLogin\" type=\"primary\">强制登录</el-button>\n      </div>\n    </el-card>\n\n    <el-card style=\"margin-bottom: 20px;\">\n      <template #header>\n        <span>API调用测试</span>\n      </template>\n      <div>\n        <el-button @click=\"testDirectAPI\" :loading=\"testing\">直接调用API</el-button>\n        <el-button @click=\"testVueAPI\" :loading=\"testing\">通过Vue API调用</el-button>\n        <el-button @click=\"testWithAuth\" :loading=\"testing\">带认证调用</el-button>\n      </div>\n\n      <div v-if=\"apiResult\" style=\"margin-top: 20px;\">\n        <h3>API调用结果:</h3>\n        <pre style=\"background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto;\">{{ JSON.stringify(apiResult, null, 2) }}</pre>\n      </div>\n    </el-card>\n\n    <el-card>\n      <template #header>\n        <span>配置数据处理测试</span>\n      </template>\n      <div>\n        <el-button @click=\"testDataProcessing\" :loading=\"processing\">测试数据处理</el-button>\n      </div>\n\n      <div v-if=\"processedData\" style=\"margin-top: 20px;\">\n        <h3>处理后的配置数据:</h3>\n        <div v-for=\"(value, key) in processedData\" :key=\"key\" style=\"margin: 5px 0;\">\n          <strong>{{ key }}:</strong> {{ value }}\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { getToken, getUser } from '@/utils/auth'\nimport { getSystemConfig } from '@/api/config'\nimport request from '@/utils/request'\n\nconst authToken = ref('')\nconst userInfo = ref(null)\nconst testing = ref(false)\nconst processing = ref(false)\nconst apiResult = ref(null)\nconst processedData = ref(null)\n\n// 检查认证状态\nconst checkAuth = () => {\n  authToken.value = getToken()\n  userInfo.value = getUser()\n  console.log('🔑 认证状态:', { token: authToken.value, user: userInfo.value })\n}\n\n// 强制登录\nconst forceLogin = async () => {\n  try {\n    const response = await request({\n      url: '/admin-auth/login',\n      method: 'post',\n      data: {\n        username: 'admin',\n        password: 'admin123456'\n      }\n    })\n\n    console.log('🔐 登录响应:', response)\n\n    if (response.success) {\n      // 刷新页面以更新认证状态\n      window.location.reload()\n    }\n  } catch (error) {\n    console.error('❌ 登录失败:', error)\n  }\n}\n\n// 直接调用API\nconst testDirectAPI = async () => {\n  testing.value = true\n  try {\n    console.log('📡 直接调用API...')\n    console.log('🔑 使用Token:', authToken.value)\n\n    const response = await fetch('/api/admin/config', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken.value}`\n      }\n    })\n\n    console.log('📊 响应状态:', response.status)\n    console.log('📊 响应头:', Object.fromEntries(response.headers.entries()))\n\n    const data = await response.json()\n    console.log('📊 直接API响应:', data)\n    apiResult.value = {\n      status: response.status,\n      headers: Object.fromEntries(response.headers.entries()),\n      data: data\n    }\n\n  } catch (error) {\n    console.error('❌ 直接API调用失败:', error)\n    apiResult.value = { error: error.message }\n  } finally {\n    testing.value = false\n  }\n}\n\n// 通过Vue API调用\nconst testVueAPI = async () => {\n  testing.value = true\n  try {\n    console.log('📡 通过Vue API调用...')\n\n    const response = await getSystemConfig()\n    console.log('📊 Vue API响应:', response)\n    apiResult.value = response\n\n  } catch (error) {\n    console.error('❌ Vue API调用失败:', error)\n    apiResult.value = { error: error.message }\n  } finally {\n    testing.value = false\n  }\n}\n\n// 带认证调用\nconst testWithAuth = async () => {\n  testing.value = true\n  try {\n    console.log('📡 带认证调用API...')\n\n    const response = await request({\n      url: '/admin/config',\n      method: 'get'\n    })\n\n    console.log('📊 带认证API响应:', response)\n    apiResult.value = response\n\n  } catch (error) {\n    console.error('❌ 带认证API调用失败:', error)\n    apiResult.value = { error: error.message }\n  } finally {\n    testing.value = false\n  }\n}\n\n// 测试数据处理\nconst testDataProcessing = async () => {\n  processing.value = true\n  try {\n    console.log('🔄 测试数据处理...')\n\n    // 先获取数据\n    const response = await getSystemConfig()\n    console.log('📊 原始数据:', response)\n\n    if (response.success && response.data) {\n      const configData = response.data\n\n      // 将分组格式的配置数据转换为扁平的键值对格式\n      const flatConfig = {}\n\n      // 遍历所有配置分组\n      Object.keys(configData).forEach(groupName => {\n        const groupConfigs = configData[groupName]\n        if (Array.isArray(groupConfigs)) {\n          groupConfigs.forEach(item => {\n            flatConfig[item.config_key] = item.config_value\n          })\n        }\n      })\n\n      // 只显示ComfyUI配置\n      const comfyuiConfig = {}\n      Object.keys(flatConfig).filter(key => key.startsWith('comfyui.')).forEach(key => {\n        comfyuiConfig[key] = flatConfig[key]\n      })\n\n      console.log('🔧 处理后的ComfyUI配置:', comfyuiConfig)\n      processedData.value = comfyuiConfig\n    }\n\n  } catch (error) {\n    console.error('❌ 数据处理失败:', error)\n    processedData.value = { error: error.message }\n  } finally {\n    processing.value = false\n  }\n}\n\nonMounted(() => {\n  checkAuth()\n})\n</script>\n\n<style scoped>\n.debug-config-page {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\npre {\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  max-height: 400px;\n  overflow-y: auto;\n}\n</style>\n"
        }
    ]
}