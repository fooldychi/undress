{
    "sourceFile": "fixed-queue-test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752516529901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752516557314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,24 +223,53 @@\n                 // 测试新端点\n                 const newResult = await testNewEndpoint(server);\n                 const newColumn = document.createElement('div');\n                 newColumn.className = 'test-column';\n-                newColumn.innerHTML = `\n+\n+                let newContent = `\n                     <h4>✅ 新端点 (/api/queue)</h4>\n                     <div class=\"result ${newResult.success ? 'success' : 'error'}\">\n                         ${newResult.success ? '✅ 成功' : '❌ 失败'}\n                     </div>\n-                    ${newResult.status ? `<div>状态码: ${newResult.status}</div>` : ''}\n-                    ${newResult.responseTime ? `<div>响应时间: ${newResult.responseTime}ms</div>` : ''}\n-                    ${newResult.queueInfo ? `\n-                        <div>队列信息:</div>\n+                    ${newResult.status ? `<div><strong>状态码:</strong> ${newResult.status}</div>` : ''}\n+                    ${newResult.responseTime ? `<div><strong>响应时间:</strong> ${newResult.responseTime}ms</div>` : ''}\n+                `;\n+\n+                if (newResult.queueInfo) {\n+                    newContent += `\n+                        <div><strong>📊 队列详情:</strong></div>\n                         <div>- 运行中: ${newResult.queueInfo.running}</div>\n                         <div>- 等待中: ${newResult.queueInfo.pending}</div>\n                         <div>- 总计: ${newResult.queueInfo.total}</div>\n-                    ` : ''}\n-                    ${newResult.error ? `<div>错误: ${newResult.error}</div>` : ''}\n-                `;\n+                    `;\n \n+                    // 队列状态指示\n+                    if (newResult.queueInfo.total === 0) {\n+                        newContent += `<div style=\"color: green;\">🟢 服务器空闲</div>`;\n+                    } else if (newResult.queueInfo.running > 0) {\n+                        newContent += `<div style=\"color: orange;\">🟡 服务器繁忙</div>`;\n+                    } else {\n+                        newContent += `<div style=\"color: red;\">🔴 队列满载</div>`;\n+                    }\n+                }\n+\n+                if (newResult.data) {\n+                    newContent += `\n+                        <div><strong>📄 数据结构:</strong></div>\n+                        <div>- 数据键: ${Object.keys(newResult.data).join(', ')}</div>\n+                        <details>\n+                            <summary>查看原始数据</summary>\n+                            <pre style=\"font-size: 10px; max-height: 150px; overflow-y: auto;\">${JSON.stringify(newResult.data, null, 2)}</pre>\n+                        </details>\n+                    `;\n+                }\n+\n+                if (newResult.error) {\n+                    newContent += `<div style=\"color: red;\"><strong>错误:</strong> ${newResult.error}</div>`;\n+                }\n+\n+                newColumn.innerHTML = newContent;\n+\n                 comparisonDiv.appendChild(oldColumn);\n                 comparisonDiv.appendChild(newColumn);\n                 resultsElement.appendChild(comparisonDiv);\n \n"
                }
            ],
            "date": 1752516529901,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>修复后的队列测试</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .result {\n            margin: 15px 0;\n            padding: 15px;\n            border-radius: 5px;\n            font-family: monospace;\n        }\n        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n        .warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }\n        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover { background: #0056b3; }\n        pre {\n            background: #f8f9fa;\n            padding: 10px;\n            border-radius: 3px;\n            overflow-x: auto;\n            font-size: 12px;\n            max-height: 200px;\n            overflow-y: auto;\n        }\n        .comparison {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        .test-column {\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            background: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔧 修复后的队列测试</h1>\n        <p>基于您提供的请求信息修复后的测试。</p>\n\n        <div>\n            <button onclick=\"testBothEndpoints()\">对比测试新旧端点</button>\n            <button onclick=\"testNewEndpoint()\">仅测试新端点</button>\n            <button onclick=\"clearResults()\">清除结果</button>\n        </div>\n\n        <div id=\"results\"></div>\n    </div>\n\n    <script>\n        const servers = [\n            'https://l9s75ay3rp-8188.cnb.run',\n            'https://0rv00xh2vg-8188.cnb.run'\n        ];\n\n        let resultsElement = document.getElementById('results');\n\n        function addResult(message, type = 'info') {\n            const div = document.createElement('div');\n            div.className = `result ${type}`;\n            div.innerHTML = message;\n            resultsElement.appendChild(div);\n        }\n\n        function clearResults() {\n            resultsElement.innerHTML = '';\n        }\n\n        // 旧的请求方式（之前失败的）\n        async function testOldEndpoint(serverUrl) {\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n                const startTime = Date.now();\n                const response = await fetch(`${serverUrl}/queue`, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': 'application/json',\n                        'Cache-Control': 'no-cache'\n                    }\n                });\n\n                clearTimeout(timeoutId);\n                const endTime = Date.now();\n\n                if (response.ok) {\n                    const data = await response.json();\n                    return {\n                        success: true,\n                        status: response.status,\n                        responseTime: endTime - startTime,\n                        data: data\n                    };\n                } else {\n                    return {\n                        success: false,\n                        status: response.status,\n                        error: `HTTP ${response.status}`\n                    };\n                }\n\n            } catch (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n        }\n\n        // 新的请求方式（基于您的请求信息）\n        async function testNewEndpoint(serverUrl) {\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n                const startTime = Date.now();\n                const response = await fetch(`${serverUrl}/api/queue`, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': '*/*',\n                        'Cache-Control': 'max-age=0',\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\n                        'comfy-user': 'test-client'\n                    }\n                });\n\n                clearTimeout(timeoutId);\n                const endTime = Date.now();\n\n                if (response.ok) {\n                    const data = await response.json();\n\n                    // 解析队列数据\n                    let running = 0, pending = 0;\n                    if (data.queue_running !== undefined && data.queue_pending !== undefined) {\n                        running = Array.isArray(data.queue_running) ? data.queue_running.length : data.queue_running;\n                        pending = Array.isArray(data.queue_pending) ? data.queue_pending.length : data.queue_pending;\n                    }\n\n                    return {\n                        success: true,\n                        status: response.status,\n                        responseTime: endTime - startTime,\n                        data: data,\n                        queueInfo: {\n                            running: running,\n                            pending: pending,\n                            total: running + pending\n                        }\n                    };\n                } else {\n                    return {\n                        success: false,\n                        status: response.status,\n                        error: `HTTP ${response.status}`\n                    };\n                }\n\n            } catch (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n        }\n\n        window.testBothEndpoints = async function() {\n            clearResults();\n            addResult('🔍 对比测试新旧端点...', 'info');\n\n            for (const server of servers) {\n                addResult(`\\n🖥️ 测试服务器: ${server}`, 'info');\n\n                // 创建对比表格\n                const comparisonDiv = document.createElement('div');\n                comparisonDiv.className = 'comparison';\n\n                // 测试旧端点\n                const oldResult = await testOldEndpoint(server);\n                const oldColumn = document.createElement('div');\n                oldColumn.className = 'test-column';\n                oldColumn.innerHTML = `\n                    <h4>❌ 旧端点 (/queue)</h4>\n                    <div class=\"result ${oldResult.success ? 'success' : 'error'}\">\n                        ${oldResult.success ? '✅ 成功' : '❌ 失败'}\n                    </div>\n                    ${oldResult.status ? `<div>状态码: ${oldResult.status}</div>` : ''}\n                    ${oldResult.responseTime ? `<div>响应时间: ${oldResult.responseTime}ms</div>` : ''}\n                    ${oldResult.error ? `<div>错误: ${oldResult.error}</div>` : ''}\n                `;\n\n                // 测试新端点\n                const newResult = await testNewEndpoint(server);\n                const newColumn = document.createElement('div');\n                newColumn.className = 'test-column';\n                newColumn.innerHTML = `\n                    <h4>✅ 新端点 (/api/queue)</h4>\n                    <div class=\"result ${newResult.success ? 'success' : 'error'}\">\n                        ${newResult.success ? '✅ 成功' : '❌ 失败'}\n                    </div>\n                    ${newResult.status ? `<div>状态码: ${newResult.status}</div>` : ''}\n                    ${newResult.responseTime ? `<div>响应时间: ${newResult.responseTime}ms</div>` : ''}\n                    ${newResult.queueInfo ? `\n                        <div>队列信息:</div>\n                        <div>- 运行中: ${newResult.queueInfo.running}</div>\n                        <div>- 等待中: ${newResult.queueInfo.pending}</div>\n                        <div>- 总计: ${newResult.queueInfo.total}</div>\n                    ` : ''}\n                    ${newResult.error ? `<div>错误: ${newResult.error}</div>` : ''}\n                `;\n\n                comparisonDiv.appendChild(oldColumn);\n                comparisonDiv.appendChild(newColumn);\n                resultsElement.appendChild(comparisonDiv);\n\n                // 显示原始数据\n                if (newResult.success && newResult.data) {\n                    addResult(`📄 队列数据 (前500字符):\\n<pre>${JSON.stringify(newResult.data, null, 2).substring(0, 500)}...</pre>`, 'info');\n                }\n            }\n\n            addResult('✅ 对比测试完成', 'success');\n        };\n\n        window.testNewEndpoint = async function() {\n            clearResults();\n            addResult('🚀 测试新端点 (/api/queue)...', 'info');\n\n            for (const server of servers) {\n                addResult(`🔍 测试服务器: ${server}`, 'info');\n\n                const result = await testNewEndpoint(server);\n\n                if (result.success) {\n                    addResult(`✅ 连接成功 (${result.responseTime}ms)`, 'success');\n\n                    // 详细的队列信息分析\n                    if (result.queueInfo) {\n                        let queueDetails = `📊 队列详细信息:\\n`;\n                        queueDetails += `- 运行中任务: ${result.queueInfo.running}\\n`;\n                        queueDetails += `- 等待中任务: ${result.queueInfo.pending}\\n`;\n                        queueDetails += `- 总任务数: ${result.queueInfo.total}\\n`;\n\n                        if (result.queueInfo.total === 0) {\n                            queueDetails += `- 状态: 🟢 服务器空闲，无任务队列\\n`;\n                        } else if (result.queueInfo.running > 0) {\n                            queueDetails += `- 状态: 🟡 服务器繁忙，正在处理 ${result.queueInfo.running} 个任务\\n`;\n                        } else {\n                            queueDetails += `- 状态: 🔴 服务器队列满，${result.queueInfo.pending} 个任务等待中\\n`;\n                        }\n\n                        addResult(queueDetails, 'success');\n                    }\n\n                    // 详细的原始数据分析\n                    if (result.data) {\n                        let dataAnalysis = `📄 原始数据分析:\\n`;\n                        dataAnalysis += `- 数据类型: ${typeof result.data}\\n`;\n                        dataAnalysis += `- 数据键: ${Object.keys(result.data).join(', ')}\\n`;\n\n                        // 分析队列结构\n                        if (result.data.queue_running !== undefined) {\n                            const runningType = Array.isArray(result.data.queue_running) ? 'array' : typeof result.data.queue_running;\n                            dataAnalysis += `- queue_running 类型: ${runningType}\\n`;\n                            if (Array.isArray(result.data.queue_running)) {\n                                dataAnalysis += `- queue_running 长度: ${result.data.queue_running.length}\\n`;\n                                if (result.data.queue_running.length > 0) {\n                                    dataAnalysis += `- 运行中任务示例: ${JSON.stringify(result.data.queue_running[0]).substring(0, 100)}...\\n`;\n                                }\n                            }\n                        }\n\n                        if (result.data.queue_pending !== undefined) {\n                            const pendingType = Array.isArray(result.data.queue_pending) ? 'array' : typeof result.data.queue_pending;\n                            dataAnalysis += `- queue_pending 类型: ${pendingType}\\n`;\n                            if (Array.isArray(result.data.queue_pending)) {\n                                dataAnalysis += `- queue_pending 长度: ${result.data.queue_pending.length}\\n`;\n                                if (result.data.queue_pending.length > 0) {\n                                    dataAnalysis += `- 等待中任务示例: ${JSON.stringify(result.data.queue_pending[0]).substring(0, 100)}...\\n`;\n                                }\n                            }\n                        }\n\n                        addResult(dataAnalysis, 'info');\n\n                        // 完整的原始数据\n                        addResult(`📄 完整原始数据:\\n<pre>${JSON.stringify(result.data, null, 2)}</pre>`, 'info');\n                    }\n                } else {\n                    addResult(`❌ 连接失败: ${result.error}`, 'error');\n\n                    // 详细的错误分析\n                    if (result.error) {\n                        let errorAnalysis = `🔍 错误详细分析:\\n`;\n                        if (result.error.includes('Failed to fetch')) {\n                            errorAnalysis += `- 错误类型: 网络连接失败\\n`;\n                            errorAnalysis += `- 可能原因: 服务器不可达、DNS解析失败、SSL证书问题\\n`;\n                        } else if (result.error.includes('CORS')) {\n                            errorAnalysis += `- 错误类型: 跨域请求被阻止\\n`;\n                            errorAnalysis += `- 可能原因: 服务器未配置CORS头\\n`;\n                        } else if (result.error.includes('timeout')) {\n                            errorAnalysis += `- 错误类型: 请求超时\\n`;\n                            errorAnalysis += `- 可能原因: 服务器响应过慢\\n`;\n                        } else {\n                            errorAnalysis += `- 错误类型: 未知错误\\n`;\n                            errorAnalysis += `- 错误信息: ${result.error}\\n`;\n                        }\n                        addResult(errorAnalysis, 'warning');\n                    }\n                }\n\n                addResult('', 'info'); // 分隔线\n            }\n\n            addResult('✅ 测试完成', 'success');\n        };\n\n        window.clearResults = clearResults;\n\n        // 页面加载时自动测试新端点\n        window.addEventListener('load', () => {\n            addResult('📋 修复后的队列测试已准备就绪', 'info');\n            addResult('💡 基于您提供的请求信息进行修复:', 'info');\n            addResult('- 端点路径: /queue → /api/queue', 'info');\n            addResult('- 添加 comfy-user 请求头', 'info');\n            addResult('- 使用正确的 User-Agent', 'info');\n            setTimeout(() => {\n                testNewEndpoint();\n            }, 2000);\n        });\n    </script>\n</body>\n</html>\n"
        }
    ]
}