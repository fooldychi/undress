{
    "sourceFile": "simple-queue-test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752516116910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752516116910,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>简单队列测试</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .result {\n            margin: 15px 0;\n            padding: 15px;\n            border-radius: 5px;\n            font-family: monospace;\n        }\n        .success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n        .warning { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }\n        .info { background: #d1ecf1; color: #0c5460; border: 1px solid #bee5eb; }\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover { background: #0056b3; }\n        pre {\n            background: #f8f9fa;\n            padding: 10px;\n            border-radius: 3px;\n            overflow-x: auto;\n            font-size: 12px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔍 简单队列测试</h1>\n        <p>快速测试您的 ComfyUI 服务器队列端点。</p>\n\n        <button onclick=\"testQueue()\">测试队列端点</button>\n        <button onclick=\"clearResults()\">清除结果</button>\n\n        <div id=\"results\"></div>\n    </div>\n\n    <script>\n        const servers = [\n            'https://l9s75ay3rp-8188.cnb.run',\n            'https://0rv00xh2vg-8188.cnb.run'\n        ];\n\n        let resultsElement = document.getElementById('results');\n\n        function addResult(message, type = 'info') {\n            const div = document.createElement('div');\n            div.className = `result ${type}`;\n            div.innerHTML = message;\n            resultsElement.appendChild(div);\n        }\n\n        function clearResults() {\n            resultsElement.innerHTML = '';\n        }\n\n        async function testServerQueue(serverUrl) {\n            addResult(`🔍 测试服务器: ${serverUrl}`, 'info');\n\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), 10000);\n\n                const startTime = Date.now();\n                const response = await fetch(`${serverUrl}/api/queue`, {\n                    method: 'GET',\n                    signal: controller.signal,\n                    headers: {\n                        'Accept': '*/*',\n                        'Cache-Control': 'max-age=0',\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\n                        'comfy-user': 'test-client'\n                    }\n                });\n\n                clearTimeout(timeoutId);\n                const endTime = Date.now();\n                const responseTime = endTime - startTime;\n\n                if (response.ok) {\n                    try {\n                        const data = await response.json();\n\n                        addResult(`✅ 队列端点响应成功 (${responseTime}ms)`, 'success');\n\n                        // 分析数据结构\n                        let queueInfo = '📊 队列数据分析:\\n';\n                        queueInfo += `- 数据类型: ${typeof data}\\n`;\n                        queueInfo += `- 数据键: ${Object.keys(data).join(', ')}\\n`;\n\n                        let running = 0, pending = 0;\n\n                        if (data.queue_running !== undefined && data.queue_pending !== undefined) {\n                            running = Array.isArray(data.queue_running) ? data.queue_running.length : data.queue_running;\n                            pending = Array.isArray(data.queue_pending) ? data.queue_pending.length : data.queue_pending;\n                            queueInfo += `- 标准 ComfyUI 格式 ✅\\n`;\n                            queueInfo += `- 运行中: ${running}\\n`;\n                            queueInfo += `- 等待中: ${pending}\\n`;\n                            queueInfo += `- 总计: ${running + pending}`;\n                        } else {\n                            queueInfo += `- ⚠️ 非标准格式，需要自定义解析`;\n                        }\n\n                        addResult(queueInfo, 'success');\n\n                        // 显示原始数据\n                        addResult(`📄 原始数据:\\n<pre>${JSON.stringify(data, null, 2)}</pre>`, 'info');\n\n                    } catch (parseError) {\n                        addResult(`❌ JSON 解析失败: ${parseError.message}`, 'error');\n\n                        // 尝试获取原始文本\n                        try {\n                            const text = await response.text();\n                            addResult(`📄 原始响应:\\n<pre>${text.substring(0, 500)}</pre>`, 'warning');\n                        } catch (e) {\n                            addResult(`❌ 无法读取响应内容`, 'error');\n                        }\n                    }\n                } else {\n                    addResult(`❌ HTTP 错误: ${response.status} ${response.statusText}`, 'error');\n\n                    try {\n                        const errorText = await response.text();\n                        if (errorText) {\n                            addResult(`📄 错误响应:\\n<pre>${errorText.substring(0, 300)}</pre>`, 'error');\n                        }\n                    } catch (e) {\n                        addResult(`❌ 无法读取错误响应`, 'error');\n                    }\n                }\n\n            } catch (error) {\n                let errorType = '未知错误';\n                let suggestion = '';\n\n                if (error.name === 'AbortError') {\n                    errorType = '请求超时';\n                    suggestion = '服务器响应时间过长，请检查网络连接或服务器状态。';\n                } else if (error.message.includes('CORS')) {\n                    errorType = 'CORS 跨域错误';\n                    suggestion = '服务器需要配置 CORS 头以允许跨域请求。';\n                } else if (error.message.includes('Failed to fetch')) {\n                    errorType = '网络连接失败';\n                    suggestion = '无法连接到服务器，请检查服务器地址和网络连接。';\n                }\n\n                addResult(`❌ ${errorType}: ${error.message}`, 'error');\n                if (suggestion) {\n                    addResult(`💡 建议: ${suggestion}`, 'warning');\n                }\n            }\n\n            addResult('', 'info'); // 空行分隔\n        }\n\n        window.testQueue = async function() {\n            clearResults();\n            addResult('🚀 开始测试队列端点...', 'info');\n\n            for (const server of servers) {\n                await testServerQueue(server);\n            }\n\n            addResult('✅ 所有测试完成', 'success');\n        };\n\n        window.clearResults = clearResults;\n\n        // 页面加载时自动测试\n        window.addEventListener('load', () => {\n            setTimeout(testQueue, 1000);\n        });\n    </script>\n</body>\n</html>\n"
        }
    ]
}