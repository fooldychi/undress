{
    "sourceFile": "开发原则.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752285317091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752294684385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,70 @@\n \r\n+# 项目开发原则\r\n \r\n-开发原则：\r\n+## 总体原则\r\n \r\n-1、目前需要实现数据永久化，所有测试均不要使用模拟数据，要与远程数据库同步\r\n-2、如有需要进行测试，均与项目前端逻辑保持一致，避免出现测试通过，但与前端逻辑不一致的情况\r\n-3、数据库以最简开发方式，不要增加多余的字段和表\r\n-3、尽可能使用现有的UI框架，保持界面统一风格\r\n+本项目遵循现代化Web开发最佳实践，确保代码质量、用户体验和团队协作的一致性。\r\n \r\n+## 1. 数据管理原则\r\n \r\n+### 1.1 数据持久化\r\n+- **真实数据优先**: 所有功能均使用真实数据库，避免模拟数据\r\n+- **数据一致性**: 前后端数据结构保持严格一致\r\n+- **测试数据**: 测试环境使用与生产环境相同的数据结构\r\n+\r\n+### 1.2 数据库设计\r\n+- **最简设计**: 遵循最简开发方式，避免冗余字段和表\r\n+- **规范化**: 合理的数据库规范化，避免数据冗余\r\n+- **性能优化**: 适当的索引设计，确保查询性能\r\n+\r\n+## 2. 前端开发原则\r\n+\r\n+### 2.1 UI框架统一\r\n+- **组件库**: 统一使用Vant UI组件库\r\n+- **设计系统**: 遵循统一的设计系统和CSS变量\r\n+- **图标规范**: 严格按功能分类使用图标\r\n+\r\n+### 2.2 代码质量\r\n+- **Vue 3最佳实践**: 使用Composition API和现代化开发模式\r\n+- **组件化**: 可复用、单一职责的组件设计\r\n+- **响应式设计**: 确保移动端和桌面端的完美适配\r\n+\r\n+## 3. 测试原则\r\n+\r\n+### 3.1 测试一致性\r\n+- **逻辑一致**: 测试逻辑与前端业务逻辑保持完全一致\r\n+- **数据真实**: 使用真实API和数据库进行测试\r\n+- **环境一致**: 测试环境与生产环境保持一致\r\n+\r\n+### 3.2 测试覆盖\r\n+- **功能测试**: 覆盖所有核心业务功能\r\n+- **集成测试**: 确保前后端集成的正确性\r\n+- **用户体验测试**: 验证用户交互流程的完整性\r\n+\r\n+## 4. 开发流程\r\n+\r\n+### 4.1 代码规范\r\n+- **命名规范**: 使用有意义的变量和函数名\r\n+- **注释规范**: 关键逻辑必须有清晰的注释\r\n+- **版本控制**: 使用语义化的提交信息\r\n+\r\n+### 4.2 协作规范\r\n+- **文档维护**: 及时更新相关文档\r\n+- **代码审查**: 重要功能需要代码审查\r\n+- **知识共享**: 关键技术决策需要团队讨论\r\n+\r\n+## 5. 性能与安全\r\n+\r\n+### 5.1 性能优化\r\n+- **加载优化**: 合理的代码分割和懒加载\r\n+- **缓存策略**: 适当的缓存机制\r\n+- **资源优化**: 图片和静态资源的优化\r\n+\r\n+### 5.2 安全考虑\r\n+- **认证授权**: 完善的用户认证和权限控制\r\n+- **数据验证**: 前后端双重数据验证\r\n+- **安全传输**: HTTPS和安全的API设计\r\n+\r\n+---\r\n+\r\n+详细的前端开发规范请参考：[前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n"
                },
                {
                    "date": 1752295252405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,10 @@\n \r\n-# 项目开发原则\r\n \r\n-## 总体原则\r\n+开发原则：\r\n \r\n-本项目遵循现代化Web开发最佳实践，确保代码质量、用户体验和团队协作的一致性。\r\n+1、目前需要实现数据永久化，所有测试均不要使用模拟数据，要与远程数据库同步\r\n+2、如有需要进行测试，均与项目前端逻辑保持一致，避免出现测试通过，但与前端逻辑不一致的情况\r\n+3、数据库以最简开发方式，不要增加多余的字段和表\r\n+3、尽可能使用现有的UI框架，保持界面统一风格\r\n \r\n-## 1. 数据管理原则\r\n \r\n-### 1.1 数据持久化\r\n-- **真实数据优先**: 所有功能均使用真实数据库，避免模拟数据\r\n-- **数据一致性**: 前后端数据结构保持严格一致\r\n-- **测试数据**: 测试环境使用与生产环境相同的数据结构\r\n-\r\n-### 1.2 数据库设计\r\n-- **最简设计**: 遵循最简开发方式，避免冗余字段和表\r\n-- **规范化**: 合理的数据库规范化，避免数据冗余\r\n-- **性能优化**: 适当的索引设计，确保查询性能\r\n-\r\n-## 2. 前端开发原则\r\n-\r\n-### 2.1 UI框架统一\r\n-- **组件库**: 统一使用Vant UI组件库\r\n-- **设计系统**: 遵循统一的设计系统和CSS变量\r\n-- **图标规范**: 严格按功能分类使用图标\r\n-\r\n-### 2.2 代码质量\r\n-- **Vue 3最佳实践**: 使用Composition API和现代化开发模式\r\n-- **组件化**: 可复用、单一职责的组件设计\r\n-- **响应式设计**: 确保移动端和桌面端的完美适配\r\n-\r\n-## 3. 测试原则\r\n-\r\n-### 3.1 测试一致性\r\n-- **逻辑一致**: 测试逻辑与前端业务逻辑保持完全一致\r\n-- **数据真实**: 使用真实API和数据库进行测试\r\n-- **环境一致**: 测试环境与生产环境保持一致\r\n-\r\n-### 3.2 测试覆盖\r\n-- **功能测试**: 覆盖所有核心业务功能\r\n-- **集成测试**: 确保前后端集成的正确性\r\n-- **用户体验测试**: 验证用户交互流程的完整性\r\n-\r\n-## 4. 开发流程\r\n-\r\n-### 4.1 代码规范\r\n-- **命名规范**: 使用有意义的变量和函数名\r\n-- **注释规范**: 关键逻辑必须有清晰的注释\r\n-- **版本控制**: 使用语义化的提交信息\r\n-\r\n-### 4.2 协作规范\r\n-- **文档维护**: 及时更新相关文档\r\n-- **代码审查**: 重要功能需要代码审查\r\n-- **知识共享**: 关键技术决策需要团队讨论\r\n-\r\n-## 5. 性能与安全\r\n-\r\n-### 5.1 性能优化\r\n-- **加载优化**: 合理的代码分割和懒加载\r\n-- **缓存策略**: 适当的缓存机制\r\n-- **资源优化**: 图片和静态资源的优化\r\n-\r\n-### 5.2 安全考虑\r\n-- **认证授权**: 完善的用户认证和权限控制\r\n-- **数据验证**: 前后端双重数据验证\r\n-- **安全传输**: HTTPS和安全的API设计\r\n-\r\n----\r\n-\r\n-详细的前端开发规范请参考：[前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n"
                },
                {
                    "date": 1752295317379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,70 @@\n \r\n+# 项目开发原则\r\n \r\n-开发原则：\r\n+## 总体原则\r\n \r\n-1、目前需要实现数据永久化，所有测试均不要使用模拟数据，要与远程数据库同步\r\n-2、如有需要进行测试，均与项目前端逻辑保持一致，避免出现测试通过，但与前端逻辑不一致的情况\r\n-3、数据库以最简开发方式，不要增加多余的字段和表\r\n-3、尽可能使用现有的UI框架，保持界面统一风格\r\n+本项目遵循现代化Web开发最佳实践，确保代码质量、用户体验和团队协作的一致性。\r\n \r\n+## 1. 数据管理原则\r\n \r\n+### 1.1 数据持久化\r\n+- **真实数据优先**: 所有功能均使用真实数据库，避免模拟数据\r\n+- **数据一致性**: 前后端数据结构保持严格一致\r\n+- **测试数据**: 测试环境使用与生产环境相同的数据结构\r\n+\r\n+### 1.2 数据库设计\r\n+- **最简设计**: 遵循最简开发方式，避免冗余字段和表\r\n+- **规范化**: 合理的数据库规范化，避免数据冗余\r\n+- **性能优化**: 适当的索引设计，确保查询性能\r\n+\r\n+## 2. 前端开发原则\r\n+\r\n+### 2.1 UI框架统一\r\n+- **组件库**: 统一使用Vant UI组件库\r\n+- **设计系统**: 遵循统一的设计系统和CSS变量\r\n+- **图标规范**: 严格按功能分类使用图标\r\n+\r\n+### 2.2 代码质量\r\n+- **Vue 3最佳实践**: 使用Composition API和现代化开发模式\r\n+- **组件化**: 可复用、单一职责的组件设计\r\n+- **响应式设计**: 确保移动端和桌面端的完美适配\r\n+\r\n+## 3. 测试原则\r\n+\r\n+### 3.1 测试一致性\r\n+- **逻辑一致**: 测试逻辑与前端业务逻辑保持完全一致\r\n+- **数据真实**: 使用真实API和数据库进行测试\r\n+- **环境一致**: 测试环境与生产环境保持一致\r\n+\r\n+### 3.2 测试覆盖\r\n+- **功能测试**: 覆盖所有核心业务功能\r\n+- **集成测试**: 确保前后端集成的正确性\r\n+- **用户体验测试**: 验证用户交互流程的完整性\r\n+\r\n+## 4. 开发流程\r\n+\r\n+### 4.1 代码规范\r\n+- **命名规范**: 使用有意义的变量和函数名\r\n+- **注释规范**: 关键逻辑必须有清晰的注释\r\n+- **版本控制**: 使用语义化的提交信息\r\n+\r\n+### 4.2 协作规范\r\n+- **文档维护**: 及时更新相关文档\r\n+- **代码审查**: 重要功能需要代码审查\r\n+- **知识共享**: 关键技术决策需要团队讨论\r\n+\r\n+## 5. 性能与安全\r\n+\r\n+### 5.1 性能优化\r\n+- **加载优化**: 合理的代码分割和懒加载\r\n+- **缓存策略**: 适当的缓存机制\r\n+- **资源优化**: 图片和静态资源的优化\r\n+\r\n+### 5.2 安全考虑\r\n+- **认证授权**: 完善的用户认证和权限控制\r\n+- **数据验证**: 前后端双重数据验证\r\n+- **安全传输**: HTTPS和安全的API设计\r\n+\r\n+---\r\n+\r\n+详细的前端开发规范请参考：[前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n"
                },
                {
                    "date": 1752420428523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,7 +64,28 @@\n - **认证授权**: 完善的用户认证和权限控制\r\n - **数据验证**: 前后端双重数据验证\r\n - **安全传输**: HTTPS和安全的API设计\r\n \r\n+## 6. 端口统一管理原则\r\n+\r\n+### 6.1 端口分配\r\n+- **固定端口分配**: 客户端使用3001端口，后台管理系统使用3003端口，后端API服务使用3007端口\r\n+- **禁止随意修改**: 端口号不得随意更改，确保系统一致性\r\n+- **统一启动管理**: 优先使用端口管理工具启动服务，自动处理端口冲突\r\n+\r\n+### 6.2 端口配置\r\n+- **集中配置管理**: 所有端口配置集中在`port-config.json`中管理\r\n+- **避免硬编码**: 禁止在代码中硬编码端口号，应使用环境变量或配置文件\r\n+- **配置保护**: 使用文件完整性校验和Git钩子保护端口配置\r\n+\r\n+### 6.3 端口修改流程\r\n+- **统一修改**: 如需修改端口，必须同时更新所有相关配置文件\r\n+- **同步配置**: 使用`scripts/sync-port-config.js`同步所有配置\r\n+- **验证测试**: 端口修改后必须测试前后端通信是否正常\r\n+\r\n ---\r\n \r\n+详细的端口管理指南请参考：[端口管理工具使用指南](./PORT_MANAGER_GUIDE.md)和[端口配置保护指南](./PORT_PROTECTION_GUIDE.md)\r\n+\r\n+---\r\n+\r\n 详细的前端开发规范请参考：[前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n"
                }
            ],
            "date": 1752285317091,
            "name": "Commit-0",
            "content": "\r\n\r\n开发原则：\r\n\r\n1、目前需要实现数据永久化，所有测试均不要使用模拟数据，要与远程数据库同步\r\n2、如有需要进行测试，均与项目前端逻辑保持一致，避免出现测试通过，但与前端逻辑不一致的情况\r\n3、数据库以最简开发方式，不要增加多余的字段和表\r\n3、尽可能使用现有的UI框架，保持界面统一风格\r\n\r\n\r\n"
        }
    ]
}