{
    "sourceFile": "server/scripts/tools/cleanup-hardcoded-values.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752329606009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752329606009,
            "name": "Commit-0",
            "content": "/**\n * 清理硬编码值脚本\n * 自动修复项目中的硬编码问题\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// 硬编码替换规则\nconst REPLACEMENT_RULES = [\n  // ComfyUI服务器URL\n  {\n    pattern: /https:\\/\\/hwf0p724ub-8188\\.cnb\\.run/g,\n    replacement: 'https://your-comfyui-server.com',\n    description: 'ComfyUI服务器URL (hwf0p724ub)'\n  },\n  {\n    pattern: /https:\\/\\/dzqgp58z0s-8188\\.cnb\\.run/g,\n    replacement: 'https://your-comfyui-server.com',\n    description: 'ComfyUI服务器URL (dzqgp58z0s)'\n  },\n  \n  // ComfyUI客户端ID\n  {\n    pattern: /abc1373d4ad648a3a81d0587fbe5534b/g,\n    replacement: 'your-comfyui-client-id',\n    description: 'ComfyUI客户端ID'\n  },\n  \n  // 本地API地址\n  {\n    pattern: /http:\\/\\/localhost:3006\\/api/g,\n    replacement: 'https://your-api-server.com/api',\n    description: '本地API地址'\n  },\n  {\n    pattern: /http:\\/\\/localhost:3006/g,\n    replacement: 'https://your-api-server.com',\n    description: '本地服务器地址'\n  },\n  \n  // 数据库IP地址\n  {\n    pattern: /114\\.132\\.50\\.71/g,\n    replacement: 'your-database-host.com',\n    description: '数据库IP地址'\n  },\n  \n  // 数据库密码\n  {\n    pattern: /dFLJYsd82irJwHX5/g,\n    replacement: 'your-database-password',\n    description: '数据库密码'\n  },\n  \n  // 备用服务器地址\n  {\n    pattern: /backup1\\.comfyui\\.com/g,\n    replacement: 'backup1.your-domain.com',\n    description: '备用服务器地址'\n  }\n];\n\n// 需要处理的文件扩展名\nconst FILE_EXTENSIONS = ['.js', '.ts', '.vue', '.json', '.md'];\n\n// 排除的目录和文件\nconst EXCLUDED_PATHS = [\n  'node_modules',\n  '.git',\n  'dist',\n  'build',\n  'coverage',\n  'logs',\n  'cleanup-hardcoded-values.js', // 排除自己\n  'check-deployment-readiness.js' // 保留检查脚本中的模式\n];\n\n// 扫描目录获取文件列表\nfunction scanDirectory(dir, results = []) {\n  try {\n    const files = fs.readdirSync(dir);\n\n    for (const file of files) {\n      const filePath = path.join(dir, file);\n      const relativePath = path.relative('.', filePath);\n      \n      // 检查是否在排除列表中\n      if (EXCLUDED_PATHS.some(excluded => relativePath.includes(excluded))) {\n        continue;\n      }\n      \n      try {\n        const stat = fs.statSync(filePath);\n\n        if (stat.isDirectory()) {\n          scanDirectory(filePath, results);\n        } else {\n          const ext = path.extname(file);\n          if (FILE_EXTENSIONS.includes(ext)) {\n            results.push(filePath);\n          }\n        }\n      } catch (error) {\n        console.warn(`无法访问文件: ${filePath}`);\n      }\n    }\n  } catch (error) {\n    console.warn(`无法访问目录: ${dir}`);\n  }\n\n  return results;\n}\n\n// 处理单个文件\nfunction processFile(filePath) {\n  try {\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n    const changes = [];\n\n    for (const rule of REPLACEMENT_RULES) {\n      const matches = content.match(rule.pattern);\n      if (matches) {\n        content = content.replace(rule.pattern, rule.replacement);\n        modified = true;\n        changes.push({\n          description: rule.description,\n          count: matches.length\n        });\n      }\n    }\n\n    if (modified) {\n      fs.writeFileSync(filePath, content, 'utf8');\n      return changes;\n    }\n\n    return null;\n  } catch (error) {\n    console.warn(`处理文件失败: ${filePath} - ${error.message}`);\n    return null;\n  }\n}\n\n// 主函数\nfunction cleanupHardcodedValues() {\n  console.log('🧹 开始清理硬编码值...\\n');\n\n  // 扫描所有文件\n  const allFiles = scanDirectory('.');\n  console.log(`📁 扫描到 ${allFiles.length} 个文件\\n`);\n\n  let processedFiles = 0;\n  let totalChanges = 0;\n  const modifiedFiles = [];\n\n  // 处理每个文件\n  for (const filePath of allFiles) {\n    const changes = processFile(filePath);\n    \n    if (changes) {\n      processedFiles++;\n      const relativePath = path.relative('.', filePath);\n      modifiedFiles.push({\n        file: relativePath,\n        changes\n      });\n      \n      const fileChanges = changes.reduce((sum, change) => sum + change.count, 0);\n      totalChanges += fileChanges;\n      \n      console.log(`✅ ${relativePath}:`);\n      changes.forEach(change => {\n        console.log(`   - ${change.description}: ${change.count} 处`);\n      });\n    }\n  }\n\n  // 显示结果\n  console.log('\\n📊 清理结果:');\n  console.log(`   扫描文件: ${allFiles.length}`);\n  console.log(`   修改文件: ${processedFiles}`);\n  console.log(`   总计修改: ${totalChanges} 处`);\n\n  if (processedFiles > 0) {\n    console.log('\\n🎉 硬编码值清理完成！');\n    console.log('\\n📝 后续步骤:');\n    console.log('   1. 检查修改的文件确保正确性');\n    console.log('   2. 配置环境变量文件');\n    console.log('   3. 在后台管理系统中设置正确的配置');\n    console.log('   4. 重新运行部署检查: node check-deployment-readiness.js');\n  } else {\n    console.log('\\n✅ 未发现需要清理的硬编码值');\n  }\n\n  return {\n    scannedFiles: allFiles.length,\n    modifiedFiles: processedFiles,\n    totalChanges,\n    details: modifiedFiles\n  };\n}\n\n// 创建示例环境变量文件\nfunction createExampleEnvFiles() {\n  console.log('\\n📝 创建示例环境变量文件...');\n\n  // 客户端环境变量示例\n  const clientEnvExample = `# 客户端生产环境配置示例\n# 复制此文件为 .env.production 并修改相应值\n\n# 应用基础信息\nVITE_APP_TITLE=AI Magic - AI图像处理平台\nVITE_APP_VERSION=1.0.0\nVITE_APP_ENV=production\n\n# ComfyUI服务器配置\nVITE_COMFYUI_SERVER_URL=https://your-comfyui-server.com\nVITE_COMFYUI_BACKUP_SERVERS=https://backup1.your-domain.com,https://backup2.your-domain.com\nVITE_COMFYUI_AUTO_SWITCH=true\nVITE_COMFYUI_TIMEOUT=300000\nVITE_COMFYUI_HEALTH_CHECK_TIMEOUT=10000\n\n# API服务器配置\nVITE_API_BASE_URL=https://your-api-server.com/api\nVITE_USE_PROXY=false\n\n# AI功能配置\nVITE_AI_TEXT_TO_IMAGE_POINTS=20\nVITE_AI_FACE_SWAP_POINTS=20\nVITE_AI_UNDRESS_POINTS=20\n`;\n\n  // 服务端环境变量示例\n  const serverEnvExample = `# 服务端生产环境配置示例\n# 复制此文件为 .env.production 并修改相应值\n\n# 服务器配置\nNODE_ENV=production\nPORT=3006\n\n# 数据库配置\nDB_HOST=your-database-host.com\nDB_PORT=3306\nDB_USER=your-database-user\nDB_PASSWORD=your-database-password\nDB_NAME=your-database-name\n\n# JWT配置\nJWT_SECRET=your-super-secret-jwt-key-change-this-in-production-min-32-chars\nJWT_EXPIRES_IN=7d\n\n# ComfyUI配置\nCOMFYUI_SERVER_URL=https://your-comfyui-server.com\nCOMFYUI_BACKUP_SERVERS=https://backup1.your-domain.com,https://backup2.your-domain.com\nCOMFYUI_AUTO_SWITCH=true\nCOMFYUI_HEALTH_CHECK_TIMEOUT=10000\nCOMFYUI_TIMEOUT=300000\n\n# 前端配置\nFRONTEND_API_BASE_URL=https://your-api-server.com/api\nFRONTEND_TITLE=AI Magic - AI图像处理平台\nFRONTEND_VERSION=1.0.0\n\n# 跨域配置\nCORS_ORIGIN=https://your-frontend-domain.com\n\n# AI功能配置\nAI_TEXT_TO_IMAGE_POINTS=20\nAI_FACE_SWAP_POINTS=20\nAI_UNDRESS_POINTS=20\n`;\n\n  try {\n    // 创建客户端环境变量示例\n    if (!fs.existsSync('client/.env.production.example')) {\n      fs.writeFileSync('client/.env.production.example', clientEnvExample);\n      console.log('✅ 创建 client/.env.production.example');\n    }\n\n    // 创建服务端环境变量示例\n    if (!fs.existsSync('server/.env.production.example')) {\n      fs.writeFileSync('server/.env.production.example', serverEnvExample);\n      console.log('✅ 创建 server/.env.production.example');\n    }\n\n    console.log('\\n💡 请复制示例文件并修改配置:');\n    console.log('   cp client/.env.production.example client/.env.production');\n    console.log('   cp server/.env.production.example server/.env.production');\n  } catch (error) {\n    console.error('❌ 创建环境变量示例文件失败:', error.message);\n  }\n}\n\n// 运行清理\nif (require.main === module) {\n  const result = cleanupHardcodedValues();\n  createExampleEnvFiles();\n  \n  // 退出码：0表示成功，1表示有修改\n  process.exit(result.modifiedFiles > 0 ? 1 : 0);\n}\n\nmodule.exports = { cleanupHardcodedValues, createExampleEnvFiles };\n\n"
        }
    ]
}