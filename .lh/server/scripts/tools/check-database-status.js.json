{
    "sourceFile": "server/scripts/tools/check-database-status.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752979763622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752979763622,
            "name": "Commit-0",
            "content": "require('dotenv').config({ path: './server/.env' });\nconst mysql = require('mysql2/promise');\n\nasync function checkDatabaseStatus() {\n  console.log('🔍 检查数据库状态...\\n');\n\n  try {\n    // 创建数据库连接\n    const connection = await mysql.createConnection({\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      charset: 'utf8mb4'\n    });\n\n    console.log('✅ 数据库连接成功');\n    console.log(`📍 连接到: ${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}\\n`);\n\n    // 查询函数\n    const query = async (sql, params = []) => {\n      const [rows] = await connection.execute(sql, params);\n      return rows;\n    };\n\n    // 获取详细统计信息\n    console.log('📊 数据库统计信息:');\n\n    // 用户统计\n    const userStats = await query(`\n      SELECT\n        COUNT(*) as total_users,\n        COUNT(CASE WHEN status = 'active' THEN 1 END) as active_users,\n        COUNT(CASE WHEN status = 'banned' THEN 1 END) as banned_users,\n        COUNT(CASE WHEN DATE(created_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as recent_users\n      FROM users\n    `);\n\n    const userStat = userStats[0];\n    console.log(`   👥 用户: ${userStat.total_users} 总数 (${userStat.active_users} 活跃, ${userStat.banned_users} 封禁, ${userStat.recent_users} 近7天新增)`);\n\n    // 等级卡统计\n    const cardStats = await query(`\n      SELECT\n        COUNT(*) as total_cards,\n        COUNT(CASE WHEN bound_user_id IS NOT NULL THEN 1 END) as bound_cards,\n        COUNT(CASE WHEN bound_user_id IS NULL THEN 1 END) as available_cards,\n        SUM(remaining_points) as total_points\n      FROM level_cards\n    `);\n\n    const cardStat = cardStats[0];\n    console.log(`   🎫 等级卡: ${cardStat.total_cards} 总数 (${cardStat.bound_cards} 已绑定, ${cardStat.available_cards} 可用, ${cardStat.total_points} 总积分)`);\n\n    // 积分记录统计\n    const pointStats = await query(`\n      SELECT\n        COUNT(*) as total_logs,\n        COUNT(CASE WHEN action_type = 'consume' THEN 1 END) as consume_logs,\n        COUNT(CASE WHEN action_type = 'bind' THEN 1 END) as bind_logs,\n        SUM(CASE WHEN action_type = 'consume' THEN points_amount ELSE 0 END) as total_consumed\n      FROM point_logs\n    `);\n\n    const pointStat = pointStats[0];\n    console.log(`   💰 积分记录: ${pointStat.total_logs} 总记录 (${pointStat.consume_logs} 消费, ${pointStat.bind_logs} 绑定, ${pointStat.total_consumed} 总消费积分)`);\n\n    // 管理员统计\n    const adminStats = await query('SELECT COUNT(*) as admin_count FROM admins');\n    console.log(`   👨‍💼 管理员: ${adminStats[0].admin_count} 个账号`);\n\n    // 卡片类型统计\n    const cardTypes = await query('SELECT name, COUNT(*) as count FROM level_cards lc JOIN card_types ct ON lc.type_id = ct.id GROUP BY ct.name');\n    console.log('\\n🎯 卡片类型分布:');\n    cardTypes.forEach(type => {\n      console.log(`   ${type.name}: ${type.count} 张`);\n    });\n\n    // 最近活动\n    console.log('\\n📈 最近活动:');\n    const recentLogs = await query(`\n      SELECT pl.action_type, pl.points_amount, pl.description, pl.created_at, u.username\n      FROM point_logs pl\n      LEFT JOIN users u ON pl.user_id = u.id\n      ORDER BY pl.created_at DESC\n      LIMIT 5\n    `);\n\n    if (recentLogs.length > 0) {\n      recentLogs.forEach(log => {\n        const date = new Date(log.created_at).toLocaleString('zh-CN');\n        console.log(`   ${date} - ${log.username || '未知用户'}: ${log.description} (${log.points_amount}积分)`);\n      });\n    } else {\n      console.log('   暂无积分记录');\n    }\n\n    // 管理员账号详情\n    console.log('\\n👨‍💼 管理员账号详情:');\n    const adminDetails = await query(`\n      SELECT id, username, role, status, created_at\n      FROM admins\n      ORDER BY created_at DESC\n    `);\n\n    if (adminDetails.length > 0) {\n      adminDetails.forEach(admin => {\n        const date = new Date(admin.created_at).toLocaleString('zh-CN');\n        console.log(`   ID: ${admin.id}, 用户名: ${admin.username}, 角色: ${admin.role}, 状态: ${admin.status}, 创建时间: ${date}`);\n      });\n    } else {\n      console.log('   暂无管理员账号');\n    }\n\n    console.log('\\n🎉 数据库状态检查完成！');\n    console.log('💡 数据库连接正常，可以启动管理后台使用真实数据。');\n\n    await connection.end();\n\n  } catch (error) {\n    console.error('❌ 数据库连接失败:', error.message);\n    console.log('\\n🔧 请检查以下配置:');\n    console.log(`   数据库主机: ${process.env.DB_HOST}`);\n    console.log(`   数据库端口: ${process.env.DB_PORT}`);\n    console.log(`   数据库名称: ${process.env.DB_NAME}`);\n    console.log(`   数据库用户: ${process.env.DB_USER}`);\n    console.log('\\n💡 确保数据库服务器可访问且配置正确。');\n  }\n}\n\ncheckDatabaseStatus();\n"
        }
    ]
}