{
    "sourceFile": "server/FTP_UPLOAD_GUIDE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1753705123968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753705329102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,18 @@\n # AIMagic 后端服务 FTP 上传部署指南\n \n ## 📋 概述\n \n-本指南详细说明如何通过FTP将AIMagic后端服务部署到生产服务器 `114.132.50.71`。\n+本指南详细说明如何通过FTP将AIMagic后端服务部署到腾讯云Windows Server生产服务器 `114.132.50.71`。\n \n ## 🎯 部署目标\n \n+- **云服务商**: 腾讯云\n+- **操作系统**: Windows Server\n - **服务器**: 114.132.50.71\n - **端口**: 3007\n - **数据库**: 已配置 (aimagic@114.132.50.71:3306)\n-- **运行环境**: Node.js + PM2\n+- **运行环境**: Node.js + PM2 (Windows版本)\n \n ## 📁 文件上传清单\n \n ### 🔴 必需文件 (REQUIRED)\n"
                },
                {
                    "date": 1753705354130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,19 +18,19 @@\n ### 🔴 必需文件 (REQUIRED)\n \n #### 核心应用文件\n ```\n-server/\n-├── src/                          # 源代码目录 [必需]\n+server\\\n+├── src\\                          # 源代码目录 [必需]\n │   ├── app.js                   # 应用入口 [必需]\n-│   ├── config/                  # 配置文件 [必需]\n+│   ├── config\\                  # 配置文件 [必需]\n │   │   └── database.js          # 数据库配置 [必需]\n-│   ├── middleware/              # 中间件 [必需]\n+│   ├── middleware\\              # 中间件 [必需]\n │   │   ├── auth.js             # 认证中间件 [必需]\n │   │   ├── adminAuth.js        # 管理员认证 [必需]\n │   │   ├── errorHandler.js     # 错误处理 [必需]\n │   │   └── rateLimiter.js      # 限流中间件 [必需]\n-│   ├── routes/                  # 路由文件 [必需]\n+│   ├── routes\\                  # 路由文件 [必需]\n │   │   ├── auth.js             # 认证路由 [必需]\n │   │   ├── users.js            # 用户路由 [必需]\n │   │   ├── images.js           # 图像处理路由 [必需]\n │   │   ├── admin.js            # 管理路由 [必需]\n@@ -39,12 +39,12 @@\n │   │   ├── levelCards.js       # 等级卡路由 [必需]\n │   │   ├── config.js           # 配置路由 [必需]\n │   │   ├── public-config.js    # 公共配置路由 [必需]\n │   │   └── workflow-config.js  # 工作流配置路由 [必需]\n-│   ├── scripts/                 # 脚本文件 [必需]\n+│   ├── scripts\\                 # 脚本文件 [必需]\n │   │   ├── init-deployment-config.js  # 部署初始化 [必需]\n │   │   └── health-check.js     # 健康检查 [必需]\n-│   └── utils/                   # 工具函数 [可选]\n+│   └── utils\\                   # 工具函数 [可选]\n │       ├── memoryManager.js    # 内存管理 [可选]\n │       ├── performanceMonitor.js # 性能监控 [可选]\n │       └── pointsCalculator.js # 积分计算 [可选]\n ```\n"
                },
                {
                    "date": 1753705380663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,20 +50,20 @@\n ```\n \n #### 配置文件\n ```\n-server/\n+server\\\n ├── package.json                 # 依赖配置 [必需]\n ├── production-package.json      # 生产环境依赖 [必需]\n ├── .env.production             # 生产环境变量 [必需]\n ├── ecosystem.config.js         # PM2配置 [必需]\n-└── deploy.sh                   # 部署脚本 [必需]\n+└── deploy.bat                  # Windows部署脚本 [必需]\n ```\n \n #### SQL脚本\n ```\n-server/\n-└── sql/                        # SQL脚本 [可选]\n+server\\\n+└── sql\\                        # SQL脚本 [可选]\n     ├── create_config_table.sql # 配置表创建 [可选]\n     └── performance_optimization.sql # 性能优化 [可选]\n ```\n \n"
                },
                {
                    "date": 1753705394729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,13 @@\n \n ### 🟡 可选文件 (OPTIONAL)\n \n ```\n-server/\n-├── scripts/                    # 额外脚本 [可选]\n+server\\\n+├── scripts\\                    # 额外脚本 [可选]\n │   ├── optimize-database.js   # 数据库优化 [可选]\n │   └── process-manager.js     # 进程管理 [可选]\n-└── docs/                      # 文档 [可选]\n+└── docs\\                      # 文档 [可选]\n     └── README.md              # 项目文档 [可选]\n ```\n \n ### 🔴 排除文件 (EXCLUDE)\n"
                },
                {
                    "date": 1753705411458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,19 +81,19 @@\n ### 🔴 排除文件 (EXCLUDE)\n \n **绝对不要上传的文件:**\n ```\n-❌ node_modules/              # 依赖包目录\n-❌ .git/                     # Git版本控制\n+❌ node_modules\\              # 依赖包目录\n+❌ .git\\                     # Git版本控制\n ❌ .env                      # 开发环境变量\n ❌ .env.local               # 本地环境变量\n ❌ .env.development         # 开发环境变量\n-❌ logs/*.log               # 日志文件\n-❌ uploads/images/*         # 上传的图片\n-❌ test/                    # 测试文件\n-❌ coverage/                # 测试覆盖率\n-❌ .vscode/                 # IDE配置\n-❌ .idea/                   # IDE配置\n+❌ logs\\*.log               # 日志文件\n+❌ uploads\\images\\*         # 上传的图片\n+❌ test\\                    # 测试文件\n+❌ coverage\\                # 测试覆盖率\n+❌ .vscode\\                 # IDE配置\n+❌ .idea\\                   # IDE配置\n ❌ *.test.js               # 测试文件\n ❌ *.spec.js               # 测试文件\n ```\n \n"
                },
                {
                    "date": 1753705437851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,21 +101,21 @@\n \n ### 1. 准备上传文件\n \n 在本地创建上传目录结构：\n-```bash\n-# 创建临时上传目录\n+```powershell\n+# 在PowerShell中创建临时上传目录\n mkdir aimagic-server-upload\n cd aimagic-server-upload\n \n # 复制必需文件\n-cp -r ../src ./\n-cp ../package.json ./\n-cp ../production-package.json ./package.json  # 覆盖为生产版本\n-cp ../.env.production ./\n-cp ../ecosystem.config.js ./\n-cp ../deploy.sh ./\n-cp -r ../sql ./  # 可选\n+Copy-Item -Recurse ..\\src .\\\n+Copy-Item ..\\package.json .\\\n+Copy-Item ..\\production-package.json .\\package.json  # 覆盖为生产版本\n+Copy-Item ..\\.env.production .\\\n+Copy-Item ..\\ecosystem.config.js .\\\n+Copy-Item ..\\deploy.bat .\\\n+Copy-Item -Recurse ..\\sql .\\  # 可选\n ```\n \n ### 2. FTP连接信息\n \n"
                },
                {
                    "date": 1753705451167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n 服务器地址: 114.132.50.71\n FTP端口: 21 (默认)\n 用户名: [您的FTP用户名]\n 密码: [您的FTP密码]\n-上传目录: /var/www/aimagic/server/\n+上传目录: C:\\inetpub\\wwwroot\\aimagic\\server\\\n ```\n \n ### 3. 使用FTP客户端上传\n \n"
                },
                {
                    "date": 1753705469027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,26 +131,30 @@\n \n #### 方式一: FileZilla (推荐)\n 1. 打开FileZilla\n 2. 连接到服务器\n-3. 导航到 `/var/www/aimagic/server/`\n+3. 导航到 `C:\\inetpub\\wwwroot\\aimagic\\server\\`\n 4. 上传准备好的文件\n \n-#### 方式二: 命令行FTP\n-```bash\n+#### 方式二: Windows命令行FTP\n+```cmd\n ftp 114.132.50.71\n # 输入用户名和密码\n-cd /var/www/aimagic/server\n-put -r aimagic-server-upload/*\n+cd C:\\inetpub\\wwwroot\\aimagic\\server\n+mput aimagic-server-upload\\*\n quit\n ```\n \n-#### 方式三: SFTP (更安全)\n-```bash\n-sftp root@114.132.50.71\n-cd /var/www/aimagic/server\n-put -r aimagic-server-upload/*\n-quit\n+#### 方式三: PowerShell SFTP (需要安装Posh-SSH模块)\n+```powershell\n+# 安装Posh-SSH模块\n+Install-Module -Name Posh-SSH -Force\n+\n+# 使用SFTP上传\n+$session = New-SFTPSession -ComputerName 114.132.50.71 -Credential (Get-Credential)\n+Set-SFTPLocation -SessionId $session.SessionId -Path \"C:\\inetpub\\wwwroot\\aimagic\\server\"\n+Set-SFTPFile -SessionId $session.SessionId -LocalFile \".\\aimagic-server-upload\\*\" -RemotePath \".\"\n+Remove-SFTPSession -SessionId $session.SessionId\n ```\n \n ## 🔧 服务器端配置\n \n"
                },
                {
                    "date": 1753705521518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,44 +157,62 @@\n ```\n \n ## 🔧 服务器端配置\n \n-### 1. 连接到服务器\n-```bash\n-ssh root@114.132.50.71\n-cd /var/www/aimagic/server\n+### 1. 连接到腾讯云Windows服务器\n+\n+#### 方式一: 腾讯云控制台远程桌面 (推荐)\n+1. 登录腾讯云控制台: https://console.cloud.tencent.com/\n+2. 进入 \"云服务器\" → \"实例\"\n+3. 找到服务器 114.132.50.71\n+4. 点击 \"登录\" → \"VNC登录\" 或 \"远程桌面登录\"\n+5. 输入Administrator密码\n+\n+#### 方式二: Windows远程桌面连接\n+```cmd\n+# 在本地Windows电脑上按 Win+R，输入：\n+mstsc\n+\n+# 在远程桌面连接中输入：\n+# 计算机: 114.132.50.71\n+# 用户名: Administrator\n+# 密码: [您的服务器密码]\n ```\n \n-### 2. 设置文件权限\n-```bash\n-# 设置脚本执行权限\n-chmod +x deploy.sh\n+#### 方式三: PowerShell远程连接\n+```powershell\n+# 在本地PowerShell中运行：\n+Enter-PSSession -ComputerName 114.132.50.71 -Credential (Get-Credential)\n+```\n \n-# 设置目录权限\n-chmod 755 src/\n-chmod 755 sql/\n-chmod 644 *.js\n-chmod 644 *.json\n-chmod 600 .env.production\n+### 2. 导航到项目目录\n+```cmd\n+# 在服务器上打开命令提示符或PowerShell\n+cd C:\\inetpub\\wwwroot\\aimagic\\server\n ```\n \n ### 3. 创建必要目录\n-```bash\n-mkdir -p logs\n-mkdir -p uploads/images\n-mkdir -p uploads/temp\n-chmod 755 logs uploads\n-chmod 755 uploads/images uploads/temp\n+```cmd\n+# 创建必要目录\n+if not exist \"logs\" mkdir logs\n+if not exist \"uploads\" mkdir uploads\n+if not exist \"uploads\\images\" mkdir uploads\\images\n+if not exist \"uploads\\temp\" mkdir uploads\\temp\n ```\n \n ### 4. 安装Node.js和PM2 (如未安装)\n-```bash\n-# 安装Node.js (如果未安装)\n-curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\n-apt-get install -y nodejs\n+```powershell\n+# 下载并安装Node.js (如果未安装)\n+# 访问 https://nodejs.org/ 下载Windows版本\n+# 或使用Chocolatey包管理器：\n+choco install nodejs\n \n # 安装PM2\n npm install -g pm2\n+npm install -g pm2-windows-startup\n+\n+# 配置PM2 Windows服务\n+pm2-startup install\n ```\n \n ## 🚀 部署执行\n \n"
                },
                {
                    "date": 1753705539018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,31 +216,41 @@\n \n ## 🚀 部署执行\n \n ### 自动部署 (推荐)\n-```bash\n-# 执行部署脚本\n-./deploy.sh\n+```cmd\n+# 执行Windows部署脚本\n+deploy.bat\n ```\n \n ### 手动部署\n-```bash\n+```cmd\n # 1. 安装依赖\n npm install --production\n \n # 2. 初始化数据库配置\n-node src/scripts/init-deployment-config.js\n+node src\\scripts\\init-deployment-config.js\n \n # 3. 启动服务\n pm2 start ecosystem.config.js --env production\n \n # 4. 保存PM2配置\n pm2 save\n \n-# 5. 设置开机自启\n+# 5. 设置开机自启 (Windows)\n pm2 startup\n+pm2 save\n ```\n \n+### Windows防火墙配置\n+```cmd\n+# 添加防火墙规则允许3007端口\n+netsh advfirewall firewall add rule name=\"AIMagic Server Port 3007\" dir=in action=allow protocol=TCP localport=3007\n+\n+# 查看防火墙规则\n+netsh advfirewall firewall show rule name=\"AIMagic Server Port 3007\"\n+```\n+\n ## 📊 服务管理命令\n \n ```bash\n # 查看服务状态\n"
                },
                {
                    "date": 1753705554118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n ```\n \n ## 📊 服务管理命令\n \n-```bash\n+```cmd\n # 查看服务状态\n pm2 status\n \n # 查看日志\n@@ -271,9 +271,14 @@\n # 监控服务\n pm2 monit\n \n # 健康检查\n-node src/scripts/health-check.js\n+node src\\scripts\\health-check.js\n+\n+# Windows服务管理\n+sc query \"PM2 aimagic-server\"\n+sc start \"PM2 aimagic-server\"\n+sc stop \"PM2 aimagic-server\"\n ```\n \n ## 🔍 验证部署\n \n"
                },
                {
                    "date": 1753705698534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,8 +278,11 @@\n sc query \"PM2 aimagic-server\"\n sc start \"PM2 aimagic-server\"\n sc stop \"PM2 aimagic-server\"\n ```\n+sc start \"PM2 aimagic-server\"\n+sc stop \"PM2 aimagic-server\"\n+```\n \n ## 🔍 验证部署\n \n ### 1. 检查服务状态\n"
                },
                {
                    "date": 1753705716067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,27 +285,35 @@\n \n ## 🔍 验证部署\n \n ### 1. 检查服务状态\n-```bash\n+```cmd\n pm2 status\n-curl http://localhost:3007/api/health\n+# 使用PowerShell测试API\n+Invoke-RestMethod -Uri http://localhost:3007/api/health\n ```\n \n ### 2. 检查数据库连接\n-```bash\n-node src/scripts/health-check.js\n+```cmd\n+node src\\scripts\\health-check.js\n ```\n \n ### 3. 测试API接口\n-```bash\n+```powershell\n # 测试基本接口\n-curl http://114.132.50.71:3007/api/health\n+Invoke-RestMethod -Uri http://114.132.50.71:3007/api/health\n \n # 测试配置接口\n-curl http://114.132.50.71:3007/api/config\n+Invoke-RestMethod -Uri http://114.132.50.71:3007/api/config\n ```\n \n+### 4. 浏览器测试\n+```\n+直接在浏览器中访问：\n+http://114.132.50.71:3007/api/health\n+http://114.132.50.71:3007/api/config\n+```\n+\n ## 🛡️ 安全注意事项\n \n 1. **环境变量安全**: 确保 `.env.production` 文件权限为 600\n 2. **数据库密码**: 生产环境密码已配置，请勿修改\n"
                },
                {
                    "date": 1753705731139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,12 +314,14 @@\n ```\n \n ## 🛡️ 安全注意事项\n \n-1. **环境变量安全**: 确保 `.env.production` 文件权限为 600\n+1. **环境变量安全**: 确保 `.env.production` 文件访问权限受限\n 2. **数据库密码**: 生产环境密码已配置，请勿修改\n-3. **防火墙设置**: 确保端口3007已开放\n-4. **SSL证书**: 建议配置HTTPS (可选)\n+3. **Windows防火墙**: 确保端口3007已开放\n+4. **Windows更新**: 保持系统更新\n+5. **SSL证书**: 建议配置HTTPS (可选)\n+6. **用户权限**: 建议使用非管理员账户运行服务\n \n ## 🔧 故障排除\n \n ### 常见问题\n"
                },
                {
                    "date": 1753705750007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,28 +326,48 @@\n \n ### 常见问题\n \n 1. **端口被占用**\n-   ```bash\n-   lsof -i :3007\n-   kill -9 [PID]\n+   ```cmd\n+   # 查看端口占用\n+   netstat -ano | findstr :3007\n+   # 结束占用进程\n+   taskkill /PID [PID] /F\n    ```\n \n-2. **权限问题**\n-   ```bash\n-   chown -R www-data:www-data /var/www/aimagic/server\n+2. **Windows服务权限问题**\n+   ```cmd\n+   # 以管理员身份运行命令提示符\n+   # 检查服务状态\n+   sc query \"PM2 aimagic-server\"\n+   # 重启服务\n+   sc stop \"PM2 aimagic-server\"\n+   sc start \"PM2 aimagic-server\"\n    ```\n \n 3. **数据库连接失败**\n    - 检查 `.env.production` 配置\n-   - 确认数据库服务运行正常\n+   - 确认MySQL服务运行正常\n+   - 检查Windows防火墙设置\n \n 4. **PM2服务无法启动**\n-   ```bash\n+   ```cmd\n    pm2 logs aimagic-server\n-   pm2 flush  # 清除日志\n+   pm2 flush\n+   # 重新安装PM2 Windows服务\n+   pm2-startup uninstall\n+   pm2-startup install\n    ```\n \n+5. **Node.js模块问题**\n+   ```cmd\n+   # 清除npm缓存\n+   npm cache clean --force\n+   # 删除node_modules重新安装\n+   rmdir /s node_modules\n+   npm install --production\n+   ```\n+\n ## 📞 技术支持\n \n 如遇到部署问题，请检查：\n 1. 服务器日志: `pm2 logs aimagic-server`\n"
                },
                {
                    "date": 1753705766219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,10 +370,26 @@\n ## 📞 技术支持\n \n 如遇到部署问题，请检查：\n 1. 服务器日志: `pm2 logs aimagic-server`\n-2. 系统日志: `tail -f /var/log/syslog`\n-3. 健康检查: `node src/scripts/health-check.js`\n+2. Windows事件日志: 打开\"事件查看器\" → \"Windows日志\" → \"应用程序\"\n+3. 健康检查: `node src\\scripts\\health-check.js`\n+4. 腾讯云控制台监控数据\n \n+### Windows系统特有检查\n+```cmd\n+# 检查Windows服务\n+services.msc\n+\n+# 检查系统资源\n+taskmgr\n+\n+# 检查网络连接\n+netstat -an | findstr :3007\n+\n+# 检查防火墙状态\n+netsh advfirewall show allprofiles\n+```\n+\n ---\n \n **部署完成后访问地址**: http://114.132.50.71:3007\n"
                }
            ],
            "date": 1753705123968,
            "name": "Commit-0",
            "content": "# AIMagic 后端服务 FTP 上传部署指南\n\n## 📋 概述\n\n本指南详细说明如何通过FTP将AIMagic后端服务部署到生产服务器 `114.132.50.71`。\n\n## 🎯 部署目标\n\n- **服务器**: 114.132.50.71\n- **端口**: 3007\n- **数据库**: 已配置 (aimagic@114.132.50.71:3306)\n- **运行环境**: Node.js + PM2\n\n## 📁 文件上传清单\n\n### 🔴 必需文件 (REQUIRED)\n\n#### 核心应用文件\n```\nserver/\n├── src/                          # 源代码目录 [必需]\n│   ├── app.js                   # 应用入口 [必需]\n│   ├── config/                  # 配置文件 [必需]\n│   │   └── database.js          # 数据库配置 [必需]\n│   ├── middleware/              # 中间件 [必需]\n│   │   ├── auth.js             # 认证中间件 [必需]\n│   │   ├── adminAuth.js        # 管理员认证 [必需]\n│   │   ├── errorHandler.js     # 错误处理 [必需]\n│   │   └── rateLimiter.js      # 限流中间件 [必需]\n│   ├── routes/                  # 路由文件 [必需]\n│   │   ├── auth.js             # 认证路由 [必需]\n│   │   ├── users.js            # 用户路由 [必需]\n│   │   ├── images.js           # 图像处理路由 [必需]\n│   │   ├── admin.js            # 管理路由 [必需]\n│   │   ├── adminAuth.js        # 管理员认证路由 [必需]\n│   │   ├── points.js           # 积分路由 [必需]\n│   │   ├── levelCards.js       # 等级卡路由 [必需]\n│   │   ├── config.js           # 配置路由 [必需]\n│   │   ├── public-config.js    # 公共配置路由 [必需]\n│   │   └── workflow-config.js  # 工作流配置路由 [必需]\n│   ├── scripts/                 # 脚本文件 [必需]\n│   │   ├── init-deployment-config.js  # 部署初始化 [必需]\n│   │   └── health-check.js     # 健康检查 [必需]\n│   └── utils/                   # 工具函数 [可选]\n│       ├── memoryManager.js    # 内存管理 [可选]\n│       ├── performanceMonitor.js # 性能监控 [可选]\n│       └── pointsCalculator.js # 积分计算 [可选]\n```\n\n#### 配置文件\n```\nserver/\n├── package.json                 # 依赖配置 [必需]\n├── production-package.json      # 生产环境依赖 [必需]\n├── .env.production             # 生产环境变量 [必需]\n├── ecosystem.config.js         # PM2配置 [必需]\n└── deploy.sh                   # 部署脚本 [必需]\n```\n\n#### SQL脚本\n```\nserver/\n└── sql/                        # SQL脚本 [可选]\n    ├── create_config_table.sql # 配置表创建 [可选]\n    └── performance_optimization.sql # 性能优化 [可选]\n```\n\n### 🟡 可选文件 (OPTIONAL)\n\n```\nserver/\n├── scripts/                    # 额外脚本 [可选]\n│   ├── optimize-database.js   # 数据库优化 [可选]\n│   └── process-manager.js     # 进程管理 [可选]\n└── docs/                      # 文档 [可选]\n    └── README.md              # 项目文档 [可选]\n```\n\n### 🔴 排除文件 (EXCLUDE)\n\n**绝对不要上传的文件:**\n```\n❌ node_modules/              # 依赖包目录\n❌ .git/                     # Git版本控制\n❌ .env                      # 开发环境变量\n❌ .env.local               # 本地环境变量\n❌ .env.development         # 开发环境变量\n❌ logs/*.log               # 日志文件\n❌ uploads/images/*         # 上传的图片\n❌ test/                    # 测试文件\n❌ coverage/                # 测试覆盖率\n❌ .vscode/                 # IDE配置\n❌ .idea/                   # IDE配置\n❌ *.test.js               # 测试文件\n❌ *.spec.js               # 测试文件\n```\n\n## 🚀 FTP上传步骤\n\n### 1. 准备上传文件\n\n在本地创建上传目录结构：\n```bash\n# 创建临时上传目录\nmkdir aimagic-server-upload\ncd aimagic-server-upload\n\n# 复制必需文件\ncp -r ../src ./\ncp ../package.json ./\ncp ../production-package.json ./package.json  # 覆盖为生产版本\ncp ../.env.production ./\ncp ../ecosystem.config.js ./\ncp ../deploy.sh ./\ncp -r ../sql ./  # 可选\n```\n\n### 2. FTP连接信息\n\n```\n服务器地址: 114.132.50.71\nFTP端口: 21 (默认)\n用户名: [您的FTP用户名]\n密码: [您的FTP密码]\n上传目录: /var/www/aimagic/server/\n```\n\n### 3. 使用FTP客户端上传\n\n#### 方式一: FileZilla (推荐)\n1. 打开FileZilla\n2. 连接到服务器\n3. 导航到 `/var/www/aimagic/server/`\n4. 上传准备好的文件\n\n#### 方式二: 命令行FTP\n```bash\nftp 114.132.50.71\n# 输入用户名和密码\ncd /var/www/aimagic/server\nput -r aimagic-server-upload/*\nquit\n```\n\n#### 方式三: SFTP (更安全)\n```bash\nsftp root@114.132.50.71\ncd /var/www/aimagic/server\nput -r aimagic-server-upload/*\nquit\n```\n\n## 🔧 服务器端配置\n\n### 1. 连接到服务器\n```bash\nssh root@114.132.50.71\ncd /var/www/aimagic/server\n```\n\n### 2. 设置文件权限\n```bash\n# 设置脚本执行权限\nchmod +x deploy.sh\n\n# 设置目录权限\nchmod 755 src/\nchmod 755 sql/\nchmod 644 *.js\nchmod 644 *.json\nchmod 600 .env.production\n```\n\n### 3. 创建必要目录\n```bash\nmkdir -p logs\nmkdir -p uploads/images\nmkdir -p uploads/temp\nchmod 755 logs uploads\nchmod 755 uploads/images uploads/temp\n```\n\n### 4. 安装Node.js和PM2 (如未安装)\n```bash\n# 安装Node.js (如果未安装)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\napt-get install -y nodejs\n\n# 安装PM2\nnpm install -g pm2\n```\n\n## 🚀 部署执行\n\n### 自动部署 (推荐)\n```bash\n# 执行部署脚本\n./deploy.sh\n```\n\n### 手动部署\n```bash\n# 1. 安装依赖\nnpm install --production\n\n# 2. 初始化数据库配置\nnode src/scripts/init-deployment-config.js\n\n# 3. 启动服务\npm2 start ecosystem.config.js --env production\n\n# 4. 保存PM2配置\npm2 save\n\n# 5. 设置开机自启\npm2 startup\n```\n\n## 📊 服务管理命令\n\n```bash\n# 查看服务状态\npm2 status\n\n# 查看日志\npm2 logs aimagic-server\n\n# 重启服务\npm2 restart aimagic-server\n\n# 停止服务\npm2 stop aimagic-server\n\n# 删除服务\npm2 delete aimagic-server\n\n# 监控服务\npm2 monit\n\n# 健康检查\nnode src/scripts/health-check.js\n```\n\n## 🔍 验证部署\n\n### 1. 检查服务状态\n```bash\npm2 status\ncurl http://localhost:3007/api/health\n```\n\n### 2. 检查数据库连接\n```bash\nnode src/scripts/health-check.js\n```\n\n### 3. 测试API接口\n```bash\n# 测试基本接口\ncurl http://114.132.50.71:3007/api/health\n\n# 测试配置接口\ncurl http://114.132.50.71:3007/api/config\n```\n\n## 🛡️ 安全注意事项\n\n1. **环境变量安全**: 确保 `.env.production` 文件权限为 600\n2. **数据库密码**: 生产环境密码已配置，请勿修改\n3. **防火墙设置**: 确保端口3007已开放\n4. **SSL证书**: 建议配置HTTPS (可选)\n\n## 🔧 故障排除\n\n### 常见问题\n\n1. **端口被占用**\n   ```bash\n   lsof -i :3007\n   kill -9 [PID]\n   ```\n\n2. **权限问题**\n   ```bash\n   chown -R www-data:www-data /var/www/aimagic/server\n   ```\n\n3. **数据库连接失败**\n   - 检查 `.env.production` 配置\n   - 确认数据库服务运行正常\n\n4. **PM2服务无法启动**\n   ```bash\n   pm2 logs aimagic-server\n   pm2 flush  # 清除日志\n   ```\n\n## 📞 技术支持\n\n如遇到部署问题，请检查：\n1. 服务器日志: `pm2 logs aimagic-server`\n2. 系统日志: `tail -f /var/log/syslog`\n3. 健康检查: `node src/scripts/health-check.js`\n\n---\n\n**部署完成后访问地址**: http://114.132.50.71:3007\n"
        }
    ]
}