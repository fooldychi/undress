{
    "sourceFile": "server/create-workflow-tables.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752815242549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752815265453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         node_order INT DEFAULT 0 COMMENT '节点顺序（用于输出节点优先级）',\n         description VARCHAR(255) DEFAULT NULL COMMENT '节点描述',\n         is_enabled BOOLEAN DEFAULT TRUE COMMENT '是否启用',\n         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n-        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n+        updated_at DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,\n         UNIQUE KEY uk_workflow_node (workflow_type, node_type, node_key),\n         INDEX idx_workflow_type (workflow_type),\n         INDEX idx_node_type (node_type)\n       ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='工作流节点配置表'\n"
                }
            ],
            "date": 1752815242549,
            "name": "Commit-0",
            "content": "const mysql = require('mysql2/promise');\nrequire('dotenv').config();\n\nasync function createWorkflowTables() {\n  let connection;\n  try {\n    console.log('🔧 开始创建工作流表...');\n\n    // 创建数据库连接\n    connection = await mysql.createConnection({\n      host: process.env.DB_HOST || 'localhost',\n      port: process.env.DB_PORT || 3306,\n      user: process.env.DB_USER || 'root',\n      password: process.env.DB_PASSWORD || '',\n      database: process.env.DB_NAME || 'aimagic',\n      charset: 'utf8mb4'\n    });\n\n    console.log('✅ 数据库连接成功');\n\n    // 1. 创建工作流基础信息表\n    console.log('📝 创建 workflow_info 表...');\n    await connection.execute(`\n      CREATE TABLE IF NOT EXISTS workflow_info (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        workflow_type VARCHAR(50) NOT NULL UNIQUE COMMENT '工作流类型',\n        workflow_name VARCHAR(100) NOT NULL COMMENT '工作流名称',\n        description TEXT COMMENT '工作流描述',\n        file_path VARCHAR(255) COMMENT '工作流文件路径',\n        is_enabled BOOLEAN DEFAULT TRUE COMMENT '是否启用',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='工作流基础信息表'\n    `);\n    console.log('✅ workflow_info 表创建成功');\n\n    // 2. 创建工作流节点配置表\n    console.log('📝 创建 workflow_configs 表...');\n    await connection.execute(`\n      CREATE TABLE IF NOT EXISTS workflow_configs (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        workflow_type VARCHAR(50) NOT NULL COMMENT '工作流类型：faceswap, undress',\n        node_type ENUM('input', 'output') NOT NULL COMMENT '节点类型',\n        node_key VARCHAR(100) NOT NULL COMMENT '节点键名',\n        node_id VARCHAR(50) NOT NULL COMMENT '节点ID',\n        node_order INT DEFAULT 0 COMMENT '节点顺序（用于输出节点优先级）',\n        description VARCHAR(255) DEFAULT NULL COMMENT '节点描述',\n        is_enabled BOOLEAN DEFAULT TRUE COMMENT '是否启用',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        UNIQUE KEY uk_workflow_node (workflow_type, node_type, node_key),\n        INDEX idx_workflow_type (workflow_type),\n        INDEX idx_node_type (node_type)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='工作流节点配置表'\n    `);\n    console.log('✅ workflow_configs 表创建成功');\n\n    // 3. 插入工作流基础信息\n    console.log('📝 插入工作流基础信息...');\n    const workflowInfos = [\n      ['faceswap', 'Face Swap 2.0', '高质量人脸替换工作流', 'workflows/faceswap2.0.json', true],\n      ['undress', 'Undress AI', '一键褪衣AI工作流', 'workflows/undress.json', true]\n    ];\n\n    for (const [type, name, desc, path, enabled] of workflowInfos) {\n      await connection.execute(`\n        INSERT INTO workflow_info (workflow_type, workflow_name, description, file_path, is_enabled)\n        VALUES (?, ?, ?, ?, ?)\n        ON DUPLICATE KEY UPDATE\n          workflow_name = VALUES(workflow_name),\n          description = VALUES(description),\n          file_path = VALUES(file_path),\n          is_enabled = VALUES(is_enabled),\n          updated_at = CURRENT_TIMESTAMP\n      `, [type, name, desc, path, enabled]);\n      console.log(`  ✅ 插入工作流: ${name}`);\n    }\n\n    // 4. 插入工作流节点配置\n    console.log('📝 插入工作流节点配置...');\n    const nodeConfigs = [\n      // 换脸工作流输入节点\n      ['faceswap', 'input', 'face_photo_1', '670', 1, '第一张人脸照片节点'],\n      ['faceswap', 'input', 'face_photo_2', '662', 2, '第二张人脸照片节点'],\n      ['faceswap', 'input', 'face_photo_3', '658', 3, '第三张人脸照片节点'],\n      ['faceswap', 'input', 'face_photo_4', '655', 4, '第四张人脸照片节点'],\n      ['faceswap', 'input', 'target_image', '737', 5, '目标图片节点'],\n\n      // 换脸工作流输出节点（按优先级排序）\n      ['faceswap', 'output', 'primary', '812', 1, '主要输出节点'],\n      ['faceswap', 'output', 'secondary_1', '813', 2, '备用输出节点1'],\n      ['faceswap', 'output', 'secondary_2', '746', 3, '备用输出节点2'],\n      ['faceswap', 'output', 'secondary_3', '710', 4, '备用输出节点3'],\n\n      // 一键褪衣工作流输入节点\n      ['undress', 'input', 'main_image', '49', 1, '主图片输入节点'],\n      ['undress', 'input', 'seed_node', '174', 2, '随机种子节点'],\n\n      // 一键褪衣工作流输出节点（按优先级排序）\n      ['undress', 'output', 'primary', '730', 1, '主要输出节点'],\n      ['undress', 'output', 'secondary_1', '812', 2, '备用输出节点1'],\n      ['undress', 'output', 'secondary_2', '813', 3, '备用输出节点2'],\n      ['undress', 'output', 'secondary_3', '746', 4, '备用输出节点3'],\n      ['undress', 'output', 'secondary_4', '710', 5, '备用输出节点4']\n    ];\n\n    for (const [workflowType, nodeType, nodeKey, nodeId, order, desc] of nodeConfigs) {\n      await connection.execute(`\n        INSERT INTO workflow_configs (workflow_type, node_type, node_key, node_id, node_order, description)\n        VALUES (?, ?, ?, ?, ?, ?)\n        ON DUPLICATE KEY UPDATE\n          node_id = VALUES(node_id),\n          node_order = VALUES(node_order),\n          description = VALUES(description),\n          updated_at = CURRENT_TIMESTAMP\n      `, [workflowType, nodeType, nodeKey, nodeId, order, desc]);\n    }\n    console.log(`  ✅ 插入 ${nodeConfigs.length} 个节点配置`);\n\n    // 5. 验证创建结果\n    console.log('\\n📊 验证创建结果...');\n\n    const [workflowInfoResult] = await connection.execute('SELECT * FROM workflow_info ORDER BY workflow_type');\n    console.log('工作流信息:');\n    workflowInfoResult.forEach(info => {\n      console.log(`  - ${info.workflow_type}: ${info.workflow_name} (${info.is_enabled ? '启用' : '禁用'})`);\n    });\n\n    const [nodeConfigResult] = await connection.execute(`\n      SELECT workflow_type, node_type, COUNT(*) as count\n      FROM workflow_configs\n      GROUP BY workflow_type, node_type\n      ORDER BY workflow_type, node_type\n    `);\n    console.log('节点配置统计:');\n    nodeConfigResult.forEach(stat => {\n      console.log(`  - ${stat.workflow_type} ${stat.node_type}: ${stat.count} 个节点`);\n    });\n\n    // 6. 检查表是否创建成功\n    const [tables] = await connection.execute(\"SHOW TABLES LIKE 'workflow%'\");\n    console.log('\\n📋 工作流相关表:');\n    tables.forEach(table => {\n      const tableName = Object.values(table)[0];\n      console.log(`  ✅ ${tableName}`);\n    });\n\n    console.log('\\n🎉 工作流表创建完成！');\n    return true;\n\n  } catch (error) {\n    console.error('❌ 创建工作流表失败:', error.message);\n    console.error('详细错误:', error);\n    return false;\n  } finally {\n    if (connection) {\n      await connection.end();\n    }\n  }\n}\n\ncreateWorkflowTables().then(success => {\n  if (success) {\n    console.log('\\n✅ 工作流表创建成功，可以开始使用配置功能');\n  } else {\n    console.log('\\n❌ 工作流表创建失败，请检查错误信息');\n  }\n  process.exit(success ? 0 : 1);\n}).catch(error => {\n  console.error('❌ 创建过程失败:', error);\n  process.exit(1);\n});\n"
        }
    ]
}