{
    "sourceFile": "server/src/app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1752317973745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752323494398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n const imageRoutes = require('./routes/images');\n const seckillRoutes = require('./routes/seckill');\n const levelCardsRoutes = require('./routes/levelCards');\n const adminAuthRoutes = require('./routes/adminAuth');\n+const adminRoutes = require('./routes/admin');\n \n const app = express();\n const PORT = process.env.PORT || 3001;\n \n"
                },
                {
                    "date": 1752323518402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n app.use('/api/level-cards', require('./routes/levelCards'));\n app.use('/api/admin-auth', adminAuthRoutes);\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n-app.use('/api/admin', require('./routes/admin'));\n+app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n \n // 404处理\n app.use('*', (req, res) => {\n"
                },
                {
                    "date": 1752331635269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n+app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n"
                },
                {
                    "date": 1752331656451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,23 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n+    // 初始化ComfyUI服务器管理器\n+    if (dbConnected) {\n+      try {\n+        console.log('🔧 初始化ComfyUI服务器管理器...');\n+        const { initializeServerManager } = require('./utils/comfyUIRequest');\n+        await initializeServerManager();\n+        console.log('✅ ComfyUI服务器管理器初始化完成');\n+      } catch (error) {\n+        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n+      }\n+    }\n+\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 Imagic服务器启动成功!');\n+      console.log('🚀 AI Magic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332664959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n-app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -126,23 +125,11 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n-    // 初始化ComfyUI服务器管理器\n-    if (dbConnected) {\n-      try {\n-        console.log('🔧 初始化ComfyUI服务器管理器...');\n-        const { initializeServerManager } = require('./utils/comfyUIRequest');\n-        await initializeServerManager();\n-        console.log('✅ ComfyUI服务器管理器初始化完成');\n-      } catch (error) {\n-        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n-      }\n-    }\n-\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 AI Magic服务器启动成功!');\n+      console.log('🚀 Imagic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332713899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n+app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -125,11 +126,23 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n+    // 初始化ComfyUI服务器管理器\n+    if (dbConnected) {\n+      try {\n+        console.log('🔧 初始化ComfyUI服务器管理器...');\n+        const { initializeServerManager } = require('./utils/comfyUIRequest');\n+        await initializeServerManager();\n+        console.log('✅ ComfyUI服务器管理器初始化完成');\n+      } catch (error) {\n+        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n+      }\n+    }\n+\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 Imagic服务器启动成功!');\n+      console.log('🚀 AI Magic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332764848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n-app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -126,23 +125,11 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n-    // 初始化ComfyUI服务器管理器\n-    if (dbConnected) {\n-      try {\n-        console.log('🔧 初始化ComfyUI服务器管理器...');\n-        const { initializeServerManager } = require('./utils/comfyUIRequest');\n-        await initializeServerManager();\n-        console.log('✅ ComfyUI服务器管理器初始化完成');\n-      } catch (error) {\n-        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n-      }\n-    }\n-\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 AI Magic服务器启动成功!');\n+      console.log('🚀 Imagic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752377139860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,18 +141,94 @@\n     process.exit(1);\n   }\n }\n \n-// 优雅关闭\n-process.on('SIGTERM', () => {\n-  console.log('🛑 收到SIGTERM信号，正在关闭服务器...');\n-  process.exit(0);\n+// 全局异常处理\n+process.on('uncaughtException', (error) => {\n+  console.error('❌ 未捕获的异常:', error);\n+  console.error('堆栈信息:', error.stack);\n+\n+  // 记录错误到日志文件\n+  const fs = require('fs');\n+  const logEntry = `[${new Date().toISOString()}] UNCAUGHT EXCEPTION: ${error.message}\\n${error.stack}\\n\\n`;\n+  fs.appendFileSync('logs/error.log', logEntry, { flag: 'a' });\n+\n+  // 优雅关闭服务器\n+  gracefulShutdown('uncaughtException');\n });\n \n-process.on('SIGINT', () => {\n-  console.log('🛑 收到SIGINT信号，正在关闭服务器...');\n-  process.exit(0);\n+process.on('unhandledRejection', (reason, promise) => {\n+  console.error('❌ 未处理的Promise拒绝:', reason);\n+  console.error('Promise:', promise);\n+\n+  // 记录错误到日志文件\n+  const fs = require('fs');\n+  const logEntry = `[${new Date().toISOString()}] UNHANDLED REJECTION: ${reason}\\nPromise: ${promise}\\n\\n`;\n+  fs.appendFileSync('logs/error.log', logEntry, { flag: 'a' });\n+\n+  // 对于Promise拒绝，不立即退出，但记录错误\n+  console.warn('⚠️ 服务器继续运行，但建议检查上述错误');\n });\n \n+// 内存使用监控\n+const monitorMemoryUsage = () => {\n+  const usage = process.memoryUsage();\n+  const formatBytes = (bytes) => (bytes / 1024 / 1024).toFixed(2) + ' MB';\n+\n+  console.log('📊 内存使用情况:');\n+  console.log(`   RSS: ${formatBytes(usage.rss)}`);\n+  console.log(`   Heap Used: ${formatBytes(usage.heapUsed)}`);\n+  console.log(`   Heap Total: ${formatBytes(usage.heapTotal)}`);\n+  console.log(`   External: ${formatBytes(usage.external)}`);\n+\n+  // 内存使用超过500MB时发出警告\n+  if (usage.heapUsed > 500 * 1024 * 1024) {\n+    console.warn('⚠️ 内存使用过高，可能存在内存泄漏');\n+  }\n+};\n+\n+// 每5分钟监控一次内存使用\n+const memoryMonitorInterval = setInterval(monitorMemoryUsage, 5 * 60 * 1000);\n+\n+// 优雅关闭函数\n+const gracefulShutdown = (signal) => {\n+  console.log(`🛑 收到${signal}信号，正在优雅关闭服务器...`);\n+\n+  // 清理定时器\n+  if (memoryMonitorInterval) {\n+    clearInterval(memoryMonitorInterval);\n+  }\n+\n+  // 关闭数据库连接池\n+  const { pool } = require('./config/database');\n+  if (pool) {\n+    pool.end(() => {\n+      console.log('🔌 数据库连接池已关闭');\n+    });\n+  }\n+\n+  // 设置超时强制退出\n+  const forceExitTimer = setTimeout(() => {\n+    console.log('⚠️ 强制退出服务器');\n+    process.exit(1);\n+  }, 10000); // 10秒后强制退出\n+\n+  // 优雅关闭HTTP服务器\n+  if (global.httpServer) {\n+    global.httpServer.close(() => {\n+      console.log('✅ HTTP服务器已关闭');\n+      clearTimeout(forceExitTimer);\n+      process.exit(0);\n+    });\n+  } else {\n+    clearTimeout(forceExitTimer);\n+    process.exit(0);\n+  }\n+};\n+\n+// 信号处理\n+process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n+process.on('SIGINT', () => gracefulShutdown('SIGINT'));\n+\n startServer();\n \n module.exports = app;\n"
                },
                {
                    "date": 1752377157133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,16 +126,21 @@\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n     // 启动HTTP服务器\n-    app.listen(PORT, () => {\n+    global.httpServer = app.listen(PORT, () => {\n       console.log('🚀 Imagic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n+      console.log(`🆔 进程ID: ${process.pid}`);\n       if (!dbConnected) {\n         console.log('⚠️ 注意：数据库未连接，某些功能可能不可用');\n       }\n+\n+      // 启动内存监控\n+      console.log('📊 内存监控已启动，每5分钟报告一次');\n+      monitorMemoryUsage(); // 立即执行一次\n     });\n   } catch (error) {\n     console.error('❌ 服务器启动失败:', error);\n     process.exit(1);\n"
                },
                {
                    "date": 1752377231117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,14 +203,10 @@\n     clearInterval(memoryMonitorInterval);\n   }\n \n   // 关闭数据库连接池\n-  const { pool } = require('./config/database');\n-  if (pool) {\n-    pool.end(() => {\n-      console.log('🔌 数据库连接池已关闭');\n-    });\n-  }\n+  const { closePool } = require('./config/database');\n+  await closePool();\n \n   // 设置超时强制退出\n   const forceExitTimer = setTimeout(() => {\n     console.log('⚠️ 强制退出服务器');\n"
                },
                {
                    "date": 1752377277207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n require('dotenv').config();\n \n const { testConnection } = require('./config/database');\n const errorHandler = require('./middleware/errorHandler');\n+const { healthMonitor } = require('./utils/healthMonitor');\n const rateLimiter = require('./middleware/rateLimiter');\n \n // 导入路由\n const authRoutes = require('./routes/auth');\n"
                },
                {
                    "date": 1752377290762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,15 +84,29 @@\n // 速率限制\n app.use(rateLimiter);\n \n // 健康检查端点\n-app.get('/health', (req, res) => {\n-  res.json({\n-    status: 'OK',\n-    timestamp: new Date().toISOString(),\n-    uptime: process.uptime(),\n-    environment: process.env.NODE_ENV\n-  });\n+app.get('/health', async (req, res) => {\n+  try {\n+    const healthReport = healthMonitor.getHealthReport();\n+    const detailedCheck = await healthMonitor.forceHealthCheck();\n+\n+    res.json({\n+      status: healthReport.current.healthy ? 'OK' : 'UNHEALTHY',\n+      timestamp: new Date().toISOString(),\n+      uptime: process.uptime(),\n+      environment: process.env.NODE_ENV,\n+      pid: process.pid,\n+      health: healthReport,\n+      detailed: detailedCheck\n+    });\n+  } catch (error) {\n+    res.status(500).json({\n+      status: 'ERROR',\n+      timestamp: new Date().toISOString(),\n+      error: error.message\n+    });\n+  }\n });\n \n // API路由\n app.use('/api/auth', authRoutes);\n"
                },
                {
                    "date": 1752377304564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,8 +154,11 @@\n \n       // 启动内存监控\n       console.log('📊 内存监控已启动，每5分钟报告一次');\n       monitorMemoryUsage(); // 立即执行一次\n+\n+      // 启动健康监控\n+      healthMonitor.start();\n     });\n   } catch (error) {\n     console.error('❌ 服务器启动失败:', error);\n     process.exit(1);\n"
                },
                {
                    "date": 1752377316602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,13 +215,16 @@\n // 优雅关闭函数\n const gracefulShutdown = (signal) => {\n   console.log(`🛑 收到${signal}信号，正在优雅关闭服务器...`);\n \n-  // 清理定时器\n+  // 清理定时器和监控\n   if (memoryMonitorInterval) {\n     clearInterval(memoryMonitorInterval);\n   }\n \n+  // 停止健康监控\n+  healthMonitor.stop();\n+\n   // 关闭数据库连接池\n   const { closePool } = require('./config/database');\n   await closePool();\n \n"
                },
                {
                    "date": 1752377414196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n \n const { testConnection } = require('./config/database');\n const errorHandler = require('./middleware/errorHandler');\n const { healthMonitor } = require('./utils/healthMonitor');\n+const { memoryManager } = require('./utils/memoryManager');\n const rateLimiter = require('./middleware/rateLimiter');\n \n // 导入路由\n const authRoutes = require('./routes/auth');\n"
                },
                {
                    "date": 1752377428039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,11 @@\n       monitorMemoryUsage(); // 立即执行一次\n \n       // 启动健康监控\n       healthMonitor.start();\n+\n+      // 启动内存管理\n+      memoryManager.start();\n     });\n   } catch (error) {\n     console.error('❌ 服务器启动失败:', error);\n     process.exit(1);\n"
                },
                {
                    "date": 1752377439954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,11 @@\n \n   // 停止健康监控\n   healthMonitor.stop();\n \n+  // 停止内存管理\n+  memoryManager.stop();\n+\n   // 关闭数据库连接池\n   const { closePool } = require('./config/database');\n   await closePool();\n \n"
                },
                {
                    "date": 1752378409791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,9 +216,9 @@\n // 每5分钟监控一次内存使用\n const memoryMonitorInterval = setInterval(monitorMemoryUsage, 5 * 60 * 1000);\n \n // 优雅关闭函数\n-const gracefulShutdown = (signal) => {\n+const gracefulShutdown = async (signal) => {\n   console.log(`🛑 收到${signal}信号，正在优雅关闭服务器...`);\n \n   // 清理定时器和监控\n   if (memoryMonitorInterval) {\n@@ -231,10 +231,14 @@\n   // 停止内存管理\n   memoryManager.stop();\n \n   // 关闭数据库连接池\n-  const { closePool } = require('./config/database');\n-  await closePool();\n+  try {\n+    const { closePool } = require('./config/database');\n+    await closePool();\n+  } catch (error) {\n+    console.error('❌ 关闭数据库连接池失败:', error);\n+  }\n \n   // 设置超时强制退出\n   const forceExitTimer = setTimeout(() => {\n     console.log('⚠️ 强制退出服务器');\n"
                },
                {
                    "date": 1752378425208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,10 +258,21 @@\n   }\n };\n \n // 信号处理\n-process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));\n-process.on('SIGINT', () => gracefulShutdown('SIGINT'));\n+process.on('SIGTERM', () => {\n+  gracefulShutdown('SIGTERM').catch(error => {\n+    console.error('❌ 优雅关闭失败:', error);\n+    process.exit(1);\n+  });\n+});\n \n+process.on('SIGINT', () => {\n+  gracefulShutdown('SIGINT').catch(error => {\n+    console.error('❌ 优雅关闭失败:', error);\n+    process.exit(1);\n+  });\n+});\n+\n startServer();\n \n module.exports = app;\n"
                },
                {
                    "date": 1752378438738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,9 +179,12 @@\n   const logEntry = `[${new Date().toISOString()}] UNCAUGHT EXCEPTION: ${error.message}\\n${error.stack}\\n\\n`;\n   fs.appendFileSync('logs/error.log', logEntry, { flag: 'a' });\n \n   // 优雅关闭服务器\n-  gracefulShutdown('uncaughtException');\n+  gracefulShutdown('uncaughtException').catch(error => {\n+    console.error('❌ 优雅关闭失败:', error);\n+    process.exit(1);\n+  });\n });\n \n process.on('unhandledRejection', (reason, promise) => {\n   console.error('❌ 未处理的Promise拒绝:', reason);\n"
                },
                {
                    "date": 1752407517875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n const adminAuthRoutes = require('./routes/adminAuth');\n const adminRoutes = require('./routes/admin');\n \n const app = express();\n-const PORT = process.env.PORT || 3001;\n+const PORT = process.env.PORT || 3007;\n \n // 中间件配置\n app.use(helmet()); // 安全头\n app.use(compression()); // 压缩响应\n"
                },
                {
                    "date": 1752408332328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,20 +30,22 @@\n \n // CORS配置 - 支持动态端口\n app.use(cors({\n   origin: function (origin, callback) {\n-    // 允许的域名列表\n+    // 从环境变量获取端口配置\n+    const CLIENT_PORT = process.env.CLIENT_PORT || 3001;\n+    const ADMIN_PORT = process.env.ADMIN_PORT || 3003;\n+\n+    // 允许的域名列表 - 使用环境变量配置端口\n     const allowedOrigins = [\n       'http://localhost:3000',\n-      'http://localhost:3001',\n-      'http://localhost:3002',  // 后台管理系统端口\n-      'http://localhost:3007',  // Vue 管理后台端口\n+      `http://localhost:${CLIENT_PORT}`,  // 客户端端口\n+      `http://localhost:${ADMIN_PORT}`,   // 后台管理系统端口\n       'http://localhost:5173',  // Vite 默认端口\n       'http://localhost:5174',  // Vite 备用端口\n       'http://127.0.0.1:3000',\n-      'http://127.0.0.1:3001',\n-      'http://127.0.0.1:3002',  // 后台管理系统端口\n-      'http://127.0.0.1:3007',  // Vue 管理后台端口\n+      `http://127.0.0.1:${CLIENT_PORT}`,  // 客户端端口\n+      `http://127.0.0.1:${ADMIN_PORT}`,   // 后台管理系统端口\n       'http://127.0.0.1:5173',\n       'http://127.0.0.1:5174'\n     ];\n \n"
                }
            ],
            "date": 1752317973745,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nrequire('dotenv').config();\n\nconst { testConnection } = require('./config/database');\nconst errorHandler = require('./middleware/errorHandler');\nconst rateLimiter = require('./middleware/rateLimiter');\n\n// 导入路由\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst imageRoutes = require('./routes/images');\nconst seckillRoutes = require('./routes/seckill');\nconst levelCardsRoutes = require('./routes/levelCards');\nconst adminAuthRoutes = require('./routes/adminAuth');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// 中间件配置\napp.use(helmet()); // 安全头\napp.use(compression()); // 压缩响应\napp.use(morgan('combined')); // 日志记录\n\n// CORS配置 - 支持动态端口\napp.use(cors({\n  origin: function (origin, callback) {\n    // 允许的域名列表\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'http://localhost:3002',  // 后台管理系统端口\n      'http://localhost:3007',  // Vue 管理后台端口\n      'http://localhost:5173',  // Vite 默认端口\n      'http://localhost:5174',  // Vite 备用端口\n      'http://127.0.0.1:3000',\n      'http://127.0.0.1:3001',\n      'http://127.0.0.1:3002',  // 后台管理系统端口\n      'http://127.0.0.1:3007',  // Vue 管理后台端口\n      'http://127.0.0.1:5173',\n      'http://127.0.0.1:5174'\n    ];\n\n    // 如果设置了环境变量，优先使用\n    if (process.env.CORS_ORIGIN) {\n      allowedOrigins.push(process.env.CORS_ORIGIN);\n    }\n\n    // 允许没有origin的请求（如移动应用、Postman等）\n    // 以及origin为null的请求（如直接打开HTML文件）\n    if (!origin || origin === 'null') return callback(null, true);\n\n    // 允许file://协议的请求（用于直接打开HTML文件）\n    if (origin && origin.startsWith('file://')) {\n      return callback(null, true);\n    }\n\n    // 检查origin是否在允许列表中\n    if (allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      console.log(`❌ CORS blocked origin: ${origin}`);\n      console.log(`✅ Allowed origins: ${allowedOrigins.join(', ')}, file://`);\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// 请求解析\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// 静态文件服务\napp.use('/uploads', express.static('uploads'));\n\n// 速率限制\napp.use(rateLimiter);\n\n// 健康检查端点\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV\n  });\n});\n\n// API路由\napp.use('/api/auth', authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/images', imageRoutes);\napp.use('/api/points', require('./routes/points'));\napp.use('/api/level-cards', require('./routes/levelCards'));\napp.use('/api/admin-auth', adminAuthRoutes);\n// 注意：更具体的路由要放在前面\napp.use('/api/admin/config', require('./routes/config'));\napp.use('/api/admin', require('./routes/admin'));\napp.use('/api/config', require('./routes/public-config'));\n\n// 404处理\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: '接口不存在',\n    path: req.originalUrl\n  });\n});\n\n// 错误处理中间件\napp.use(errorHandler);\n\n// 启动服务器\nasync function startServer() {\n  try {\n    // 测试数据库连接\n    const dbConnected = await testConnection();\n    if (!dbConnected) {\n      console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n    }\n\n    // 启动HTTP服务器\n    app.listen(PORT, () => {\n      console.log('🚀 Imagic服务器启动成功!');\n      console.log(`📍 服务地址: http://localhost:${PORT}`);\n      console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n      console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n      if (!dbConnected) {\n        console.log('⚠️ 注意：数据库未连接，某些功能可能不可用');\n      }\n    });\n  } catch (error) {\n    console.error('❌ 服务器启动失败:', error);\n    process.exit(1);\n  }\n}\n\n// 优雅关闭\nprocess.on('SIGTERM', () => {\n  console.log('🛑 收到SIGTERM信号，正在关闭服务器...');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('🛑 收到SIGINT信号，正在关闭服务器...');\n  process.exit(0);\n});\n\nstartServer();\n\nmodule.exports = app;\n"
        }
    ]
}