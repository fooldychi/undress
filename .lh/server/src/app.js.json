{
    "sourceFile": "server/src/app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1752317973745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752323494398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n const imageRoutes = require('./routes/images');\n const seckillRoutes = require('./routes/seckill');\n const levelCardsRoutes = require('./routes/levelCards');\n const adminAuthRoutes = require('./routes/adminAuth');\n+const adminRoutes = require('./routes/admin');\n \n const app = express();\n const PORT = process.env.PORT || 3001;\n \n"
                },
                {
                    "date": 1752323518402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n app.use('/api/level-cards', require('./routes/levelCards'));\n app.use('/api/admin-auth', adminAuthRoutes);\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n-app.use('/api/admin', require('./routes/admin'));\n+app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n \n // 404处理\n app.use('*', (req, res) => {\n"
                },
                {
                    "date": 1752331635269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n+app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n"
                },
                {
                    "date": 1752331656451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,23 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n+    // 初始化ComfyUI服务器管理器\n+    if (dbConnected) {\n+      try {\n+        console.log('🔧 初始化ComfyUI服务器管理器...');\n+        const { initializeServerManager } = require('./utils/comfyUIRequest');\n+        await initializeServerManager();\n+        console.log('✅ ComfyUI服务器管理器初始化完成');\n+      } catch (error) {\n+        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n+      }\n+    }\n+\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 Imagic服务器启动成功!');\n+      console.log('🚀 AI Magic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332664959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n-app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -126,23 +125,11 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n-    // 初始化ComfyUI服务器管理器\n-    if (dbConnected) {\n-      try {\n-        console.log('🔧 初始化ComfyUI服务器管理器...');\n-        const { initializeServerManager } = require('./utils/comfyUIRequest');\n-        await initializeServerManager();\n-        console.log('✅ ComfyUI服务器管理器初始化完成');\n-      } catch (error) {\n-        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n-      }\n-    }\n-\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 AI Magic服务器启动成功!');\n+      console.log('🚀 Imagic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332713899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n+app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -125,11 +126,23 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n+    // 初始化ComfyUI服务器管理器\n+    if (dbConnected) {\n+      try {\n+        console.log('🔧 初始化ComfyUI服务器管理器...');\n+        const { initializeServerManager } = require('./utils/comfyUIRequest');\n+        await initializeServerManager();\n+        console.log('✅ ComfyUI服务器管理器初始化完成');\n+      } catch (error) {\n+        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n+      }\n+    }\n+\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 Imagic服务器启动成功!');\n+      console.log('🚀 AI Magic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                },
                {
                    "date": 1752332764848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n // 注意：更具体的路由要放在前面\n app.use('/api/admin/config', require('./routes/config'));\n app.use('/api/admin', adminRoutes);\n app.use('/api/config', require('./routes/public-config'));\n-app.use('/api/comfyui', require('./routes/comfyui-status'));\n \n // 404处理\n app.use('*', (req, res) => {\n   res.status(404).json({\n@@ -126,23 +125,11 @@\n     if (!dbConnected) {\n       console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n     }\n \n-    // 初始化ComfyUI服务器管理器\n-    if (dbConnected) {\n-      try {\n-        console.log('🔧 初始化ComfyUI服务器管理器...');\n-        const { initializeServerManager } = require('./utils/comfyUIRequest');\n-        await initializeServerManager();\n-        console.log('✅ ComfyUI服务器管理器初始化完成');\n-      } catch (error) {\n-        console.warn('⚠️ ComfyUI服务器管理器初始化失败:', error.message);\n-      }\n-    }\n-\n     // 启动HTTP服务器\n     app.listen(PORT, () => {\n-      console.log('🚀 AI Magic服务器启动成功!');\n+      console.log('🚀 Imagic服务器启动成功!');\n       console.log(`📍 服务地址: http://localhost:${PORT}`);\n       console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n       console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n       if (!dbConnected) {\n"
                }
            ],
            "date": 1752317973745,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nrequire('dotenv').config();\n\nconst { testConnection } = require('./config/database');\nconst errorHandler = require('./middleware/errorHandler');\nconst rateLimiter = require('./middleware/rateLimiter');\n\n// 导入路由\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst imageRoutes = require('./routes/images');\nconst seckillRoutes = require('./routes/seckill');\nconst levelCardsRoutes = require('./routes/levelCards');\nconst adminAuthRoutes = require('./routes/adminAuth');\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// 中间件配置\napp.use(helmet()); // 安全头\napp.use(compression()); // 压缩响应\napp.use(morgan('combined')); // 日志记录\n\n// CORS配置 - 支持动态端口\napp.use(cors({\n  origin: function (origin, callback) {\n    // 允许的域名列表\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'http://localhost:3002',  // 后台管理系统端口\n      'http://localhost:3007',  // Vue 管理后台端口\n      'http://localhost:5173',  // Vite 默认端口\n      'http://localhost:5174',  // Vite 备用端口\n      'http://127.0.0.1:3000',\n      'http://127.0.0.1:3001',\n      'http://127.0.0.1:3002',  // 后台管理系统端口\n      'http://127.0.0.1:3007',  // Vue 管理后台端口\n      'http://127.0.0.1:5173',\n      'http://127.0.0.1:5174'\n    ];\n\n    // 如果设置了环境变量，优先使用\n    if (process.env.CORS_ORIGIN) {\n      allowedOrigins.push(process.env.CORS_ORIGIN);\n    }\n\n    // 允许没有origin的请求（如移动应用、Postman等）\n    // 以及origin为null的请求（如直接打开HTML文件）\n    if (!origin || origin === 'null') return callback(null, true);\n\n    // 允许file://协议的请求（用于直接打开HTML文件）\n    if (origin && origin.startsWith('file://')) {\n      return callback(null, true);\n    }\n\n    // 检查origin是否在允许列表中\n    if (allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      console.log(`❌ CORS blocked origin: ${origin}`);\n      console.log(`✅ Allowed origins: ${allowedOrigins.join(', ')}, file://`);\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// 请求解析\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// 静态文件服务\napp.use('/uploads', express.static('uploads'));\n\n// 速率限制\napp.use(rateLimiter);\n\n// 健康检查端点\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV\n  });\n});\n\n// API路由\napp.use('/api/auth', authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/images', imageRoutes);\napp.use('/api/points', require('./routes/points'));\napp.use('/api/level-cards', require('./routes/levelCards'));\napp.use('/api/admin-auth', adminAuthRoutes);\n// 注意：更具体的路由要放在前面\napp.use('/api/admin/config', require('./routes/config'));\napp.use('/api/admin', require('./routes/admin'));\napp.use('/api/config', require('./routes/public-config'));\n\n// 404处理\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: '接口不存在',\n    path: req.originalUrl\n  });\n});\n\n// 错误处理中间件\napp.use(errorHandler);\n\n// 启动服务器\nasync function startServer() {\n  try {\n    // 测试数据库连接\n    const dbConnected = await testConnection();\n    if (!dbConnected) {\n      console.warn('⚠️ 数据库连接失败，但服务器将继续启动（仅用于管理界面）');\n    }\n\n    // 启动HTTP服务器\n    app.listen(PORT, () => {\n      console.log('🚀 Imagic服务器启动成功!');\n      console.log(`📍 服务地址: http://localhost:${PORT}`);\n      console.log(`🌍 环境: ${process.env.NODE_ENV}`);\n      console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n      if (!dbConnected) {\n        console.log('⚠️ 注意：数据库未连接，某些功能可能不可用');\n      }\n    });\n  } catch (error) {\n    console.error('❌ 服务器启动失败:', error);\n    process.exit(1);\n  }\n}\n\n// 优雅关闭\nprocess.on('SIGTERM', () => {\n  console.log('🛑 收到SIGTERM信号，正在关闭服务器...');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('🛑 收到SIGINT信号，正在关闭服务器...');\n  process.exit(0);\n});\n\nstartServer();\n\nmodule.exports = app;\n"
        }
    ]
}