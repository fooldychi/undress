{
    "sourceFile": "server/src/scripts/initDatabase.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752436809351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752436809351,
            "name": "Commit-0",
            "content": "const { query, testConnection } = require('../config/database');\n\n// 数据库表结构\nconst createTables = async () => {\n  try {\n    console.log('🔧 开始创建数据库表...');\n\n    // 用户表\n    await query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        username VARCHAR(50) UNIQUE NOT NULL,\n        email VARCHAR(100) UNIQUE NOT NULL,\n        password VARCHAR(255) NOT NULL,\n        avatar VARCHAR(255) DEFAULT NULL,\n        status ENUM('active', 'inactive', 'banned') DEFAULT 'active',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME NULL,\n        last_login DATETIME NULL,\n        INDEX idx_email (email),\n        INDEX idx_username (username),\n        INDEX idx_status (status)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 用户表创建成功');\n\n    // 图片表\n    await query(`\n      CREATE TABLE IF NOT EXISTS images (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        filename VARCHAR(255) NOT NULL,\n        original_name VARCHAR(255) NOT NULL,\n        file_path VARCHAR(500) NOT NULL,\n        file_size INT NOT NULL,\n        mime_type VARCHAR(100) NOT NULL,\n        width INT DEFAULT NULL,\n        height INT DEFAULT NULL,\n        created_at DATETIME NOT NULL,\n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n        INDEX idx_user_id (user_id),\n        INDEX idx_created_at (created_at)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 图片表创建成功');\n\n    // 处理任务表\n    await query(`\n      CREATE TABLE IF NOT EXISTS processing_tasks (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        type ENUM('undress', 'face-swap') NOT NULL,\n        status ENUM('pending', 'processing', 'completed', 'failed') DEFAULT 'pending',\n        prompt TEXT DEFAULT NULL,\n        settings TEXT DEFAULT NULL,\n        progress INT DEFAULT 0,\n        error_message TEXT DEFAULT NULL,\n        created_at DATETIME NOT NULL,\n        updated_at DATETIME NULL,\n        completed_at DATETIME NULL,\n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n        INDEX idx_user_id (user_id),\n        INDEX idx_status (status),\n        INDEX idx_type (type),\n        INDEX idx_created_at (created_at)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 处理任务表创建成功');\n\n    // 任务图片关联表\n    await query(`\n      CREATE TABLE IF NOT EXISTS task_images (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        task_id INT NOT NULL,\n        image_id INT NOT NULL,\n        type ENUM('input', 'output') NOT NULL,\n        created_at DATETIME NOT NULL,\n        FOREIGN KEY (task_id) REFERENCES processing_tasks(id) ON DELETE CASCADE,\n        FOREIGN KEY (image_id) REFERENCES images(id) ON DELETE CASCADE,\n        INDEX idx_task_id (task_id),\n        INDEX idx_image_id (image_id),\n        INDEX idx_type (type)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 任务图片关联表创建成功');\n\n    // 用户积分表\n    await query(`\n      CREATE TABLE IF NOT EXISTS user_points (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        points INT DEFAULT 60,\n        daily_reset_date DATE NOT NULL,\n        purchased_points INT DEFAULT 0,\n        total_used INT DEFAULT 0,\n        created_at DATETIME NOT NULL,\n        updated_at DATETIME NULL,\n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n        UNIQUE KEY unique_user (user_id),\n        INDEX idx_daily_reset (daily_reset_date)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 用户积分表创建成功');\n\n    // 积分使用记录表\n    await query(`\n      CREATE TABLE IF NOT EXISTS point_transactions (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        user_id INT NOT NULL,\n        type ENUM('use', 'purchase', 'daily_reset') NOT NULL,\n        amount INT NOT NULL,\n        balance_after INT NOT NULL,\n        description VARCHAR(255) DEFAULT NULL,\n        task_id INT DEFAULT NULL,\n        created_at DATETIME NOT NULL,\n        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n        FOREIGN KEY (task_id) REFERENCES processing_tasks(id) ON DELETE SET NULL,\n        INDEX idx_user_id (user_id),\n        INDEX idx_type (type),\n        INDEX idx_created_at (created_at)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 积分使用记录表创建成功');\n\n    // 秒杀活动表\n    await query(`\n      CREATE TABLE IF NOT EXISTS seckill_activities (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        activity_date DATE NOT NULL,\n        total_vouchers INT DEFAULT 100,\n        remaining_vouchers INT DEFAULT 100,\n        voucher_points INT DEFAULT 20,\n        start_time TIME DEFAULT '23:00:00',\n        status ENUM('pending', 'active', 'ended') DEFAULT 'pending',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME NULL,\n        UNIQUE KEY unique_date (activity_date),\n        INDEX idx_status (status),\n        INDEX idx_date (activity_date)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 秒杀活动表创建成功');\n\n    // 秒杀参与记录表（无需用户登录，记录浏览器指纹）\n    await query(`\n      CREATE TABLE IF NOT EXISTS seckill_participations (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        activity_id INT NOT NULL,\n        browser_fingerprint VARCHAR(255) NOT NULL,\n        ip_address VARCHAR(45) NOT NULL,\n        points_awarded INT DEFAULT 20,\n        participated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (activity_id) REFERENCES seckill_activities(id) ON DELETE CASCADE,\n        UNIQUE KEY unique_participation (activity_id, browser_fingerprint),\n        INDEX idx_activity (activity_id),\n        INDEX idx_fingerprint (browser_fingerprint)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n    `);\n    console.log('✅ 秒杀参与记录表创建成功');\n\n    console.log('🎉 所有数据库表创建完成！');\n  } catch (error) {\n    console.error('❌ 创建数据库表失败:', error);\n    throw error;\n  }\n};\n\n// 创建默认数据\nconst createDefaultData = async () => {\n  try {\n    console.log('🔧 开始创建默认数据...');\n\n    // 检查是否已有管理员用户\n    const adminUsers = await query(\n      'SELECT id FROM users WHERE email = ?',\n      ['admin@imagic.com']\n    );\n\n    if (adminUsers.length === 0) {\n      const bcrypt = require('bcryptjs');\n      const hashedPassword = await bcrypt.hash('admin123456', 12);\n\n      await query(\n        'INSERT INTO users (username, email, password, status) VALUES (?, ?, ?, ?)',\n        ['admin', 'admin@imagic.com', hashedPassword, 'active']\n      );\n\n      console.log('✅ 默认管理员用户创建成功');\n      console.log('📧 邮箱: admin@imagic.com');\n      console.log('🔑 密码: admin123456');\n    } else {\n      console.log('ℹ️  管理员用户已存在');\n    }\n\n    console.log('🎉 默认数据创建完成！');\n  } catch (error) {\n    console.error('❌ 创建默认数据失败:', error);\n    throw error;\n  }\n};\n\n// 主函数\nconst initDatabase = async () => {\n  try {\n    console.log('🚀 开始初始化数据库...');\n\n    // 测试数据库连接\n    const connected = await testConnection();\n    if (!connected) {\n      throw new Error('数据库连接失败');\n    }\n\n    // 创建表结构\n    await createTables();\n\n    // 创建默认数据\n    await createDefaultData();\n\n    console.log('🎉 数据库初始化完成！');\n    process.exit(0);\n  } catch (error) {\n    console.error('❌ 数据库初始化失败:', error);\n    process.exit(1);\n  }\n};\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  initDatabase();\n}\n\nmodule.exports = {\n  initDatabase,\n  createTables,\n  createDefaultData\n};\n"
        }
    ]
}