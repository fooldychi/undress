{
    "sourceFile": "server/src/scripts/create-level-cards-tables.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752460621655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752460633185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         bound_at TIMESTAMP NULL COMMENT '绑定时间',\n         expires_at TIMESTAMP NULL COMMENT '过期时间',\n         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n         updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n-        FOREIGN KEY (type_id) REFERENCES level_card_types(id),\n+        FOREIGN KEY (type_id) REFERENCES card_types(id),\n         FOREIGN KEY (bound_user_id) REFERENCES users(id),\n         INDEX idx_card_number (card_number),\n         INDEX idx_bound_user (bound_user_id),\n         INDEX idx_status (status)\n"
                },
                {
                    "date": 1752460649284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,12 +66,12 @@\n     // 4. 插入等级卡类型数据\n     console.log('📝 插入等级卡类型数据...');\n \n     // 检查是否已有数据\n-    const existingTypes = await query('SELECT COUNT(*) as count FROM level_card_types');\n+    const existingTypes = await query('SELECT COUNT(*) as count FROM card_types');\n     if (existingTypes[0].count === 0) {\n       await query(`\n-        INSERT INTO level_card_types (name, icon, price, points, description) VALUES\n+        INSERT INTO card_types (name, icon, price, points, description) VALUES\n         ('基础卡', '🥉', 9.90, 300, '适合轻度使用的用户'),\n         ('高级卡', '🥈', 30.00, 1000, '适合中度使用的用户'),\n         ('至尊卡', '🥇', 50.00, 2000, '适合重度使用的用户')\n       `);\n"
                },
                {
                    "date": 1752460660174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n   try {\n     console.log('🎫 开始生成等级卡...');\n \n     // 获取等级卡类型\n-    const cardTypes = await query('SELECT * FROM level_card_types');\n+    const cardTypes = await query('SELECT * FROM card_types');\n \n     for (const cardType of cardTypes) {\n       console.log(`📋 生成${cardType.name}...`);\n \n"
                },
                {
                    "date": 1752460672452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n       console.log('\\n📋 生成的等级卡列表:');\n       const cards = await query(`\n         SELECT lc.card_number, lc.card_password, lct.name as type_name, lct.icon, lc.total_points\n         FROM level_cards lc\n-        JOIN level_card_types lct ON lc.type_id = lct.id\n+        JOIN card_types lct ON lc.type_id = lct.id\n         ORDER BY lct.id, lc.card_number\n       `);\n \n       console.log('\\n' + '='.repeat(80));\n"
                }
            ],
            "date": 1752460621655,
            "name": "Commit-0",
            "content": "// 创建等级卡相关数据库表\nconst { query } = require('../config/database');\n\nasync function createLevelCardsTables() {\n  try {\n    console.log('🗃️ 开始创建等级卡相关数据库表...');\n\n    // 1. 创建等级卡类型表\n    await query(`\n      CREATE TABLE IF NOT EXISTS card_types (\n        id INT PRIMARY KEY AUTO_INCREMENT,\n        name VARCHAR(50) NOT NULL COMMENT '等级卡名称',\n        icon VARCHAR(10) NOT NULL COMMENT '等级卡图标',\n        price DECIMAL(10,2) NOT NULL COMMENT '价格',\n        points INT NOT NULL COMMENT '积分数量',\n        description TEXT COMMENT '描述',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='等级卡类型表'\n    `);\n    console.log('✅ 等级卡类型表创建成功');\n\n    // 2. 创建等级卡表\n    await query(`\n      CREATE TABLE IF NOT EXISTS level_cards (\n        id INT PRIMARY KEY AUTO_INCREMENT,\n        card_number VARCHAR(20) UNIQUE NOT NULL COMMENT '卡号',\n        card_password VARCHAR(20) NOT NULL COMMENT '卡密',\n        type_id INT NOT NULL COMMENT '等级卡类型ID',\n        total_points INT NOT NULL COMMENT '总积分',\n        remaining_points INT NOT NULL COMMENT '剩余积分',\n        status ENUM('active', 'used', 'expired', 'disabled') DEFAULT 'active' COMMENT '状态',\n        bound_user_id INT NULL COMMENT '绑定的用户ID',\n        bound_at TIMESTAMP NULL COMMENT '绑定时间',\n        expires_at TIMESTAMP NULL COMMENT '过期时间',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n        FOREIGN KEY (type_id) REFERENCES level_card_types(id),\n        FOREIGN KEY (bound_user_id) REFERENCES users(id),\n        INDEX idx_card_number (card_number),\n        INDEX idx_bound_user (bound_user_id),\n        INDEX idx_status (status)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='等级卡表'\n    `);\n    console.log('✅ 等级卡表创建成功');\n\n    // 3. 创建等级卡使用记录表\n    await query(`\n      CREATE TABLE IF NOT EXISTS level_card_transactions (\n        id INT PRIMARY KEY AUTO_INCREMENT,\n        card_id INT NOT NULL COMMENT '等级卡ID',\n        user_id INT NOT NULL COMMENT '用户ID',\n        type ENUM('bind', 'consume') NOT NULL COMMENT '交易类型',\n        points_amount INT NOT NULL COMMENT '积分数量',\n        remaining_points INT NOT NULL COMMENT '操作后剩余积分',\n        description VARCHAR(255) COMMENT '描述',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (card_id) REFERENCES level_cards(id),\n        FOREIGN KEY (user_id) REFERENCES users(id),\n        INDEX idx_card_user (card_id, user_id),\n        INDEX idx_created_at (created_at)\n      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='等级卡交易记录表'\n    `);\n    console.log('✅ 等级卡交易记录表创建成功');\n\n    // 4. 插入等级卡类型数据\n    console.log('📝 插入等级卡类型数据...');\n\n    // 检查是否已有数据\n    const existingTypes = await query('SELECT COUNT(*) as count FROM level_card_types');\n    if (existingTypes[0].count === 0) {\n      await query(`\n        INSERT INTO level_card_types (name, icon, price, points, description) VALUES\n        ('基础卡', '🥉', 9.90, 300, '适合轻度使用的用户'),\n        ('高级卡', '🥈', 30.00, 1000, '适合中度使用的用户'),\n        ('至尊卡', '🥇', 50.00, 2000, '适合重度使用的用户')\n      `);\n      console.log('✅ 等级卡类型数据插入成功');\n    } else {\n      console.log('ℹ️ 等级卡类型数据已存在，跳过插入');\n    }\n\n    console.log('🎉 等级卡数据库表创建完成！');\n\n  } catch (error) {\n    console.error('❌ 创建等级卡数据库表失败:', error);\n    throw error;\n  }\n}\n\n// 生成等级卡的函数\nasync function generateLevelCards() {\n  try {\n    console.log('🎫 开始生成等级卡...');\n\n    // 获取等级卡类型\n    const cardTypes = await query('SELECT * FROM level_card_types');\n\n    for (const cardType of cardTypes) {\n      console.log(`📋 生成${cardType.name}...`);\n\n      // 为每种类型生成5张卡\n      for (let i = 1; i <= 5; i++) {\n        const cardNumber = generateCardNumber(cardType.name, i);\n        const cardPassword = generateCardPassword();\n\n        await query(`\n          INSERT INTO level_cards (card_number, card_password, type_id, total_points, remaining_points, expires_at)\n          VALUES (?, ?, ?, ?, ?, DATE_ADD(NOW(), INTERVAL 1 YEAR))\n        `, [cardNumber, cardPassword, cardType.id, cardType.points, cardType.points]);\n\n        console.log(`  ✅ ${cardNumber} - ${cardPassword}`);\n      }\n    }\n\n    console.log('🎉 等级卡生成完成！');\n\n  } catch (error) {\n    console.error('❌ 生成等级卡失败:', error);\n    throw error;\n  }\n}\n\n// 生成卡号\nfunction generateCardNumber(cardName, index) {\n  const prefix = {\n    '基础卡': 'BC',\n    '高级卡': 'AC',\n    '至尊卡': 'PC'\n  };\n\n  const timestamp = Date.now().toString().slice(-6);\n  return `${prefix[cardName]}${timestamp}${index.toString().padStart(2, '0')}`;\n}\n\n// 生成卡密\nfunction generateCardPassword() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let password = '';\n  for (let i = 0; i < 8; i++) {\n    password += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return password;\n}\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  (async () => {\n    try {\n      await createLevelCardsTables();\n      await generateLevelCards();\n\n      // 显示生成的卡片\n      console.log('\\n📋 生成的等级卡列表:');\n      const cards = await query(`\n        SELECT lc.card_number, lc.card_password, lct.name as type_name, lct.icon, lc.total_points\n        FROM level_cards lc\n        JOIN level_card_types lct ON lc.type_id = lct.id\n        ORDER BY lct.id, lc.card_number\n      `);\n\n      console.log('\\n' + '='.repeat(80));\n      console.log('| 卡号          | 卡密     | 类型   | 积分  |');\n      console.log('='.repeat(80));\n\n      cards.forEach(card => {\n        console.log(`| ${card.card_number.padEnd(12)} | ${card.card_password.padEnd(8)} | ${card.icon}${card.type_name.padEnd(4)} | ${card.total_points.toString().padEnd(4)} |`);\n      });\n\n      console.log('='.repeat(80));\n\n      process.exit(0);\n    } catch (error) {\n      console.error('执行失败:', error);\n      process.exit(1);\n    }\n  })();\n}\n\nmodule.exports = {\n  createLevelCardsTables,\n  generateLevelCards\n};\n"
        }
    ]
}