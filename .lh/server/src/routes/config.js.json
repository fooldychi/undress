{
    "sourceFile": "server/src/routes/config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752325621617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752408878885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,27 @@\n       }\n       groupedConfigs[config.config_group].push(config);\n     });\n \n+    // 同时提供扁平化的配置数据，方便前端使用\n+    const flatConfigs = {};\n+    processedConfigs.forEach(config => {\n+      let value = config.config_value;\n+\n+      // 根据类型转换值\n+      if (config.config_type === 'number') {\n+        value = parseInt(value) || 0;\n+      } else if (config.config_type === 'boolean') {\n+        value = value === 'true' || value === '1' || value === true;\n+      }\n+\n+      flatConfigs[config.config_key] = value;\n+    });\n+\n     res.json({\n       success: true,\n-      data: groupedConfigs\n+      data: flatConfigs,\n+      grouped: groupedConfigs\n     });\n   } catch (error) {\n     console.error('获取配置失败:', error);\n     res.status(500).json({\n"
                }
            ],
            "date": 1752325621617,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { query } = require('../config/database');\nconst { adminAuth } = require('../middleware/adminAuth');\nconst crypto = require('crypto');\n\n// 加密密钥（实际项目中应该从环境变量获取）\nconst ENCRYPTION_KEY = process.env.CONFIG_ENCRYPTION_KEY || 'your-32-char-secret-key-here!!';\n\n// 加密函数\nfunction encrypt(text) {\n  const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\n// 解密函数\nfunction decrypt(encryptedText) {\n  const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);\n  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\n// 获取所有配置\nrouter.get('/', adminAuth, async (req, res) => {\n  try {\n    const configs = await query(`\n      SELECT config_key, config_value, config_type, config_group, description, is_encrypted\n      FROM system_config\n      ORDER BY config_group, config_key\n    `);\n\n    // 解密敏感配置\n    const processedConfigs = configs.map(config => {\n      if (config.is_encrypted && config.config_value) {\n        try {\n          config.config_value = decrypt(config.config_value);\n        } catch (error) {\n          console.error('解密配置失败:', config.config_key, error);\n        }\n      }\n      return config;\n    });\n\n    // 按分组组织配置\n    const groupedConfigs = {};\n    processedConfigs.forEach(config => {\n      if (!groupedConfigs[config.config_group]) {\n        groupedConfigs[config.config_group] = [];\n      }\n      groupedConfigs[config.config_group].push(config);\n    });\n\n    res.json({\n      success: true,\n      data: groupedConfigs\n    });\n  } catch (error) {\n    console.error('获取配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败'\n    });\n  }\n});\n\n// 获取单个配置\nrouter.get('/:key', async (req, res) => {\n  try {\n    const { key } = req.params;\n    const configs = await query(\n      'SELECT config_value, is_encrypted FROM system_config WHERE config_key = ?',\n      [key]\n    );\n\n    if (configs.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: '配置不存在'\n      });\n    }\n\n    let value = configs[0].config_value;\n    if (configs[0].is_encrypted && value) {\n      try {\n        value = decrypt(value);\n      } catch (error) {\n        console.error('解密配置失败:', key, error);\n      }\n    }\n\n    res.json({\n      success: true,\n      data: value\n    });\n  } catch (error) {\n    console.error('获取配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败'\n    });\n  }\n});\n\n// 更新配置\nrouter.put('/', async (req, res) => {\n  try {\n    const { configs } = req.body;\n\n    if (!configs || !Array.isArray(configs)) {\n      return res.status(400).json({\n        success: false,\n        message: '配置数据格式错误'\n      });\n    }\n\n    // 开始事务\n    const results = [];\n    for (const config of configs) {\n      const { config_key, config_value, is_encrypted } = config;\n\n      let valueToStore = config_value;\n\n      // 如果需要加密\n      if (is_encrypted && config_value) {\n        valueToStore = encrypt(config_value);\n      }\n\n      const result = await query(`\n        UPDATE system_config\n        SET config_value = ?, updated_at = CURRENT_TIMESTAMP\n        WHERE config_key = ?\n      `, [valueToStore, config_key]);\n\n      results.push({\n        config_key,\n        updated: result.affectedRows > 0\n      });\n    }\n\n    res.json({\n      success: true,\n      message: '配置更新成功',\n      data: results\n    });\n  } catch (error) {\n    console.error('更新配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '更新配置失败'\n    });\n  }\n});\n\n// 重置配置到默认值\nrouter.post('/reset', async (req, res) => {\n  try {\n    const { config_group } = req.body;\n\n    let whereClause = '';\n    let params = [];\n\n    if (config_group) {\n      whereClause = 'WHERE config_group = ?';\n      params = [config_group];\n    }\n\n    // 这里可以添加重置到默认值的逻辑\n    // 暂时返回成功响应\n    res.json({\n      success: true,\n      message: '配置重置成功'\n    });\n  } catch (error) {\n    console.error('重置配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '重置配置失败'\n    });\n  }\n});\n\n// 测试配置连接\nrouter.post('/test', async (req, res) => {\n  try {\n    const { config_group, configs, serverUrl, timeout = 10000 } = req.body;\n\n    if (config_group === 'database') {\n      // 测试数据库连接\n      const mysql = require('mysql2/promise');\n      const dbConfig = {};\n\n      configs.forEach(config => {\n        const key = config.config_key.replace('database.', '');\n        dbConfig[key] = config.config_value;\n      });\n\n      try {\n        const connection = await mysql.createConnection({\n          host: dbConfig.host,\n          port: dbConfig.port,\n          user: dbConfig.user,\n          password: dbConfig.password,\n          database: dbConfig.name\n        });\n\n        await connection.ping();\n        await connection.end();\n\n        res.json({\n          success: true,\n          message: '数据库连接测试成功'\n        });\n      } catch (error) {\n        res.json({\n          success: false,\n          message: `数据库连接测试失败: ${error.message}`\n        });\n      }\n    } else if (config_group === 'comfyui' || serverUrl) {\n      // 测试ComfyUI连接\n      const testUrl = serverUrl || configs?.find(c => c.config_key === 'comfyui.server_url')?.config_value;\n\n      if (!testUrl) {\n        return res.json({\n          success: false,\n          message: '请提供ComfyUI服务器地址'\n        });\n      }\n\n      console.log(`🔍 测试ComfyUI连接: ${testUrl}`);\n\n      // 构建健康检查URL\n      const healthCheckUrl = `${testUrl.replace(/\\/$/, '')}/system_stats`;\n\n      // 使用fetch进行连接测试\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      try {\n        const response = await fetch(healthCheckUrl, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': 'Imagic-Admin/1.0'\n          },\n          signal: controller.signal\n        });\n\n        clearTimeout(timeoutId);\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log('✅ ComfyUI连接测试成功');\n\n          res.json({\n            success: true,\n            message: 'ComfyUI服务器连接正常',\n            data: {\n              status: 'connected',\n              responseTime: Date.now(),\n              serverInfo: data\n            }\n          });\n        } else {\n          console.log(`❌ ComfyUI连接测试失败: HTTP ${response.status}`);\n\n          res.json({\n            success: false,\n            message: `服务器响应错误: HTTP ${response.status}`,\n            data: {\n              status: 'error',\n              statusCode: response.status\n            }\n          });\n        }\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n\n        if (fetchError.name === 'AbortError') {\n          console.log('❌ ComfyUI连接测试超时');\n          res.json({\n            success: false,\n            message: `连接超时 (${timeout}ms)`,\n            data: {\n              status: 'timeout'\n            }\n          });\n        } else {\n          console.log('❌ ComfyUI连接测试失败:', fetchError.message);\n          res.json({\n            success: false,\n            message: `连接失败: ${fetchError.message}`,\n            data: {\n              status: 'error',\n              error: fetchError.message\n            }\n          });\n        }\n      }\n    } else {\n      res.json({\n        success: true,\n        message: '配置测试成功'\n      });\n    }\n  } catch (error) {\n    console.error('测试配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '测试配置失败'\n    });\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}