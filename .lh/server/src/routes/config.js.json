{
    "sourceFile": "server/src/routes/config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752325621617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752408878885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,27 @@\n       }\n       groupedConfigs[config.config_group].push(config);\n     });\n \n+    // 同时提供扁平化的配置数据，方便前端使用\n+    const flatConfigs = {};\n+    processedConfigs.forEach(config => {\n+      let value = config.config_value;\n+\n+      // 根据类型转换值\n+      if (config.config_type === 'number') {\n+        value = parseInt(value) || 0;\n+      } else if (config.config_type === 'boolean') {\n+        value = value === 'true' || value === '1' || value === true;\n+      }\n+\n+      flatConfigs[config.config_key] = value;\n+    });\n+\n     res.json({\n       success: true,\n-      data: groupedConfigs\n+      data: flatConfigs,\n+      grouped: groupedConfigs\n     });\n   } catch (error) {\n     console.error('获取配置失败:', error);\n     res.status(500).json({\n"
                },
                {
                    "date": 1752545417376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,25 +247,41 @@\n       }\n \n       console.log(`🔍 测试ComfyUI连接: ${testUrl}`);\n \n-      // 构建健康检查URL\n-      const healthCheckUrl = `${testUrl.replace(/\\/$/, '')}/system_stats`;\n+      // 基于ComfyUI官方文档的健康检查端点\n+      const baseUrl = testUrl.replace(/\\/$/, '');\n+      const testEndpoints = [\n+        '/api/queue',        // ComfyUI官方队列端点\n+        '/api/system_stats', // ComfyUI官方系统状态端点\n+        '/queue',            // 备用队列端点\n+        '/system_stats'      // 备用系统状态端点\n+      ];\n \n       // 使用fetch进行连接测试\n       const controller = new AbortController();\n       const timeoutId = setTimeout(() => controller.abort(), timeout);\n \n-      try {\n-        const response = await fetch(healthCheckUrl, {\n-          method: 'GET',\n-          headers: {\n-            'Content-Type': 'application/json',\n-            'User-Agent': 'Imagic-Admin/1.0'\n-          },\n-          signal: controller.signal\n-        });\n+      let lastError = null;\n+      let successResult = null;\n \n+      for (const endpoint of testEndpoints) {\n+        try {\n+          const healthCheckUrl = `${baseUrl}${endpoint}`;\n+          console.log(`🔍 测试端点: ${endpoint}`);\n+\n+          const response = await fetch(healthCheckUrl, {\n+            method: 'GET',\n+            headers: {\n+              'Accept': 'application/json, */*',\n+              'Accept-Language': 'zh-CN,zh;q=0.9',\n+              'Cache-Control': 'no-cache',\n+              'comfy-user': 'health-monitor',\n+              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\n+            },\n+            signal: controller.signal\n+          });\n+\n         clearTimeout(timeoutId);\n \n         if (response.ok) {\n           const data = await response.json();\n"
                },
                {
                    "date": 1752545436821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,35 +280,65 @@\n             },\n             signal: controller.signal\n           });\n \n-        clearTimeout(timeoutId);\n+          if (response.ok) {\n+            try {\n+              const data = await response.json();\n+              console.log(`✅ ComfyUI端点测试成功: ${endpoint}`);\n \n-        if (response.ok) {\n-          const data = await response.json();\n-          console.log('✅ ComfyUI连接测试成功');\n-\n-          res.json({\n-            success: true,\n-            message: 'ComfyUI服务器连接正常',\n-            data: {\n-              status: 'connected',\n-              responseTime: Date.now(),\n-              serverInfo: data\n+              successResult = {\n+                success: true,\n+                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n+                data: {\n+                  status: 'connected',\n+                  endpoint: endpoint,\n+                  responseTime: Date.now(),\n+                  serverInfo: data\n+                }\n+              };\n+              break; // 找到可用端点，退出循环\n+            } catch (jsonError) {\n+              console.log(`⚠️ 端点 ${endpoint} 响应非JSON格式，但连接正常`);\n+              successResult = {\n+                success: true,\n+                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n+                data: {\n+                  status: 'connected',\n+                  endpoint: endpoint,\n+                  responseTime: Date.now(),\n+                  note: '响应非JSON格式但连接正常'\n+                }\n+              };\n+              break;\n             }\n-          });\n-        } else {\n-          console.log(`❌ ComfyUI连接测试失败: HTTP ${response.status}`);\n+          } else {\n+            lastError = `端点 ${endpoint}: HTTP ${response.status}`;\n+            console.log(`❌ ${lastError}`);\n+          }\n+        } catch (endpointError) {\n+          lastError = `端点 ${endpoint}: ${endpointError.message}`;\n+          console.log(`❌ ${lastError}`);\n+        }\n+      }\n \n-          res.json({\n-            success: false,\n-            message: `服务器响应错误: HTTP ${response.status}`,\n-            data: {\n-              status: 'error',\n-              statusCode: response.status\n-            }\n-          });\n-        }\n+      clearTimeout(timeoutId);\n+\n+      // 返回结果\n+      if (successResult) {\n+        res.json(successResult);\n+      } else {\n+        console.log('❌ 所有ComfyUI端点测试失败');\n+        res.json({\n+          success: false,\n+          message: `所有ComfyUI端点测试失败。最后错误: ${lastError}`,\n+          data: {\n+            status: 'error',\n+            testedEndpoints: testEndpoints,\n+            lastError: lastError\n+          }\n+        });\n+      }\n       } catch (fetchError) {\n         clearTimeout(timeoutId);\n \n         if (fetchError.name === 'AbortError') {\n"
                },
                {
                    "date": 1752546209565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,11 @@\n           message: `数据库连接测试失败: ${error.message}`\n         });\n       }\n     } else if (config_group === 'comfyui' || serverUrl) {\n-      // 测试ComfyUI连接\n+      // 使用统一的ComfyUI健康检查工具\n+      const { quickHealthCheck } = require('../../shared/comfyui-health-checker');\n+\n       const testUrl = serverUrl || configs?.find(c => c.config_key === 'comfyui.server_url')?.config_value;\n \n       if (!testUrl) {\n         return res.json({\n@@ -245,97 +247,56 @@\n           message: '请提供ComfyUI服务器地址'\n         });\n       }\n \n-      console.log(`🔍 测试ComfyUI连接: ${testUrl}`);\n+      console.log(`🔍 使用官方标准检查ComfyUI连接: ${testUrl}`);\n \n-      // 基于ComfyUI官方文档的健康检查端点\n-      const baseUrl = testUrl.replace(/\\/$/, '');\n-      const testEndpoints = [\n-        '/api/queue',        // ComfyUI官方队列端点\n-        '/api/system_stats', // ComfyUI官方系统状态端点\n-        '/queue',            // 备用队列端点\n-        '/system_stats'      // 备用系统状态端点\n-      ];\n+      try {\n+        // 使用统一的健康检查工具\n+        const healthResult = await quickHealthCheck(testUrl, {\n+          timeout: timeout,\n+          requireComfyUIFeatures: true\n+        });\n \n-      // 使用fetch进行连接测试\n-      const controller = new AbortController();\n-      const timeoutId = setTimeout(() => controller.abort(), timeout);\n+        if (healthResult.isHealthy) {\n+          console.log('✅ ComfyUI健康检查通过');\n \n-      let lastError = null;\n-      let successResult = null;\n-\n-      for (const endpoint of testEndpoints) {\n-        try {\n-          const healthCheckUrl = `${baseUrl}${endpoint}`;\n-          console.log(`🔍 测试端点: ${endpoint}`);\n-\n-          const response = await fetch(healthCheckUrl, {\n-            method: 'GET',\n-            headers: {\n-              'Accept': 'application/json, */*',\n-              'Accept-Language': 'zh-CN,zh;q=0.9',\n-              'Cache-Control': 'no-cache',\n-              'comfy-user': 'health-monitor',\n-              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\n-            },\n-            signal: controller.signal\n+          res.json({\n+            success: true,\n+            message: `ComfyUI服务器连接正常 (${healthResult.recommendation.message})`,\n+            data: {\n+              status: 'connected',\n+              checkDuration: healthResult.checkDuration,\n+              recommendedEndpoint: healthResult.recommendation.recommendedEndpoint,\n+              successfulEndpoints: healthResult.summary.successfulEndpoints,\n+              comfyUIFeatures: healthResult.summary.comfyUIFeatures,\n+              serverInfo: healthResult.summary\n+            }\n           });\n+        } else {\n+          console.log('❌ ComfyUI健康检查失败');\n \n-          if (response.ok) {\n-            try {\n-              const data = await response.json();\n-              console.log(`✅ ComfyUI端点测试成功: ${endpoint}`);\n-\n-              successResult = {\n-                success: true,\n-                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n-                data: {\n-                  status: 'connected',\n-                  endpoint: endpoint,\n-                  responseTime: Date.now(),\n-                  serverInfo: data\n-                }\n-              };\n-              break; // 找到可用端点，退出循环\n-            } catch (jsonError) {\n-              console.log(`⚠️ 端点 ${endpoint} 响应非JSON格式，但连接正常`);\n-              successResult = {\n-                success: true,\n-                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n-                data: {\n-                  status: 'connected',\n-                  endpoint: endpoint,\n-                  responseTime: Date.now(),\n-                  note: '响应非JSON格式但连接正常'\n-                }\n-              };\n-              break;\n+          res.json({\n+            success: false,\n+            message: `ComfyUI服务器健康检查失败: ${healthResult.recommendation.message}`,\n+            data: {\n+              status: 'unhealthy',\n+              checkDuration: healthResult.checkDuration,\n+              successfulEndpoints: healthResult.summary.successfulEndpoints,\n+              totalEndpoints: healthResult.summary.totalEndpoints,\n+              suggestion: healthResult.recommendation.suggestedAction\n             }\n-          } else {\n-            lastError = `端点 ${endpoint}: HTTP ${response.status}`;\n-            console.log(`❌ ${lastError}`);\n-          }\n-        } catch (endpointError) {\n-          lastError = `端点 ${endpoint}: ${endpointError.message}`;\n-          console.log(`❌ ${lastError}`);\n+          });\n         }\n-      }\n+      } catch (healthError) {\n+        console.error('❌ ComfyUI健康检查出错:', healthError);\n \n-      clearTimeout(timeoutId);\n-\n-      // 返回结果\n-      if (successResult) {\n-        res.json(successResult);\n-      } else {\n-        console.log('❌ 所有ComfyUI端点测试失败');\n         res.json({\n           success: false,\n-          message: `所有ComfyUI端点测试失败。最后错误: ${lastError}`,\n+          message: `ComfyUI健康检查失败: ${healthError.message}`,\n           data: {\n             status: 'error',\n-            testedEndpoints: testEndpoints,\n-            lastError: lastError\n+            error: healthError.message\n           }\n         });\n       }\n       } catch (fetchError) {\n"
                },
                {
                    "date": 1752546325327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,11 +235,9 @@\n           message: `数据库连接测试失败: ${error.message}`\n         });\n       }\n     } else if (config_group === 'comfyui' || serverUrl) {\n-      // 使用统一的ComfyUI健康检查工具\n-      const { quickHealthCheck } = require('../../shared/comfyui-health-checker');\n-\n+      // 测试ComfyUI连接\n       const testUrl = serverUrl || configs?.find(c => c.config_key === 'comfyui.server_url')?.config_value;\n \n       if (!testUrl) {\n         return res.json({\n@@ -247,56 +245,97 @@\n           message: '请提供ComfyUI服务器地址'\n         });\n       }\n \n-      console.log(`🔍 使用官方标准检查ComfyUI连接: ${testUrl}`);\n+      console.log(`🔍 测试ComfyUI连接: ${testUrl}`);\n \n-      try {\n-        // 使用统一的健康检查工具\n-        const healthResult = await quickHealthCheck(testUrl, {\n-          timeout: timeout,\n-          requireComfyUIFeatures: true\n-        });\n+      // 基于ComfyUI官方文档的健康检查端点\n+      const baseUrl = testUrl.replace(/\\/$/, '');\n+      const testEndpoints = [\n+        '/api/queue',        // ComfyUI官方队列端点\n+        '/api/system_stats', // ComfyUI官方系统状态端点\n+        '/queue',            // 备用队列端点\n+        '/system_stats'      // 备用系统状态端点\n+      ];\n \n-        if (healthResult.isHealthy) {\n-          console.log('✅ ComfyUI健康检查通过');\n+      // 使用fetch进行连接测试\n+      const controller = new AbortController();\n+      const timeoutId = setTimeout(() => controller.abort(), timeout);\n \n-          res.json({\n-            success: true,\n-            message: `ComfyUI服务器连接正常 (${healthResult.recommendation.message})`,\n-            data: {\n-              status: 'connected',\n-              checkDuration: healthResult.checkDuration,\n-              recommendedEndpoint: healthResult.recommendation.recommendedEndpoint,\n-              successfulEndpoints: healthResult.summary.successfulEndpoints,\n-              comfyUIFeatures: healthResult.summary.comfyUIFeatures,\n-              serverInfo: healthResult.summary\n-            }\n+      let lastError = null;\n+      let successResult = null;\n+\n+      for (const endpoint of testEndpoints) {\n+        try {\n+          const healthCheckUrl = `${baseUrl}${endpoint}`;\n+          console.log(`🔍 测试端点: ${endpoint}`);\n+\n+          const response = await fetch(healthCheckUrl, {\n+            method: 'GET',\n+            headers: {\n+              'Accept': 'application/json, */*',\n+              'Accept-Language': 'zh-CN,zh;q=0.9',\n+              'Cache-Control': 'no-cache',\n+              'comfy-user': 'health-monitor',\n+              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'\n+            },\n+            signal: controller.signal\n           });\n-        } else {\n-          console.log('❌ ComfyUI健康检查失败');\n \n-          res.json({\n-            success: false,\n-            message: `ComfyUI服务器健康检查失败: ${healthResult.recommendation.message}`,\n-            data: {\n-              status: 'unhealthy',\n-              checkDuration: healthResult.checkDuration,\n-              successfulEndpoints: healthResult.summary.successfulEndpoints,\n-              totalEndpoints: healthResult.summary.totalEndpoints,\n-              suggestion: healthResult.recommendation.suggestedAction\n+          if (response.ok) {\n+            try {\n+              const data = await response.json();\n+              console.log(`✅ ComfyUI端点测试成功: ${endpoint}`);\n+\n+              successResult = {\n+                success: true,\n+                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n+                data: {\n+                  status: 'connected',\n+                  endpoint: endpoint,\n+                  responseTime: Date.now(),\n+                  serverInfo: data\n+                }\n+              };\n+              break; // 找到可用端点，退出循环\n+            } catch (jsonError) {\n+              console.log(`⚠️ 端点 ${endpoint} 响应非JSON格式，但连接正常`);\n+              successResult = {\n+                success: true,\n+                message: `ComfyUI服务器连接正常 (端点: ${endpoint})`,\n+                data: {\n+                  status: 'connected',\n+                  endpoint: endpoint,\n+                  responseTime: Date.now(),\n+                  note: '响应非JSON格式但连接正常'\n+                }\n+              };\n+              break;\n             }\n-          });\n+          } else {\n+            lastError = `端点 ${endpoint}: HTTP ${response.status}`;\n+            console.log(`❌ ${lastError}`);\n+          }\n+        } catch (endpointError) {\n+          lastError = `端点 ${endpoint}: ${endpointError.message}`;\n+          console.log(`❌ ${lastError}`);\n         }\n-      } catch (healthError) {\n-        console.error('❌ ComfyUI健康检查出错:', healthError);\n+      }\n \n+      clearTimeout(timeoutId);\n+\n+      // 返回结果\n+      if (successResult) {\n+        res.json(successResult);\n+      } else {\n+        console.log('❌ 所有ComfyUI端点测试失败');\n         res.json({\n           success: false,\n-          message: `ComfyUI健康检查失败: ${healthError.message}`,\n+          message: `所有ComfyUI端点测试失败。最后错误: ${lastError}`,\n           data: {\n             status: 'error',\n-            error: healthError.message\n+            testedEndpoints: testEndpoints,\n+            lastError: lastError\n           }\n         });\n       }\n       } catch (fetchError) {\n"
                },
                {
                    "date": 1752548017842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,11 +251,9 @@\n       // 基于ComfyUI官方文档的健康检查端点\n       const baseUrl = testUrl.replace(/\\/$/, '');\n       const testEndpoints = [\n         '/api/queue',        // ComfyUI官方队列端点\n-        '/api/system_stats', // ComfyUI官方系统状态端点\n-        '/queue',            // 备用队列端点\n-        '/system_stats'      // 备用系统状态端点\n+        '/api/system_stats'  // ComfyUI官方系统状态端点\n       ];\n \n       // 使用fetch进行连接测试\n       const controller = new AbortController();\n"
                },
                {
                    "date": 1752548045278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -335,9 +335,9 @@\n             lastError: lastError\n           }\n         });\n       }\n-      } catch (fetchError) {\n+    } catch (fetchError) {\n         clearTimeout(timeoutId);\n \n         if (fetchError.name === 'AbortError') {\n           console.log('❌ ComfyUI连接测试超时');\n"
                },
                {
                    "date": 1752548899166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,9 +261,10 @@\n \n       let lastError = null;\n       let successResult = null;\n \n-      for (const endpoint of testEndpoints) {\n+      try {\n+        for (const endpoint of testEndpoints) {\n         try {\n           const healthCheckUrl = `${baseUrl}${endpoint}`;\n           console.log(`🔍 测试端点: ${endpoint}`);\n \n"
                }
            ],
            "date": 1752325621617,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { query } = require('../config/database');\nconst { adminAuth } = require('../middleware/adminAuth');\nconst crypto = require('crypto');\n\n// 加密密钥（实际项目中应该从环境变量获取）\nconst ENCRYPTION_KEY = process.env.CONFIG_ENCRYPTION_KEY || 'your-32-char-secret-key-here!!';\n\n// 加密函数\nfunction encrypt(text) {\n  const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return encrypted;\n}\n\n// 解密函数\nfunction decrypt(encryptedText) {\n  const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);\n  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n\n// 获取所有配置\nrouter.get('/', adminAuth, async (req, res) => {\n  try {\n    const configs = await query(`\n      SELECT config_key, config_value, config_type, config_group, description, is_encrypted\n      FROM system_config\n      ORDER BY config_group, config_key\n    `);\n\n    // 解密敏感配置\n    const processedConfigs = configs.map(config => {\n      if (config.is_encrypted && config.config_value) {\n        try {\n          config.config_value = decrypt(config.config_value);\n        } catch (error) {\n          console.error('解密配置失败:', config.config_key, error);\n        }\n      }\n      return config;\n    });\n\n    // 按分组组织配置\n    const groupedConfigs = {};\n    processedConfigs.forEach(config => {\n      if (!groupedConfigs[config.config_group]) {\n        groupedConfigs[config.config_group] = [];\n      }\n      groupedConfigs[config.config_group].push(config);\n    });\n\n    res.json({\n      success: true,\n      data: groupedConfigs\n    });\n  } catch (error) {\n    console.error('获取配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败'\n    });\n  }\n});\n\n// 获取单个配置\nrouter.get('/:key', async (req, res) => {\n  try {\n    const { key } = req.params;\n    const configs = await query(\n      'SELECT config_value, is_encrypted FROM system_config WHERE config_key = ?',\n      [key]\n    );\n\n    if (configs.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: '配置不存在'\n      });\n    }\n\n    let value = configs[0].config_value;\n    if (configs[0].is_encrypted && value) {\n      try {\n        value = decrypt(value);\n      } catch (error) {\n        console.error('解密配置失败:', key, error);\n      }\n    }\n\n    res.json({\n      success: true,\n      data: value\n    });\n  } catch (error) {\n    console.error('获取配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败'\n    });\n  }\n});\n\n// 更新配置\nrouter.put('/', async (req, res) => {\n  try {\n    const { configs } = req.body;\n\n    if (!configs || !Array.isArray(configs)) {\n      return res.status(400).json({\n        success: false,\n        message: '配置数据格式错误'\n      });\n    }\n\n    // 开始事务\n    const results = [];\n    for (const config of configs) {\n      const { config_key, config_value, is_encrypted } = config;\n\n      let valueToStore = config_value;\n\n      // 如果需要加密\n      if (is_encrypted && config_value) {\n        valueToStore = encrypt(config_value);\n      }\n\n      const result = await query(`\n        UPDATE system_config\n        SET config_value = ?, updated_at = CURRENT_TIMESTAMP\n        WHERE config_key = ?\n      `, [valueToStore, config_key]);\n\n      results.push({\n        config_key,\n        updated: result.affectedRows > 0\n      });\n    }\n\n    res.json({\n      success: true,\n      message: '配置更新成功',\n      data: results\n    });\n  } catch (error) {\n    console.error('更新配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '更新配置失败'\n    });\n  }\n});\n\n// 重置配置到默认值\nrouter.post('/reset', async (req, res) => {\n  try {\n    const { config_group } = req.body;\n\n    let whereClause = '';\n    let params = [];\n\n    if (config_group) {\n      whereClause = 'WHERE config_group = ?';\n      params = [config_group];\n    }\n\n    // 这里可以添加重置到默认值的逻辑\n    // 暂时返回成功响应\n    res.json({\n      success: true,\n      message: '配置重置成功'\n    });\n  } catch (error) {\n    console.error('重置配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '重置配置失败'\n    });\n  }\n});\n\n// 测试配置连接\nrouter.post('/test', async (req, res) => {\n  try {\n    const { config_group, configs, serverUrl, timeout = 10000 } = req.body;\n\n    if (config_group === 'database') {\n      // 测试数据库连接\n      const mysql = require('mysql2/promise');\n      const dbConfig = {};\n\n      configs.forEach(config => {\n        const key = config.config_key.replace('database.', '');\n        dbConfig[key] = config.config_value;\n      });\n\n      try {\n        const connection = await mysql.createConnection({\n          host: dbConfig.host,\n          port: dbConfig.port,\n          user: dbConfig.user,\n          password: dbConfig.password,\n          database: dbConfig.name\n        });\n\n        await connection.ping();\n        await connection.end();\n\n        res.json({\n          success: true,\n          message: '数据库连接测试成功'\n        });\n      } catch (error) {\n        res.json({\n          success: false,\n          message: `数据库连接测试失败: ${error.message}`\n        });\n      }\n    } else if (config_group === 'comfyui' || serverUrl) {\n      // 测试ComfyUI连接\n      const testUrl = serverUrl || configs?.find(c => c.config_key === 'comfyui.server_url')?.config_value;\n\n      if (!testUrl) {\n        return res.json({\n          success: false,\n          message: '请提供ComfyUI服务器地址'\n        });\n      }\n\n      console.log(`🔍 测试ComfyUI连接: ${testUrl}`);\n\n      // 构建健康检查URL\n      const healthCheckUrl = `${testUrl.replace(/\\/$/, '')}/system_stats`;\n\n      // 使用fetch进行连接测试\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      try {\n        const response = await fetch(healthCheckUrl, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': 'Imagic-Admin/1.0'\n          },\n          signal: controller.signal\n        });\n\n        clearTimeout(timeoutId);\n\n        if (response.ok) {\n          const data = await response.json();\n          console.log('✅ ComfyUI连接测试成功');\n\n          res.json({\n            success: true,\n            message: 'ComfyUI服务器连接正常',\n            data: {\n              status: 'connected',\n              responseTime: Date.now(),\n              serverInfo: data\n            }\n          });\n        } else {\n          console.log(`❌ ComfyUI连接测试失败: HTTP ${response.status}`);\n\n          res.json({\n            success: false,\n            message: `服务器响应错误: HTTP ${response.status}`,\n            data: {\n              status: 'error',\n              statusCode: response.status\n            }\n          });\n        }\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n\n        if (fetchError.name === 'AbortError') {\n          console.log('❌ ComfyUI连接测试超时');\n          res.json({\n            success: false,\n            message: `连接超时 (${timeout}ms)`,\n            data: {\n              status: 'timeout'\n            }\n          });\n        } else {\n          console.log('❌ ComfyUI连接测试失败:', fetchError.message);\n          res.json({\n            success: false,\n            message: `连接失败: ${fetchError.message}`,\n            data: {\n              status: 'error',\n              error: fetchError.message\n            }\n          });\n        }\n      }\n    } else {\n      res.json({\n        success: true,\n        message: '配置测试成功'\n      });\n    }\n  } catch (error) {\n    console.error('测试配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '测试配置失败'\n    });\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}