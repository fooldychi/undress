{
    "sourceFile": "server/src/routes/workflow-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1752813382472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752816638855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,17 @@\n   try {\n     const { workflows } = req.body;\n \n     console.log('📝 批量更新工作流配置...');\n+    console.log('📊 接收到的数据:', JSON.stringify(workflows, null, 2));\n \n+    if (!workflows || typeof workflows !== 'object') {\n+      return res.status(400).json({\n+        success: false,\n+        message: '无效的工作流配置数据'\n+      });\n+    }\n+\n     // 开始事务\n     await query('START TRANSACTION');\n \n     try {\n"
                },
                {
                    "date": 1752816657272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,18 +243,22 @@\n     await query('START TRANSACTION');\n \n     try {\n       for (const [workflowType, config] of Object.entries(workflows)) {\n+        console.log(`🔧 处理工作流: ${workflowType}`, config);\n+\n         // 更新工作流基础信息\n         if (config.name || config.description || config.enabled !== undefined) {\n-          await query(`\n+          console.log(`📝 更新工作流基础信息: ${workflowType}`);\n+          const result = await query(`\n             UPDATE workflow_info\n             SET workflow_name = COALESCE(?, workflow_name),\n                 description = COALESCE(?, description),\n                 is_enabled = COALESCE(?, is_enabled),\n                 updated_at = CURRENT_TIMESTAMP\n             WHERE workflow_type = ?\n           `, [config.name, config.description, config.enabled, workflowType]);\n+          console.log(`✅ 工作流基础信息更新结果:`, result);\n         }\n \n         // 更新输入节点\n         if (config.inputNodes) {\n"
                },
                {
                    "date": 1752816675504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,14 +261,17 @@\n         }\n \n         // 更新输入节点\n         if (config.inputNodes) {\n+          console.log(`📝 更新输入节点: ${workflowType}`, config.inputNodes);\n           for (const [nodeKey, nodeId] of Object.entries(config.inputNodes)) {\n-            await query(`\n+            console.log(`  - 更新输入节点: ${nodeKey} -> ${nodeId}`);\n+            const result = await query(`\n               UPDATE workflow_configs\n               SET node_id = ?, updated_at = CURRENT_TIMESTAMP\n               WHERE workflow_type = ? AND node_type = 'input' AND node_key = ?\n             `, [nodeId, workflowType, nodeKey]);\n+            console.log(`  ✅ 输入节点更新结果:`, result);\n           }\n         }\n \n         // 更新输出节点\n"
                },
                {
                    "date": 1752816692246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,14 +275,17 @@\n         }\n \n         // 更新输出节点\n         if (config.outputNodes) {\n+          console.log(`📝 更新输出节点: ${workflowType}`, config.outputNodes);\n           for (const outputNode of config.outputNodes) {\n-            await query(`\n+            console.log(`  - 更新输出节点: ${outputNode.key} -> ${outputNode.nodeId} (优先级: ${outputNode.order})`);\n+            const result = await query(`\n               UPDATE workflow_configs\n               SET node_id = ?, node_order = ?, updated_at = CURRENT_TIMESTAMP\n               WHERE workflow_type = ? AND node_type = 'output' AND node_key = ?\n             `, [outputNode.nodeId, outputNode.order, workflowType, outputNode.key]);\n+            console.log(`  ✅ 输出节点更新结果:`, result);\n           }\n         }\n       }\n \n"
                },
                {
                    "date": 1752816875231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,10 +238,9 @@\n         message: '无效的工作流配置数据'\n       });\n     }\n \n-    // 开始事务\n-    await query('START TRANSACTION');\n+    let updateCount = 0;\n \n     try {\n       for (const [workflowType, config] of Object.entries(workflows)) {\n         console.log(`🔧 处理工作流: ${workflowType}`, config);\n"
                },
                {
                    "date": 1752816896343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,25 +240,29 @@\n     }\n \n     let updateCount = 0;\n \n-    try {\n-      for (const [workflowType, config] of Object.entries(workflows)) {\n-        console.log(`🔧 处理工作流: ${workflowType}`, config);\n+    for (const [workflowType, config] of Object.entries(workflows)) {\n+      console.log(`🔧 处理工作流: ${workflowType}`, config);\n \n-        // 更新工作流基础信息\n-        if (config.name || config.description || config.enabled !== undefined) {\n-          console.log(`📝 更新工作流基础信息: ${workflowType}`);\n+      // 更新工作流基础信息\n+      if (config.name || config.description || config.enabled !== undefined) {\n+        console.log(`📝 更新工作流基础信息: ${workflowType}`);\n+        try {\n           const result = await query(`\n             UPDATE workflow_info\n             SET workflow_name = COALESCE(?, workflow_name),\n                 description = COALESCE(?, description),\n                 is_enabled = COALESCE(?, is_enabled),\n-                updated_at = CURRENT_TIMESTAMP\n+                updated_at = NOW()\n             WHERE workflow_type = ?\n           `, [config.name, config.description, config.enabled, workflowType]);\n           console.log(`✅ 工作流基础信息更新结果:`, result);\n+          updateCount++;\n+        } catch (error) {\n+          console.error(`❌ 更新工作流基础信息失败: ${workflowType}`, error);\n         }\n+      }\n \n         // 更新输入节点\n         if (config.inputNodes) {\n           console.log(`📝 更新输入节点: ${workflowType}`, config.inputNodes);\n"
                },
                {
                    "date": 1752816915152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,21 +262,26 @@\n           console.error(`❌ 更新工作流基础信息失败: ${workflowType}`, error);\n         }\n       }\n \n-        // 更新输入节点\n-        if (config.inputNodes) {\n-          console.log(`📝 更新输入节点: ${workflowType}`, config.inputNodes);\n-          for (const [nodeKey, nodeId] of Object.entries(config.inputNodes)) {\n-            console.log(`  - 更新输入节点: ${nodeKey} -> ${nodeId}`);\n+      // 更新输入节点\n+      if (config.inputNodes) {\n+        console.log(`📝 更新输入节点: ${workflowType}`, config.inputNodes);\n+        for (const [nodeKey, nodeId] of Object.entries(config.inputNodes)) {\n+          console.log(`  - 更新输入节点: ${nodeKey} -> ${nodeId}`);\n+          try {\n             const result = await query(`\n               UPDATE workflow_configs\n-              SET node_id = ?, updated_at = CURRENT_TIMESTAMP\n+              SET node_id = ?, updated_at = NOW()\n               WHERE workflow_type = ? AND node_type = 'input' AND node_key = ?\n             `, [nodeId, workflowType, nodeKey]);\n             console.log(`  ✅ 输入节点更新结果:`, result);\n+            updateCount++;\n+          } catch (error) {\n+            console.error(`  ❌ 更新输入节点失败: ${nodeKey}`, error);\n           }\n         }\n+      }\n \n         // 更新输出节点\n         if (config.outputNodes) {\n           console.log(`📝 更新输出节点: ${workflowType}`, config.outputNodes);\n"
                },
                {
                    "date": 1752816936608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,35 +281,36 @@\n           }\n         }\n       }\n \n-        // 更新输出节点\n-        if (config.outputNodes) {\n-          console.log(`📝 更新输出节点: ${workflowType}`, config.outputNodes);\n-          for (const outputNode of config.outputNodes) {\n-            console.log(`  - 更新输出节点: ${outputNode.key} -> ${outputNode.nodeId} (优先级: ${outputNode.order})`);\n+      // 更新输出节点\n+      if (config.outputNodes) {\n+        console.log(`📝 更新输出节点: ${workflowType}`, config.outputNodes);\n+        for (const outputNode of config.outputNodes) {\n+          console.log(`  - 更新输出节点: ${outputNode.key} -> ${outputNode.nodeId} (优先级: ${outputNode.order})`);\n+          try {\n             const result = await query(`\n               UPDATE workflow_configs\n-              SET node_id = ?, node_order = ?, updated_at = CURRENT_TIMESTAMP\n+              SET node_id = ?, node_order = ?, updated_at = NOW()\n               WHERE workflow_type = ? AND node_type = 'output' AND node_key = ?\n             `, [outputNode.nodeId, outputNode.order, workflowType, outputNode.key]);\n             console.log(`  ✅ 输出节点更新结果:`, result);\n+            updateCount++;\n+          } catch (error) {\n+            console.error(`  ❌ 更新输出节点失败: ${outputNode.key}`, error);\n           }\n         }\n       }\n+    }\n \n-      await query('COMMIT');\n+    console.log(`🎉 批量更新完成，共更新 ${updateCount} 项配置`);\n \n-      res.json({\n-        success: true,\n-        message: '批量更新成功'\n-      });\n+    res.json({\n+      success: true,\n+      message: `批量更新成功，共更新 ${updateCount} 项配置`,\n+      updateCount\n+    });\n \n-    } catch (error) {\n-      await query('ROLLBACK');\n-      throw error;\n-    }\n-\n   } catch (error) {\n     console.error('❌ 批量更新失败:', error);\n     res.status(500).json({\n       success: false,\n"
                },
                {
                    "date": 1752820384267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,9 +274,14 @@\n               SET node_id = ?, updated_at = NOW()\n               WHERE workflow_type = ? AND node_type = 'input' AND node_key = ?\n             `, [nodeId, workflowType, nodeKey]);\n             console.log(`  ✅ 输入节点更新结果:`, result);\n-            updateCount++;\n+            console.log(`  📊 影响行数: ${result.affectedRows}, 改变行数: ${result.changedRows}`);\n+            if (result.affectedRows > 0) {\n+              updateCount++;\n+            } else {\n+              console.log(`  ⚠️ 没有找到匹配的记录: ${workflowType}/${nodeKey}`);\n+            }\n           } catch (error) {\n             console.error(`  ❌ 更新输入节点失败: ${nodeKey}`, error);\n           }\n         }\n"
                },
                {
                    "date": 1752820416034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,14 @@\n               SET node_id = ?, node_order = ?, updated_at = NOW()\n               WHERE workflow_type = ? AND node_type = 'output' AND node_key = ?\n             `, [outputNode.nodeId, outputNode.order, workflowType, outputNode.key]);\n             console.log(`  ✅ 输出节点更新结果:`, result);\n-            updateCount++;\n+            console.log(`  📊 影响行数: ${result.affectedRows}, 改变行数: ${result.changedRows}`);\n+            if (result.affectedRows > 0) {\n+              updateCount++;\n+            } else {\n+              console.log(`  ⚠️ 没有找到匹配的记录: ${workflowType}/${outputNode.key}`);\n+            }\n           } catch (error) {\n             console.error(`  ❌ 更新输出节点失败: ${outputNode.key}`, error);\n           }\n         }\n"
                },
                {
                    "date": 1752820471722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,14 @@\n                 updated_at = NOW()\n             WHERE workflow_type = ?\n           `, [config.name, config.description, config.enabled, workflowType]);\n           console.log(`✅ 工作流基础信息更新结果:`, result);\n-          updateCount++;\n+          console.log(`📊 影响行数: ${result.affectedRows}, 改变行数: ${result.changedRows}`);\n+          if (result.affectedRows > 0) {\n+            updateCount++;\n+          } else {\n+            console.log(`⚠️ 没有找到匹配的工作流: ${workflowType}`);\n+          }\n         } catch (error) {\n           console.error(`❌ 更新工作流基础信息失败: ${workflowType}`, error);\n         }\n       }\n"
                },
                {
                    "date": 1752823587392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,16 +247,40 @@\n       // 更新工作流基础信息\n       if (config.name || config.description || config.enabled !== undefined) {\n         console.log(`📝 更新工作流基础信息: ${workflowType}`);\n         try {\n-          const result = await query(`\n-            UPDATE workflow_info\n-            SET workflow_name = COALESCE(?, workflow_name),\n-                description = COALESCE(?, description),\n-                is_enabled = COALESCE(?, is_enabled),\n-                updated_at = NOW()\n-            WHERE workflow_type = ?\n-          `, [config.name, config.description, config.enabled, workflowType]);\n+          // 构建动态更新语句，只更新提供的字段\n+          const updateFields = [];\n+          const updateValues = [];\n+\n+          if (config.name !== undefined) {\n+            updateFields.push('workflow_name = ?');\n+            updateValues.push(config.name);\n+          }\n+\n+          if (config.description !== undefined) {\n+            updateFields.push('description = ?');\n+            updateValues.push(config.description);\n+          }\n+\n+          if (config.enabled !== undefined) {\n+            updateFields.push('is_enabled = ?');\n+            updateValues.push(config.enabled);\n+          }\n+\n+          if (updateFields.length === 0) {\n+            console.log(`⚠️ 没有需要更新的工作流基础信息字段: ${workflowType}`);\n+            continue;\n+          }\n+\n+          updateFields.push('updated_at = NOW()');\n+          updateValues.push(workflowType);\n+\n+          const sql = `UPDATE workflow_info SET ${updateFields.join(', ')} WHERE workflow_type = ?`;\n+          console.log(`📝 执行SQL: ${sql}`);\n+          console.log(`📊 参数: [${updateValues.join(', ')}]`);\n+\n+          const result = await query(sql, updateValues);\n           console.log(`✅ 工作流基础信息更新结果:`, result);\n           console.log(`📊 影响行数: ${result.affectedRows}, 改变行数: ${result.changedRows}`);\n           if (result.affectedRows > 0) {\n             updateCount++;\n"
                },
                {
                    "date": 1752824215753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -357,5 +357,96 @@\n     });\n   }\n });\n \n+// 获取启用的功能列表（用于首页显示）\n+router.get('/features', async (req, res) => {\n+  try {\n+    console.log('📥 获取启用的功能列表...');\n+\n+    // 获取启用的工作流\n+    const enabledWorkflows = await query(`\n+      SELECT workflow_type, workflow_name, is_enabled\n+      FROM workflow_info\n+      WHERE is_enabled = TRUE\n+      ORDER BY workflow_type\n+    `);\n+\n+    // 功能映射配置\n+    const featureMapping = {\n+      'undress': {\n+        id: 'clothes-swap',\n+        title: '一键褪衣',\n+        description: '智能识别人物轮廓，快速移除照片中的服装，体验前沿AI技术',\n+        route: '/clothes-swap',\n+        icon: {\n+          type: 'custom',\n+          component: 'UndressWomanIcon',\n+          size: 28,\n+          color: '#667eea'\n+        },\n+        iconClass: 'undress-icon',\n+        tags: [\n+          { text: 'AI识别', type: 'primary' },\n+          { text: '快速处理', type: 'success' }\n+        ],\n+        requireLogin: true,\n+        order: 1,\n+        category: 'image-processing',\n+        pointsCost: 20\n+      },\n+      'faceswap': {\n+        id: 'face-swap',\n+        title: '极速换脸',\n+        description: '精准面部识别技术，实现自然的人脸替换效果，创造有趣内容',\n+        route: '/face-swap',\n+        icon: {\n+          type: 'custom',\n+          component: 'FaceSwapIcon',\n+          size: 28,\n+          color: '#f093fb'\n+        },\n+        iconClass: 'faceswap-icon',\n+        tags: [\n+          { text: '面部识别', type: 'warning' },\n+          { text: '自然效果', type: 'primary' }\n+        ],\n+        requireLogin: true,\n+        order: 2,\n+        category: 'image-processing',\n+        pointsCost: 20\n+      }\n+    };\n+\n+    // 根据启用的工作流生成功能列表\n+    const enabledFeatures = enabledWorkflows\n+      .map(workflow => {\n+        const feature = featureMapping[workflow.workflow_type];\n+        if (feature) {\n+          return {\n+            ...feature,\n+            enabled: Boolean(workflow.is_enabled),\n+            workflowName: workflow.workflow_name\n+          };\n+        }\n+        return null;\n+      })\n+      .filter(feature => feature !== null)\n+      .sort((a, b) => a.order - b.order);\n+\n+    console.log(`✅ 返回 ${enabledFeatures.length} 个启用的功能`);\n+\n+    res.json({\n+      success: true,\n+      data: enabledFeatures\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 获取功能列表失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '获取功能列表失败: ' + error.message\n+    });\n+  }\n+});\n+\n module.exports = router;\n"
                },
                {
                    "date": 1752829434348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,13 @@\n       const workflow = result[config.workflow_type];\n       if (!workflow) return;\n \n       if (config.node_type === 'input') {\n-        workflow.inputNodes[config.node_key] = {\n-          nodeId: config.node_id,\n+        // 为了与公开API保持一致，直接使用node_id作为值\n+        workflow.inputNodes[config.node_key] = config.node_id;\n+        // 额外信息存储在metadata中\n+        if (!workflow.metadata) workflow.metadata = { inputNodes: {}, outputNodes: {} };\n+        workflow.metadata.inputNodes[config.node_key] = {\n           description: config.description,\n           enabled: config.is_enabled\n         };\n       } else if (config.node_type === 'output') {\n"
                },
                {
                    "date": 1752836046760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,9 +363,12 @@\n \n // 获取启用的功能列表（用于首页显示）\n router.get('/features', async (req, res) => {\n   try {\n-    console.log('📥 获取启用的功能列表...');\n+    // 简化日志输出\n+    if (process.env.NODE_ENV === 'development') {\n+      console.log('📥 获取启用的功能列表...');\n+    }\n \n     // 获取启用的工作流\n     const enabledWorkflows = await query(`\n       SELECT workflow_type, workflow_name, is_enabled\n"
                }
            ],
            "date": 1752813382472,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { query } = require('../config/database');\nconst { adminAuth } = require('../middleware/adminAuth');\n\n// 获取所有工作流配置（管理员用）\nrouter.get('/', adminAuth, async (req, res) => {\n  try {\n    console.log('📥 获取工作流配置...');\n\n    // 获取工作流基础信息\n    const workflowInfos = await query(`\n      SELECT workflow_type, workflow_name, description, file_path, is_enabled\n      FROM workflow_info\n      ORDER BY workflow_type\n    `);\n\n    // 获取节点配置\n    const nodeConfigs = await query(`\n      SELECT workflow_type, node_type, node_key, node_id, node_order, description, is_enabled\n      FROM workflow_configs\n      ORDER BY workflow_type, node_type, node_order\n    `);\n\n    // 组织数据结构\n    const result = {};\n\n    workflowInfos.forEach(info => {\n      result[info.workflow_type] = {\n        name: info.workflow_name,\n        description: info.description,\n        filePath: info.file_path,\n        enabled: info.is_enabled,\n        inputNodes: {},\n        outputNodes: []\n      };\n    });\n\n    nodeConfigs.forEach(config => {\n      const workflow = result[config.workflow_type];\n      if (!workflow) return;\n\n      if (config.node_type === 'input') {\n        workflow.inputNodes[config.node_key] = {\n          nodeId: config.node_id,\n          description: config.description,\n          enabled: config.is_enabled\n        };\n      } else if (config.node_type === 'output') {\n        workflow.outputNodes.push({\n          key: config.node_key,\n          nodeId: config.node_id,\n          order: config.node_order,\n          description: config.description,\n          enabled: config.is_enabled\n        });\n      }\n    });\n\n    console.log(`📊 返回 ${Object.keys(result).length} 个工作流配置`);\n\n    res.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    console.error('❌ 获取工作流配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取工作流配置失败: ' + error.message\n    });\n  }\n});\n\n// 获取公开的工作流配置（前端用）\nrouter.get('/public', async (req, res) => {\n  try {\n    console.log('📥 获取公开工作流配置...');\n\n    // 只获取启用的工作流和节点\n    const workflowInfos = await query(`\n      SELECT workflow_type, workflow_name, is_enabled\n      FROM workflow_info\n      WHERE is_enabled = TRUE\n      ORDER BY workflow_type\n    `);\n\n    const nodeConfigs = await query(`\n      SELECT workflow_type, node_type, node_key, node_id, node_order\n      FROM workflow_configs\n      WHERE is_enabled = TRUE\n      ORDER BY workflow_type, node_type, node_order\n    `);\n\n    // 组织数据结构\n    const result = {};\n\n    workflowInfos.forEach(info => {\n      result[info.workflow_type] = {\n        name: info.workflow_name,\n        enabled: info.is_enabled,\n        inputNodes: {},\n        outputNodes: []\n      };\n    });\n\n    nodeConfigs.forEach(config => {\n      const workflow = result[config.workflow_type];\n      if (!workflow) return;\n\n      if (config.node_type === 'input') {\n        workflow.inputNodes[config.node_key] = config.node_id;\n      } else if (config.node_type === 'output') {\n        workflow.outputNodes.push({\n          key: config.node_key,\n          nodeId: config.node_id,\n          order: config.node_order\n        });\n      }\n    });\n\n    // 对输出节点按优先级排序\n    Object.values(result).forEach(workflow => {\n      workflow.outputNodes.sort((a, b) => a.order - b.order);\n    });\n\n    console.log(`📊 返回 ${Object.keys(result).length} 个公开工作流配置`);\n\n    res.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    console.error('❌ 获取公开工作流配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取公开工作流配置失败: ' + error.message\n    });\n  }\n});\n\n// 更新工作流基础信息\nrouter.put('/info/:workflowType', adminAuth, async (req, res) => {\n  try {\n    const { workflowType } = req.params;\n    const { workflow_name, description, file_path, is_enabled } = req.body;\n\n    console.log(`📝 更新工作流信息: ${workflowType}`);\n\n    await query(`\n      UPDATE workflow_info\n      SET workflow_name = ?, description = ?, file_path = ?, is_enabled = ?, updated_at = CURRENT_TIMESTAMP\n      WHERE workflow_type = ?\n    `, [workflow_name, description, file_path, is_enabled, workflowType]);\n\n    res.json({\n      success: true,\n      message: '工作流信息更新成功'\n    });\n\n  } catch (error) {\n    console.error('❌ 更新工作流信息失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '更新工作流信息失败: ' + error.message\n    });\n  }\n});\n\n// 更新节点配置\nrouter.put('/nodes/:workflowType', adminAuth, async (req, res) => {\n  try {\n    const { workflowType } = req.params;\n    const { inputNodes, outputNodes } = req.body;\n\n    console.log(`📝 更新节点配置: ${workflowType}`);\n\n    // 开始事务\n    await query('START TRANSACTION');\n\n    try {\n      // 更新输入节点\n      if (inputNodes) {\n        for (const [nodeKey, nodeId] of Object.entries(inputNodes)) {\n          await query(`\n            UPDATE workflow_configs\n            SET node_id = ?, updated_at = CURRENT_TIMESTAMP\n            WHERE workflow_type = ? AND node_type = 'input' AND node_key = ?\n          `, [nodeId, workflowType, nodeKey]);\n        }\n      }\n\n      // 更新输出节点\n      if (outputNodes) {\n        for (const outputNode of outputNodes) {\n          await query(`\n            UPDATE workflow_configs\n            SET node_id = ?, node_order = ?, updated_at = CURRENT_TIMESTAMP\n            WHERE workflow_type = ? AND node_type = 'output' AND node_key = ?\n          `, [outputNode.nodeId, outputNode.order, workflowType, outputNode.key]);\n        }\n      }\n\n      await query('COMMIT');\n\n      res.json({\n        success: true,\n        message: '节点配置更新成功'\n      });\n\n    } catch (error) {\n      await query('ROLLBACK');\n      throw error;\n    }\n\n  } catch (error) {\n    console.error('❌ 更新节点配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '更新节点配置失败: ' + error.message\n    });\n  }\n});\n\n// 批量更新工作流配置\nrouter.post('/batch-update', adminAuth, async (req, res) => {\n  try {\n    const { workflows } = req.body;\n\n    console.log('📝 批量更新工作流配置...');\n\n    // 开始事务\n    await query('START TRANSACTION');\n\n    try {\n      for (const [workflowType, config] of Object.entries(workflows)) {\n        // 更新工作流基础信息\n        if (config.name || config.description || config.enabled !== undefined) {\n          await query(`\n            UPDATE workflow_info\n            SET workflow_name = COALESCE(?, workflow_name),\n                description = COALESCE(?, description),\n                is_enabled = COALESCE(?, is_enabled),\n                updated_at = CURRENT_TIMESTAMP\n            WHERE workflow_type = ?\n          `, [config.name, config.description, config.enabled, workflowType]);\n        }\n\n        // 更新输入节点\n        if (config.inputNodes) {\n          for (const [nodeKey, nodeId] of Object.entries(config.inputNodes)) {\n            await query(`\n              UPDATE workflow_configs\n              SET node_id = ?, updated_at = CURRENT_TIMESTAMP\n              WHERE workflow_type = ? AND node_type = 'input' AND node_key = ?\n            `, [nodeId, workflowType, nodeKey]);\n          }\n        }\n\n        // 更新输出节点\n        if (config.outputNodes) {\n          for (const outputNode of config.outputNodes) {\n            await query(`\n              UPDATE workflow_configs\n              SET node_id = ?, node_order = ?, updated_at = CURRENT_TIMESTAMP\n              WHERE workflow_type = ? AND node_type = 'output' AND node_key = ?\n            `, [outputNode.nodeId, outputNode.order, workflowType, outputNode.key]);\n          }\n        }\n      }\n\n      await query('COMMIT');\n\n      res.json({\n        success: true,\n        message: '批量更新成功'\n      });\n\n    } catch (error) {\n      await query('ROLLBACK');\n      throw error;\n    }\n\n  } catch (error) {\n    console.error('❌ 批量更新失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '批量更新失败: ' + error.message\n    });\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}