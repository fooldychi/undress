{
    "sourceFile": "server/src/routes/images.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752331689147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752331739003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,8 +224,221 @@\n     next(error);\n   }\n });\n \n+// 执行ComfyUI图像处理任务（使用负载均衡）\n+router.post('/process-comfyui', authenticateToken, async (req, res, next) => {\n+  try {\n+    const { taskId, workflow } = req.body;\n+\n+    // 验证任务ID\n+    if (!taskId) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供任务ID'\n+      });\n+    }\n+\n+    // 验证工作流\n+    if (!workflow) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供ComfyUI工作流'\n+      });\n+    }\n+\n+    // 验证任务是否属于当前用户\n+    const tasks = await query(\n+      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n+      [taskId, req.user.id]\n+    );\n+\n+    if (tasks.length === 0) {\n+      return res.status(404).json({\n+        success: false,\n+        message: '任务不存在或无权限访问'\n+      });\n+    }\n+\n+    const task = tasks[0];\n+\n+    // 检查任务状态\n+    if (task.status !== 'pending') {\n+      return res.status(400).json({\n+        success: false,\n+        message: `任务状态为${task.status}，无法执行`\n+      });\n+    }\n+\n+    console.log(`🎯 开始执行ComfyUI任务: ${taskId}, 类型: ${task.type}`);\n+\n+    // 选择最优服务器\n+    const selectedServer = await selectBestServer();\n+    console.log(`✅ 选择服务器: ${selectedServer}`);\n+\n+    // 更新任务状态为处理中\n+    await query(\n+      'UPDATE processing_tasks SET status = ?, server_url = ?, updated_at = NOW() WHERE id = ?',\n+      ['processing', selectedServer, taskId]\n+    );\n+\n+    try {\n+      // 发送工作流到ComfyUI服务器\n+      const promptResult = await comfyUIRequest('/prompt', {\n+        method: 'POST',\n+        body: JSON.stringify({\n+          prompt: workflow,\n+          client_id: `ai-magic-${taskId}`\n+        })\n+      });\n+\n+      console.log(`✅ ComfyUI任务提交成功: ${JSON.stringify(promptResult)}`);\n+\n+      // 更新任务状态和prompt_id\n+      await query(\n+        'UPDATE processing_tasks SET prompt_id = ?, progress = ?, updated_at = NOW() WHERE id = ?',\n+        [promptResult.prompt_id, 10, taskId]\n+      );\n+\n+      res.json({\n+        success: true,\n+        message: 'ComfyUI任务提交成功',\n+        data: {\n+          taskId,\n+          promptId: promptResult.prompt_id,\n+          selectedServer,\n+          status: 'processing'\n+        }\n+      });\n+\n+    } catch (comfyError) {\n+      console.error(`❌ ComfyUI任务执行失败: ${comfyError.message}`);\n+\n+      // 更新任务状态为失败\n+      await query(\n+        'UPDATE processing_tasks SET status = ?, error_message = ?, updated_at = NOW() WHERE id = ?',\n+        ['failed', comfyError.message, taskId]\n+      );\n+\n+      throw comfyError;\n+    }\n+\n+  } catch (error) {\n+    console.error('❌ 处理ComfyUI任务失败:', error);\n+    next(error);\n+  }\n+});\n+\n+// 检查ComfyUI任务状态\n+router.get('/check-comfyui/:taskId', authenticateToken, async (req, res, next) => {\n+  try {\n+    const { taskId } = req.params;\n+\n+    // 获取任务信息\n+    const tasks = await query(\n+      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n+      [taskId, req.user.id]\n+    );\n+\n+    if (tasks.length === 0) {\n+      return res.status(404).json({\n+        success: false,\n+        message: '任务不存在'\n+      });\n+    }\n+\n+    const task = tasks[0];\n+\n+    if (!task.prompt_id) {\n+      return res.json({\n+        success: true,\n+        data: {\n+          status: task.status,\n+          progress: task.progress || 0,\n+          message: '任务尚未提交到ComfyUI'\n+        }\n+      });\n+    }\n+\n+    try {\n+      // 检查ComfyUI队列状态\n+      const queueStatus = await comfyUIRequest('/queue');\n+\n+      // 检查任务是否在运行队列中\n+      const isRunning = queueStatus.queue_running?.some(item =>\n+        item[1] === task.prompt_id\n+      );\n+\n+      // 检查任务是否在等待队列中\n+      const isPending = queueStatus.queue_pending?.some(item =>\n+        item[1] === task.prompt_id\n+      );\n+\n+      let status = task.status;\n+      let progress = task.progress || 0;\n+\n+      if (isRunning) {\n+        status = 'processing';\n+        progress = Math.max(progress, 50); // 运行中至少50%进度\n+      } else if (isPending) {\n+        status = 'pending';\n+        progress = Math.max(progress, 10); // 等待中至少10%进度\n+      } else if (task.status === 'processing') {\n+        // 不在队列中且之前是处理中状态，可能已完成或失败\n+        try {\n+          // 尝试获取历史记录\n+          const historyResult = await comfyUIRequest(`/history/${task.prompt_id}`);\n+\n+          if (historyResult && Object.keys(historyResult).length > 0) {\n+            status = 'completed';\n+            progress = 100;\n+\n+            // 更新任务状态\n+            await query(\n+              'UPDATE processing_tasks SET status = ?, progress = ?, completed_at = NOW(), updated_at = NOW() WHERE id = ?',\n+              [status, progress, taskId]\n+            );\n+          }\n+        } catch (historyError) {\n+          console.warn(`⚠️ 获取任务历史失败: ${historyError.message}`);\n+        }\n+      }\n+\n+      res.json({\n+        success: true,\n+        data: {\n+          taskId,\n+          promptId: task.prompt_id,\n+          status,\n+          progress,\n+          serverUrl: task.server_url,\n+          isRunning,\n+          isPending,\n+          queuePosition: isPending ?\n+            queueStatus.queue_pending?.findIndex(item => item[1] === task.prompt_id) + 1 :\n+            null\n+        }\n+      });\n+\n+    } catch (comfyError) {\n+      console.error(`❌ 检查ComfyUI任务状态失败: ${comfyError.message}`);\n+\n+      res.json({\n+        success: true,\n+        data: {\n+          status: task.status,\n+          progress: task.progress || 0,\n+          error: comfyError.message,\n+          message: '无法连接到ComfyUI服务器'\n+        }\n+      });\n+    }\n+\n+  } catch (error) {\n+    next(error);\n+  }\n+});\n+\n // 获取处理任务列表\n router.get('/tasks', authenticateToken, async (req, res, next) => {\n   try {\n     const page = parseInt(req.query.page) || 1;\n"
                },
                {
                    "date": 1752332665040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n const fs = require('fs').promises;\n const Joi = require('joi');\n const { query } = require('../config/database');\n const { authenticateToken, optionalAuth } = require('../middleware/auth');\n-const { comfyUIRequest, selectBestServer } = require('../utils/comfyUIRequest');\n \n const router = express.Router();\n \n // 确保上传目录存在\n@@ -63,9 +62,9 @@\n     }\n \n     // 保存图片信息到数据库\n     const result = await query(\n-      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n+      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n        VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n       [\n         req.user.id,\n         req.file.filename,\n@@ -112,9 +111,9 @@\n \n     // 批量保存图片信息\n     for (const file of req.files) {\n       const result = await query(\n-        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n+        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n          VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n         [\n           req.user.id,\n           file.filename,\n@@ -176,9 +175,9 @@\n     }\n \n     // 验证图片是否属于当前用户\n     const images = await query(\n-      `SELECT id, filename, file_path FROM images\n+      `SELECT id, filename, file_path FROM images \n        WHERE id IN (${imageIds.map(() => '?').join(',')}) AND user_id = ?`,\n       [...imageIds, req.user.id]\n     );\n \n@@ -190,9 +189,9 @@\n     }\n \n     // 创建处理任务\n     const taskResult = await query(\n-      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at)\n+      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at) \n        VALUES (?, ?, ?, ?, ?, NOW())`,\n       [req.user.id, type, 'pending', prompt || null, JSON.stringify(settings || {})]\n     );\n \n@@ -224,221 +223,8 @@\n     next(error);\n   }\n });\n \n-// 执行ComfyUI图像处理任务（使用负载均衡）\n-router.post('/process-comfyui', authenticateToken, async (req, res, next) => {\n-  try {\n-    const { taskId, workflow } = req.body;\n-\n-    // 验证任务ID\n-    if (!taskId) {\n-      return res.status(400).json({\n-        success: false,\n-        message: '请提供任务ID'\n-      });\n-    }\n-\n-    // 验证工作流\n-    if (!workflow) {\n-      return res.status(400).json({\n-        success: false,\n-        message: '请提供ComfyUI工作流'\n-      });\n-    }\n-\n-    // 验证任务是否属于当前用户\n-    const tasks = await query(\n-      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n-      [taskId, req.user.id]\n-    );\n-\n-    if (tasks.length === 0) {\n-      return res.status(404).json({\n-        success: false,\n-        message: '任务不存在或无权限访问'\n-      });\n-    }\n-\n-    const task = tasks[0];\n-\n-    // 检查任务状态\n-    if (task.status !== 'pending') {\n-      return res.status(400).json({\n-        success: false,\n-        message: `任务状态为${task.status}，无法执行`\n-      });\n-    }\n-\n-    console.log(`🎯 开始执行ComfyUI任务: ${taskId}, 类型: ${task.type}`);\n-\n-    // 选择最优服务器\n-    const selectedServer = await selectBestServer();\n-    console.log(`✅ 选择服务器: ${selectedServer}`);\n-\n-    // 更新任务状态为处理中\n-    await query(\n-      'UPDATE processing_tasks SET status = ?, server_url = ?, updated_at = NOW() WHERE id = ?',\n-      ['processing', selectedServer, taskId]\n-    );\n-\n-    try {\n-      // 发送工作流到ComfyUI服务器\n-      const promptResult = await comfyUIRequest('/prompt', {\n-        method: 'POST',\n-        body: JSON.stringify({\n-          prompt: workflow,\n-          client_id: `ai-magic-${taskId}`\n-        })\n-      });\n-\n-      console.log(`✅ ComfyUI任务提交成功: ${JSON.stringify(promptResult)}`);\n-\n-      // 更新任务状态和prompt_id\n-      await query(\n-        'UPDATE processing_tasks SET prompt_id = ?, progress = ?, updated_at = NOW() WHERE id = ?',\n-        [promptResult.prompt_id, 10, taskId]\n-      );\n-\n-      res.json({\n-        success: true,\n-        message: 'ComfyUI任务提交成功',\n-        data: {\n-          taskId,\n-          promptId: promptResult.prompt_id,\n-          selectedServer,\n-          status: 'processing'\n-        }\n-      });\n-\n-    } catch (comfyError) {\n-      console.error(`❌ ComfyUI任务执行失败: ${comfyError.message}`);\n-\n-      // 更新任务状态为失败\n-      await query(\n-        'UPDATE processing_tasks SET status = ?, error_message = ?, updated_at = NOW() WHERE id = ?',\n-        ['failed', comfyError.message, taskId]\n-      );\n-\n-      throw comfyError;\n-    }\n-\n-  } catch (error) {\n-    console.error('❌ 处理ComfyUI任务失败:', error);\n-    next(error);\n-  }\n-});\n-\n-// 检查ComfyUI任务状态\n-router.get('/check-comfyui/:taskId', authenticateToken, async (req, res, next) => {\n-  try {\n-    const { taskId } = req.params;\n-\n-    // 获取任务信息\n-    const tasks = await query(\n-      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n-      [taskId, req.user.id]\n-    );\n-\n-    if (tasks.length === 0) {\n-      return res.status(404).json({\n-        success: false,\n-        message: '任务不存在'\n-      });\n-    }\n-\n-    const task = tasks[0];\n-\n-    if (!task.prompt_id) {\n-      return res.json({\n-        success: true,\n-        data: {\n-          status: task.status,\n-          progress: task.progress || 0,\n-          message: '任务尚未提交到ComfyUI'\n-        }\n-      });\n-    }\n-\n-    try {\n-      // 检查ComfyUI队列状态\n-      const queueStatus = await comfyUIRequest('/queue');\n-\n-      // 检查任务是否在运行队列中\n-      const isRunning = queueStatus.queue_running?.some(item =>\n-        item[1] === task.prompt_id\n-      );\n-\n-      // 检查任务是否在等待队列中\n-      const isPending = queueStatus.queue_pending?.some(item =>\n-        item[1] === task.prompt_id\n-      );\n-\n-      let status = task.status;\n-      let progress = task.progress || 0;\n-\n-      if (isRunning) {\n-        status = 'processing';\n-        progress = Math.max(progress, 50); // 运行中至少50%进度\n-      } else if (isPending) {\n-        status = 'pending';\n-        progress = Math.max(progress, 10); // 等待中至少10%进度\n-      } else if (task.status === 'processing') {\n-        // 不在队列中且之前是处理中状态，可能已完成或失败\n-        try {\n-          // 尝试获取历史记录\n-          const historyResult = await comfyUIRequest(`/history/${task.prompt_id}`);\n-\n-          if (historyResult && Object.keys(historyResult).length > 0) {\n-            status = 'completed';\n-            progress = 100;\n-\n-            // 更新任务状态\n-            await query(\n-              'UPDATE processing_tasks SET status = ?, progress = ?, completed_at = NOW(), updated_at = NOW() WHERE id = ?',\n-              [status, progress, taskId]\n-            );\n-          }\n-        } catch (historyError) {\n-          console.warn(`⚠️ 获取任务历史失败: ${historyError.message}`);\n-        }\n-      }\n-\n-      res.json({\n-        success: true,\n-        data: {\n-          taskId,\n-          promptId: task.prompt_id,\n-          status,\n-          progress,\n-          serverUrl: task.server_url,\n-          isRunning,\n-          isPending,\n-          queuePosition: isPending ?\n-            queueStatus.queue_pending?.findIndex(item => item[1] === task.prompt_id) + 1 :\n-            null\n-        }\n-      });\n-\n-    } catch (comfyError) {\n-      console.error(`❌ 检查ComfyUI任务状态失败: ${comfyError.message}`);\n-\n-      res.json({\n-        success: true,\n-        data: {\n-          status: task.status,\n-          progress: task.progress || 0,\n-          error: comfyError.message,\n-          message: '无法连接到ComfyUI服务器'\n-        }\n-      });\n-    }\n-\n-  } catch (error) {\n-    next(error);\n-  }\n-});\n-\n // 获取处理任务列表\n router.get('/tasks', authenticateToken, async (req, res, next) => {\n   try {\n     const page = parseInt(req.query.page) || 1;\n@@ -454,11 +240,11 @@\n \n     // 获取任务列表\n     const tasks = await query(\n       `SELECT id, type, status, prompt, progress, created_at, updated_at, completed_at\n-       FROM processing_tasks\n-       WHERE user_id = ?\n-       ORDER BY created_at DESC\n+       FROM processing_tasks \n+       WHERE user_id = ? \n+       ORDER BY created_at DESC \n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n@@ -485,9 +271,9 @@\n     const taskId = req.params.id;\n \n     // 获取任务信息\n     const tasks = await query(\n-      `SELECT * FROM processing_tasks\n+      `SELECT * FROM processing_tasks \n        WHERE id = ? AND user_id = ?`,\n       [taskId, req.user.id]\n     );\n \n@@ -546,11 +332,11 @@\n \n     // 获取图片列表\n     const images = await query(\n       `SELECT id, filename, original_name, file_size, mime_type, created_at\n-       FROM images\n-       WHERE user_id = ?\n-       ORDER BY created_at DESC\n+       FROM images \n+       WHERE user_id = ? \n+       ORDER BY created_at DESC \n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n"
                },
                {
                    "date": 1752332713894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n const fs = require('fs').promises;\n const Joi = require('joi');\n const { query } = require('../config/database');\n const { authenticateToken, optionalAuth } = require('../middleware/auth');\n+const { comfyUIRequest, selectBestServer } = require('../utils/comfyUIRequest');\n \n const router = express.Router();\n \n // 确保上传目录存在\n@@ -62,9 +63,9 @@\n     }\n \n     // 保存图片信息到数据库\n     const result = await query(\n-      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n+      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n       [\n         req.user.id,\n         req.file.filename,\n@@ -111,9 +112,9 @@\n \n     // 批量保存图片信息\n     for (const file of req.files) {\n       const result = await query(\n-        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n+        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n          VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n         [\n           req.user.id,\n           file.filename,\n@@ -175,9 +176,9 @@\n     }\n \n     // 验证图片是否属于当前用户\n     const images = await query(\n-      `SELECT id, filename, file_path FROM images \n+      `SELECT id, filename, file_path FROM images\n        WHERE id IN (${imageIds.map(() => '?').join(',')}) AND user_id = ?`,\n       [...imageIds, req.user.id]\n     );\n \n@@ -189,9 +190,9 @@\n     }\n \n     // 创建处理任务\n     const taskResult = await query(\n-      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at) \n+      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at)\n        VALUES (?, ?, ?, ?, ?, NOW())`,\n       [req.user.id, type, 'pending', prompt || null, JSON.stringify(settings || {})]\n     );\n \n@@ -223,8 +224,221 @@\n     next(error);\n   }\n });\n \n+// 执行ComfyUI图像处理任务（使用负载均衡）\n+router.post('/process-comfyui', authenticateToken, async (req, res, next) => {\n+  try {\n+    const { taskId, workflow } = req.body;\n+\n+    // 验证任务ID\n+    if (!taskId) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供任务ID'\n+      });\n+    }\n+\n+    // 验证工作流\n+    if (!workflow) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供ComfyUI工作流'\n+      });\n+    }\n+\n+    // 验证任务是否属于当前用户\n+    const tasks = await query(\n+      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n+      [taskId, req.user.id]\n+    );\n+\n+    if (tasks.length === 0) {\n+      return res.status(404).json({\n+        success: false,\n+        message: '任务不存在或无权限访问'\n+      });\n+    }\n+\n+    const task = tasks[0];\n+\n+    // 检查任务状态\n+    if (task.status !== 'pending') {\n+      return res.status(400).json({\n+        success: false,\n+        message: `任务状态为${task.status}，无法执行`\n+      });\n+    }\n+\n+    console.log(`🎯 开始执行ComfyUI任务: ${taskId}, 类型: ${task.type}`);\n+\n+    // 选择最优服务器\n+    const selectedServer = await selectBestServer();\n+    console.log(`✅ 选择服务器: ${selectedServer}`);\n+\n+    // 更新任务状态为处理中\n+    await query(\n+      'UPDATE processing_tasks SET status = ?, server_url = ?, updated_at = NOW() WHERE id = ?',\n+      ['processing', selectedServer, taskId]\n+    );\n+\n+    try {\n+      // 发送工作流到ComfyUI服务器\n+      const promptResult = await comfyUIRequest('/prompt', {\n+        method: 'POST',\n+        body: JSON.stringify({\n+          prompt: workflow,\n+          client_id: `ai-magic-${taskId}`\n+        })\n+      });\n+\n+      console.log(`✅ ComfyUI任务提交成功: ${JSON.stringify(promptResult)}`);\n+\n+      // 更新任务状态和prompt_id\n+      await query(\n+        'UPDATE processing_tasks SET prompt_id = ?, progress = ?, updated_at = NOW() WHERE id = ?',\n+        [promptResult.prompt_id, 10, taskId]\n+      );\n+\n+      res.json({\n+        success: true,\n+        message: 'ComfyUI任务提交成功',\n+        data: {\n+          taskId,\n+          promptId: promptResult.prompt_id,\n+          selectedServer,\n+          status: 'processing'\n+        }\n+      });\n+\n+    } catch (comfyError) {\n+      console.error(`❌ ComfyUI任务执行失败: ${comfyError.message}`);\n+\n+      // 更新任务状态为失败\n+      await query(\n+        'UPDATE processing_tasks SET status = ?, error_message = ?, updated_at = NOW() WHERE id = ?',\n+        ['failed', comfyError.message, taskId]\n+      );\n+\n+      throw comfyError;\n+    }\n+\n+  } catch (error) {\n+    console.error('❌ 处理ComfyUI任务失败:', error);\n+    next(error);\n+  }\n+});\n+\n+// 检查ComfyUI任务状态\n+router.get('/check-comfyui/:taskId', authenticateToken, async (req, res, next) => {\n+  try {\n+    const { taskId } = req.params;\n+\n+    // 获取任务信息\n+    const tasks = await query(\n+      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n+      [taskId, req.user.id]\n+    );\n+\n+    if (tasks.length === 0) {\n+      return res.status(404).json({\n+        success: false,\n+        message: '任务不存在'\n+      });\n+    }\n+\n+    const task = tasks[0];\n+\n+    if (!task.prompt_id) {\n+      return res.json({\n+        success: true,\n+        data: {\n+          status: task.status,\n+          progress: task.progress || 0,\n+          message: '任务尚未提交到ComfyUI'\n+        }\n+      });\n+    }\n+\n+    try {\n+      // 检查ComfyUI队列状态\n+      const queueStatus = await comfyUIRequest('/queue');\n+\n+      // 检查任务是否在运行队列中\n+      const isRunning = queueStatus.queue_running?.some(item =>\n+        item[1] === task.prompt_id\n+      );\n+\n+      // 检查任务是否在等待队列中\n+      const isPending = queueStatus.queue_pending?.some(item =>\n+        item[1] === task.prompt_id\n+      );\n+\n+      let status = task.status;\n+      let progress = task.progress || 0;\n+\n+      if (isRunning) {\n+        status = 'processing';\n+        progress = Math.max(progress, 50); // 运行中至少50%进度\n+      } else if (isPending) {\n+        status = 'pending';\n+        progress = Math.max(progress, 10); // 等待中至少10%进度\n+      } else if (task.status === 'processing') {\n+        // 不在队列中且之前是处理中状态，可能已完成或失败\n+        try {\n+          // 尝试获取历史记录\n+          const historyResult = await comfyUIRequest(`/history/${task.prompt_id}`);\n+\n+          if (historyResult && Object.keys(historyResult).length > 0) {\n+            status = 'completed';\n+            progress = 100;\n+\n+            // 更新任务状态\n+            await query(\n+              'UPDATE processing_tasks SET status = ?, progress = ?, completed_at = NOW(), updated_at = NOW() WHERE id = ?',\n+              [status, progress, taskId]\n+            );\n+          }\n+        } catch (historyError) {\n+          console.warn(`⚠️ 获取任务历史失败: ${historyError.message}`);\n+        }\n+      }\n+\n+      res.json({\n+        success: true,\n+        data: {\n+          taskId,\n+          promptId: task.prompt_id,\n+          status,\n+          progress,\n+          serverUrl: task.server_url,\n+          isRunning,\n+          isPending,\n+          queuePosition: isPending ?\n+            queueStatus.queue_pending?.findIndex(item => item[1] === task.prompt_id) + 1 :\n+            null\n+        }\n+      });\n+\n+    } catch (comfyError) {\n+      console.error(`❌ 检查ComfyUI任务状态失败: ${comfyError.message}`);\n+\n+      res.json({\n+        success: true,\n+        data: {\n+          status: task.status,\n+          progress: task.progress || 0,\n+          error: comfyError.message,\n+          message: '无法连接到ComfyUI服务器'\n+        }\n+      });\n+    }\n+\n+  } catch (error) {\n+    next(error);\n+  }\n+});\n+\n // 获取处理任务列表\n router.get('/tasks', authenticateToken, async (req, res, next) => {\n   try {\n     const page = parseInt(req.query.page) || 1;\n@@ -240,11 +454,11 @@\n \n     // 获取任务列表\n     const tasks = await query(\n       `SELECT id, type, status, prompt, progress, created_at, updated_at, completed_at\n-       FROM processing_tasks \n-       WHERE user_id = ? \n-       ORDER BY created_at DESC \n+       FROM processing_tasks\n+       WHERE user_id = ?\n+       ORDER BY created_at DESC\n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n@@ -271,9 +485,9 @@\n     const taskId = req.params.id;\n \n     // 获取任务信息\n     const tasks = await query(\n-      `SELECT * FROM processing_tasks \n+      `SELECT * FROM processing_tasks\n        WHERE id = ? AND user_id = ?`,\n       [taskId, req.user.id]\n     );\n \n@@ -332,11 +546,11 @@\n \n     // 获取图片列表\n     const images = await query(\n       `SELECT id, filename, original_name, file_size, mime_type, created_at\n-       FROM images \n-       WHERE user_id = ? \n-       ORDER BY created_at DESC \n+       FROM images\n+       WHERE user_id = ?\n+       ORDER BY created_at DESC\n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n"
                },
                {
                    "date": 1752332764878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n const fs = require('fs').promises;\n const Joi = require('joi');\n const { query } = require('../config/database');\n const { authenticateToken, optionalAuth } = require('../middleware/auth');\n-const { comfyUIRequest, selectBestServer } = require('../utils/comfyUIRequest');\n \n const router = express.Router();\n \n // 确保上传目录存在\n@@ -63,9 +62,9 @@\n     }\n \n     // 保存图片信息到数据库\n     const result = await query(\n-      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n+      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n        VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n       [\n         req.user.id,\n         req.file.filename,\n@@ -112,9 +111,9 @@\n \n     // 批量保存图片信息\n     for (const file of req.files) {\n       const result = await query(\n-        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n+        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at) \n          VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n         [\n           req.user.id,\n           file.filename,\n@@ -176,9 +175,9 @@\n     }\n \n     // 验证图片是否属于当前用户\n     const images = await query(\n-      `SELECT id, filename, file_path FROM images\n+      `SELECT id, filename, file_path FROM images \n        WHERE id IN (${imageIds.map(() => '?').join(',')}) AND user_id = ?`,\n       [...imageIds, req.user.id]\n     );\n \n@@ -190,9 +189,9 @@\n     }\n \n     // 创建处理任务\n     const taskResult = await query(\n-      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at)\n+      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at) \n        VALUES (?, ?, ?, ?, ?, NOW())`,\n       [req.user.id, type, 'pending', prompt || null, JSON.stringify(settings || {})]\n     );\n \n@@ -224,221 +223,8 @@\n     next(error);\n   }\n });\n \n-// 执行ComfyUI图像处理任务（使用负载均衡）\n-router.post('/process-comfyui', authenticateToken, async (req, res, next) => {\n-  try {\n-    const { taskId, workflow } = req.body;\n-\n-    // 验证任务ID\n-    if (!taskId) {\n-      return res.status(400).json({\n-        success: false,\n-        message: '请提供任务ID'\n-      });\n-    }\n-\n-    // 验证工作流\n-    if (!workflow) {\n-      return res.status(400).json({\n-        success: false,\n-        message: '请提供ComfyUI工作流'\n-      });\n-    }\n-\n-    // 验证任务是否属于当前用户\n-    const tasks = await query(\n-      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n-      [taskId, req.user.id]\n-    );\n-\n-    if (tasks.length === 0) {\n-      return res.status(404).json({\n-        success: false,\n-        message: '任务不存在或无权限访问'\n-      });\n-    }\n-\n-    const task = tasks[0];\n-\n-    // 检查任务状态\n-    if (task.status !== 'pending') {\n-      return res.status(400).json({\n-        success: false,\n-        message: `任务状态为${task.status}，无法执行`\n-      });\n-    }\n-\n-    console.log(`🎯 开始执行ComfyUI任务: ${taskId}, 类型: ${task.type}`);\n-\n-    // 选择最优服务器\n-    const selectedServer = await selectBestServer();\n-    console.log(`✅ 选择服务器: ${selectedServer}`);\n-\n-    // 更新任务状态为处理中\n-    await query(\n-      'UPDATE processing_tasks SET status = ?, server_url = ?, updated_at = NOW() WHERE id = ?',\n-      ['processing', selectedServer, taskId]\n-    );\n-\n-    try {\n-      // 发送工作流到ComfyUI服务器\n-      const promptResult = await comfyUIRequest('/prompt', {\n-        method: 'POST',\n-        body: JSON.stringify({\n-          prompt: workflow,\n-          client_id: `ai-magic-${taskId}`\n-        })\n-      });\n-\n-      console.log(`✅ ComfyUI任务提交成功: ${JSON.stringify(promptResult)}`);\n-\n-      // 更新任务状态和prompt_id\n-      await query(\n-        'UPDATE processing_tasks SET prompt_id = ?, progress = ?, updated_at = NOW() WHERE id = ?',\n-        [promptResult.prompt_id, 10, taskId]\n-      );\n-\n-      res.json({\n-        success: true,\n-        message: 'ComfyUI任务提交成功',\n-        data: {\n-          taskId,\n-          promptId: promptResult.prompt_id,\n-          selectedServer,\n-          status: 'processing'\n-        }\n-      });\n-\n-    } catch (comfyError) {\n-      console.error(`❌ ComfyUI任务执行失败: ${comfyError.message}`);\n-\n-      // 更新任务状态为失败\n-      await query(\n-        'UPDATE processing_tasks SET status = ?, error_message = ?, updated_at = NOW() WHERE id = ?',\n-        ['failed', comfyError.message, taskId]\n-      );\n-\n-      throw comfyError;\n-    }\n-\n-  } catch (error) {\n-    console.error('❌ 处理ComfyUI任务失败:', error);\n-    next(error);\n-  }\n-});\n-\n-// 检查ComfyUI任务状态\n-router.get('/check-comfyui/:taskId', authenticateToken, async (req, res, next) => {\n-  try {\n-    const { taskId } = req.params;\n-\n-    // 获取任务信息\n-    const tasks = await query(\n-      'SELECT * FROM processing_tasks WHERE id = ? AND user_id = ?',\n-      [taskId, req.user.id]\n-    );\n-\n-    if (tasks.length === 0) {\n-      return res.status(404).json({\n-        success: false,\n-        message: '任务不存在'\n-      });\n-    }\n-\n-    const task = tasks[0];\n-\n-    if (!task.prompt_id) {\n-      return res.json({\n-        success: true,\n-        data: {\n-          status: task.status,\n-          progress: task.progress || 0,\n-          message: '任务尚未提交到ComfyUI'\n-        }\n-      });\n-    }\n-\n-    try {\n-      // 检查ComfyUI队列状态\n-      const queueStatus = await comfyUIRequest('/queue');\n-\n-      // 检查任务是否在运行队列中\n-      const isRunning = queueStatus.queue_running?.some(item =>\n-        item[1] === task.prompt_id\n-      );\n-\n-      // 检查任务是否在等待队列中\n-      const isPending = queueStatus.queue_pending?.some(item =>\n-        item[1] === task.prompt_id\n-      );\n-\n-      let status = task.status;\n-      let progress = task.progress || 0;\n-\n-      if (isRunning) {\n-        status = 'processing';\n-        progress = Math.max(progress, 50); // 运行中至少50%进度\n-      } else if (isPending) {\n-        status = 'pending';\n-        progress = Math.max(progress, 10); // 等待中至少10%进度\n-      } else if (task.status === 'processing') {\n-        // 不在队列中且之前是处理中状态，可能已完成或失败\n-        try {\n-          // 尝试获取历史记录\n-          const historyResult = await comfyUIRequest(`/history/${task.prompt_id}`);\n-\n-          if (historyResult && Object.keys(historyResult).length > 0) {\n-            status = 'completed';\n-            progress = 100;\n-\n-            // 更新任务状态\n-            await query(\n-              'UPDATE processing_tasks SET status = ?, progress = ?, completed_at = NOW(), updated_at = NOW() WHERE id = ?',\n-              [status, progress, taskId]\n-            );\n-          }\n-        } catch (historyError) {\n-          console.warn(`⚠️ 获取任务历史失败: ${historyError.message}`);\n-        }\n-      }\n-\n-      res.json({\n-        success: true,\n-        data: {\n-          taskId,\n-          promptId: task.prompt_id,\n-          status,\n-          progress,\n-          serverUrl: task.server_url,\n-          isRunning,\n-          isPending,\n-          queuePosition: isPending ?\n-            queueStatus.queue_pending?.findIndex(item => item[1] === task.prompt_id) + 1 :\n-            null\n-        }\n-      });\n-\n-    } catch (comfyError) {\n-      console.error(`❌ 检查ComfyUI任务状态失败: ${comfyError.message}`);\n-\n-      res.json({\n-        success: true,\n-        data: {\n-          status: task.status,\n-          progress: task.progress || 0,\n-          error: comfyError.message,\n-          message: '无法连接到ComfyUI服务器'\n-        }\n-      });\n-    }\n-\n-  } catch (error) {\n-    next(error);\n-  }\n-});\n-\n // 获取处理任务列表\n router.get('/tasks', authenticateToken, async (req, res, next) => {\n   try {\n     const page = parseInt(req.query.page) || 1;\n@@ -454,11 +240,11 @@\n \n     // 获取任务列表\n     const tasks = await query(\n       `SELECT id, type, status, prompt, progress, created_at, updated_at, completed_at\n-       FROM processing_tasks\n-       WHERE user_id = ?\n-       ORDER BY created_at DESC\n+       FROM processing_tasks \n+       WHERE user_id = ? \n+       ORDER BY created_at DESC \n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n@@ -485,9 +271,9 @@\n     const taskId = req.params.id;\n \n     // 获取任务信息\n     const tasks = await query(\n-      `SELECT * FROM processing_tasks\n+      `SELECT * FROM processing_tasks \n        WHERE id = ? AND user_id = ?`,\n       [taskId, req.user.id]\n     );\n \n@@ -546,11 +332,11 @@\n \n     // 获取图片列表\n     const images = await query(\n       `SELECT id, filename, original_name, file_size, mime_type, created_at\n-       FROM images\n-       WHERE user_id = ?\n-       ORDER BY created_at DESC\n+       FROM images \n+       WHERE user_id = ? \n+       ORDER BY created_at DESC \n        LIMIT ? OFFSET ?`,\n       [req.user.id, limit, offset]\n     );\n \n"
                }
            ],
            "date": 1752331689147,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst multer = require('multer');\nconst path = require('path');\nconst fs = require('fs').promises;\nconst Joi = require('joi');\nconst { query } = require('../config/database');\nconst { authenticateToken, optionalAuth } = require('../middleware/auth');\nconst { comfyUIRequest, selectBestServer } = require('../utils/comfyUIRequest');\n\nconst router = express.Router();\n\n// 确保上传目录存在\nconst uploadDir = 'uploads/images';\nfs.mkdir(uploadDir, { recursive: true }).catch(console.error);\n\n// 配置multer文件上传\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  // 只允许图片文件\n  if (file.mimetype.startsWith('image/')) {\n    cb(null, true);\n  } else {\n    cb(new Error('只允许上传图片文件'), false);\n  }\n};\n\nconst upload = multer({\n  storage,\n  fileFilter,\n  limits: {\n    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024 // 10MB\n  }\n});\n\n// 图像处理任务验证规则\nconst processImageSchema = Joi.object({\n  type: Joi.string().valid('undress', 'text-to-image', 'face-swap').required(),\n  prompt: Joi.string().when('type', {\n    is: 'text-to-image',\n    then: Joi.required(),\n    otherwise: Joi.optional()\n  }),\n  settings: Joi.object().optional()\n});\n\n// 上传图片\nrouter.post('/upload', authenticateToken, upload.single('image'), async (req, res, next) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        message: '请选择要上传的图片'\n      });\n    }\n\n    // 保存图片信息到数据库\n    const result = await query(\n      `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n      [\n        req.user.id,\n        req.file.filename,\n        req.file.originalname,\n        req.file.path,\n        req.file.size,\n        req.file.mimetype\n      ]\n    );\n\n    res.json({\n      success: true,\n      message: '图片上传成功',\n      data: {\n        image: {\n          id: result.insertId,\n          filename: req.file.filename,\n          originalName: req.file.originalname,\n          url: `/uploads/images/${req.file.filename}`,\n          size: req.file.size\n        }\n      }\n    });\n  } catch (error) {\n    // 如果数据库操作失败，删除已上传的文件\n    if (req.file) {\n      fs.unlink(req.file.path).catch(console.error);\n    }\n    next(error);\n  }\n});\n\n// 批量上传图片\nrouter.post('/upload-multiple', authenticateToken, upload.array('images', 5), async (req, res, next) => {\n  try {\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: '请选择要上传的图片'\n      });\n    }\n\n    const uploadedImages = [];\n\n    // 批量保存图片信息\n    for (const file of req.files) {\n      const result = await query(\n        `INSERT INTO images (user_id, filename, original_name, file_path, file_size, mime_type, created_at)\n         VALUES (?, ?, ?, ?, ?, ?, NOW())`,\n        [\n          req.user.id,\n          file.filename,\n          file.originalname,\n          file.path,\n          file.size,\n          file.mimetype\n        ]\n      );\n\n      uploadedImages.push({\n        id: result.insertId,\n        filename: file.filename,\n        originalName: file.originalname,\n        url: `/uploads/images/${file.filename}`,\n        size: file.size\n      });\n    }\n\n    res.json({\n      success: true,\n      message: `成功上传${uploadedImages.length}张图片`,\n      data: {\n        images: uploadedImages\n      }\n    });\n  } catch (error) {\n    // 如果数据库操作失败，删除已上传的文件\n    if (req.files) {\n      req.files.forEach(file => {\n        fs.unlink(file.path).catch(console.error);\n      });\n    }\n    next(error);\n  }\n});\n\n// 创建图像处理任务\nrouter.post('/process', authenticateToken, async (req, res, next) => {\n  try {\n    // 验证输入数据\n    const { error, value } = processImageSchema.validate(req.body);\n    if (error) {\n      return res.status(400).json({\n        success: false,\n        message: error.details[0].message\n      });\n    }\n\n    const { type, prompt, settings } = value;\n    const { imageIds } = req.body; // 图片ID数组\n\n    // 验证图片ID\n    if (!imageIds || !Array.isArray(imageIds) || imageIds.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: '请提供要处理的图片ID'\n      });\n    }\n\n    // 验证图片是否属于当前用户\n    const images = await query(\n      `SELECT id, filename, file_path FROM images\n       WHERE id IN (${imageIds.map(() => '?').join(',')}) AND user_id = ?`,\n      [...imageIds, req.user.id]\n    );\n\n    if (images.length !== imageIds.length) {\n      return res.status(400).json({\n        success: false,\n        message: '部分图片不存在或无权限访问'\n      });\n    }\n\n    // 创建处理任务\n    const taskResult = await query(\n      `INSERT INTO processing_tasks (user_id, type, status, prompt, settings, created_at)\n       VALUES (?, ?, ?, ?, ?, NOW())`,\n      [req.user.id, type, 'pending', prompt || null, JSON.stringify(settings || {})]\n    );\n\n    const taskId = taskResult.insertId;\n\n    // 关联图片到任务\n    for (const imageId of imageIds) {\n      await query(\n        'INSERT INTO task_images (task_id, image_id, type) VALUES (?, ?, ?)',\n        [taskId, imageId, 'input']\n      );\n    }\n\n    res.json({\n      success: true,\n      message: '图像处理任务创建成功',\n      data: {\n        task: {\n          id: taskId,\n          type,\n          status: 'pending',\n          prompt,\n          settings,\n          imageCount: images.length\n        }\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 获取处理任务列表\nrouter.get('/tasks', authenticateToken, async (req, res, next) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const offset = (page - 1) * limit;\n\n    // 获取任务总数\n    const countResult = await query(\n      'SELECT COUNT(*) as total FROM processing_tasks WHERE user_id = ?',\n      [req.user.id]\n    );\n    const total = countResult[0].total;\n\n    // 获取任务列表\n    const tasks = await query(\n      `SELECT id, type, status, prompt, progress, created_at, updated_at, completed_at\n       FROM processing_tasks\n       WHERE user_id = ?\n       ORDER BY created_at DESC\n       LIMIT ? OFFSET ?`,\n      [req.user.id, limit, offset]\n    );\n\n    res.json({\n      success: true,\n      data: {\n        tasks,\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 获取任务详情\nrouter.get('/tasks/:id', authenticateToken, async (req, res, next) => {\n  try {\n    const taskId = req.params.id;\n\n    // 获取任务信息\n    const tasks = await query(\n      `SELECT * FROM processing_tasks\n       WHERE id = ? AND user_id = ?`,\n      [taskId, req.user.id]\n    );\n\n    if (tasks.length === 0) {\n      return res.status(404).json({\n        success: false,\n        message: '任务不存在'\n      });\n    }\n\n    const task = tasks[0];\n\n    // 获取关联的图片\n    const taskImages = await query(\n      `SELECT ti.type, i.id, i.filename, i.original_name, i.file_path\n       FROM task_images ti\n       JOIN images i ON ti.image_id = i.id\n       WHERE ti.task_id = ?`,\n      [taskId]\n    );\n\n    // 按类型分组图片\n    const images = {\n      input: taskImages.filter(img => img.type === 'input'),\n      output: taskImages.filter(img => img.type === 'output')\n    };\n\n    res.json({\n      success: true,\n      data: {\n        task: {\n          ...task,\n          settings: task.settings ? JSON.parse(task.settings) : {},\n          images\n        }\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 获取用户的图片列表\nrouter.get('/', authenticateToken, async (req, res, next) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 20;\n    const offset = (page - 1) * limit;\n\n    // 获取图片总数\n    const countResult = await query(\n      'SELECT COUNT(*) as total FROM images WHERE user_id = ?',\n      [req.user.id]\n    );\n    const total = countResult[0].total;\n\n    // 获取图片列表\n    const images = await query(\n      `SELECT id, filename, original_name, file_size, mime_type, created_at\n       FROM images\n       WHERE user_id = ?\n       ORDER BY created_at DESC\n       LIMIT ? OFFSET ?`,\n      [req.user.id, limit, offset]\n    );\n\n    // 添加URL\n    const imagesWithUrl = images.map(image => ({\n      ...image,\n      url: `/uploads/images/${image.filename}`\n    }));\n\n    res.json({\n      success: true,\n      data: {\n        images: imagesWithUrl,\n        pagination: {\n          page,\n          limit,\n          total,\n          pages: Math.ceil(total / limit)\n        }\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}