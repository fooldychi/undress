{
    "sourceFile": "server/src/routes/public-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752329632027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752329632027,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { query } = require('../config/database');\n\n// 获取前端公开配置（不需要认证）\nrouter.get('/', async (req, res) => {\n  try {\n    console.log('📥 客户端请求公开配置...');\n\n    // 使用环境变量或系统默认值作为备用配置\n    const defaultConfigs = {\n      'comfyui.server_url': process.env.COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\n      'comfyui.backup_servers': process.env.COMFYUI_BACKUP_SERVERS || '',\n      'comfyui.health_check_timeout': parseInt(process.env.COMFYUI_HEALTH_CHECK_TIMEOUT || '10000'),\n      'comfyui.timeout': parseInt(process.env.COMFYUI_TIMEOUT || '300000'),\n      'ai.text_to_image_points': parseInt(process.env.AI_TEXT_TO_IMAGE_POINTS || '20'),\n      'ai.face_swap_points': parseInt(process.env.AI_FACE_SWAP_POINTS || '20'),\n      'ai.undress_points': parseInt(process.env.AI_UNDRESS_POINTS || '20'),\n      'frontend.api_base_url': process.env.FRONTEND_API_BASE_URL || 'https://your-api-server.com/api',\n      'frontend.title': process.env.FRONTEND_TITLE || 'AI Magic - AI图像处理平台',\n      'frontend.version': process.env.FRONTEND_VERSION || '1.0.0'\n    };\n\n    try {\n      // 尝试从数据库获取配置\n      const configs = await query(`\n        SELECT config_key, config_value, config_type\n        FROM system_config\n        WHERE config_group IN ('comfyui', 'ai', 'frontend')\n        AND config_key NOT LIKE '%password%'\n        AND config_key NOT LIKE '%secret%'\n        ORDER BY config_group, config_key\n      `);\n\n      console.log(`📊 从数据库加载了${configs.length}项公开配置`);\n\n      // 转换为前端需要的格式\n      const configMap = {};\n      configs.forEach(config => {\n        let value = config.config_value;\n\n        // 根据类型转换值\n        if (config.config_type === 'number') {\n          value = parseInt(value);\n        } else if (config.config_type === 'boolean') {\n          value = value === 'true' || value === '1';\n        }\n\n        configMap[config.config_key] = value;\n      });\n\n      // 合并默认配置和数据库配置\n      const finalConfig = { ...defaultConfigs, ...configMap };\n\n      console.log('📋 返回给客户端的配置:');\n      console.log(`   ComfyUI主服务器: ${finalConfig['comfyui.server_url']}`);\n      console.log(`   备用服务器: ${finalConfig['comfyui.backup_servers']}`);\n      console.log(`   自动切换: ${finalConfig['comfyui.auto_switch']}`);\n      console.log(`   超时时间: ${finalConfig['comfyui.timeout']}ms`);\n      console.log(`   文生图积分: ${finalConfig['ai.text_to_image_points']}`);\n\n      res.json({\n        success: true,\n        data: finalConfig\n      });\n\n    } catch (dbError) {\n      console.error('❌ 数据库查询失败，使用默认配置:', dbError.message);\n\n      res.json({\n        success: true,\n        data: defaultConfigs,\n        message: '使用默认配置'\n      });\n    }\n\n  } catch (error) {\n    console.error('❌ 获取公开配置失败:', error);\n\n    // 最后的备用配置 - 使用环境变量\n    const fallbackConfig = {\n      'comfyui.server_url': process.env.COMFYUI_SERVER_URL || 'https://your-comfyui-server.com',\n      'comfyui.backup_servers': process.env.COMFYUI_BACKUP_SERVERS || '',\n      'comfyui.health_check_timeout': parseInt(process.env.COMFYUI_HEALTH_CHECK_TIMEOUT || '10000'),\n      'comfyui.timeout': parseInt(process.env.COMFYUI_TIMEOUT || '300000'),\n      'ai.text_to_image_points': parseInt(process.env.AI_TEXT_TO_IMAGE_POINTS || '20'),\n      'ai.face_swap_points': parseInt(process.env.AI_FACE_SWAP_POINTS || '20'),\n      'ai.undress_points': parseInt(process.env.AI_UNDRESS_POINTS || '20'),\n      'frontend.api_base_url': process.env.FRONTEND_API_BASE_URL || 'https://your-api-server.com/api',\n      'frontend.title': process.env.FRONTEND_TITLE || 'AI Magic - AI图像处理平台',\n      'frontend.version': process.env.FRONTEND_VERSION || '1.0.0'\n    };\n\n    res.json({\n      success: true,\n      data: fallbackConfig,\n      message: '使用备用配置'\n    });\n  }\n});\n\n// 获取特定分组的配置\nrouter.get('/:group', async (req, res) => {\n  try {\n    const { group } = req.params;\n\n    // 只允许获取公开的配置分组\n    const allowedGroups = ['comfyui', 'ai', 'frontend'];\n    if (!allowedGroups.includes(group)) {\n      return res.status(403).json({\n        success: false,\n        message: '不允许访问该配置分组'\n      });\n    }\n\n    const configs = await query(`\n      SELECT config_key, config_value, config_type, description\n      FROM system_config\n      WHERE config_group = ?\n      AND config_key NOT LIKE '%password%'\n      AND config_key NOT LIKE '%secret%'\n      ORDER BY config_key\n    `, [group]);\n\n    // 转换为前端需要的格式\n    const configMap = {};\n    configs.forEach(config => {\n      let value = config.config_value;\n\n      // 根据类型转换值\n      if (config.config_type === 'number') {\n        value = parseInt(value);\n      } else if (config.config_type === 'boolean') {\n        value = value === 'true' || value === '1';\n      }\n\n      configMap[config.config_key] = {\n        value,\n        description: config.description\n      };\n    });\n\n    res.json({\n      success: true,\n      data: configMap\n    });\n  } catch (error) {\n    console.error('获取配置分组失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败'\n    });\n  }\n});\n\nmodule.exports = router;\n\n"
        }
    ]
}