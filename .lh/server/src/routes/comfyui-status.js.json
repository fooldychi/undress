{
    "sourceFile": "server/src/routes/comfyui-status.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752332138551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752332174286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,5 +240,238 @@\n     });\n   }\n });\n \n+/**\n+ * 代理ComfyUI上传图片接口（使用负载均衡）\n+ */\n+router.post('/upload', upload.single('image'), async (req, res) => {\n+  try {\n+    console.log('📤 代理ComfyUI图片上传请求...');\n+\n+    if (!req.file) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供图片文件'\n+      });\n+    }\n+\n+    console.log('📋 上传文件信息:', {\n+      originalname: req.file.originalname,\n+      mimetype: req.file.mimetype,\n+      size: `${(req.file.size / 1024).toFixed(2)} KB`\n+    });\n+\n+    // 创建FormData用于转发到ComfyUI\n+    const FormData = require('form-data');\n+    const formData = new FormData();\n+\n+    formData.append('image', req.file.buffer, {\n+      filename: req.file.originalname || 'upload.jpg',\n+      contentType: req.file.mimetype || 'image/jpeg'\n+    });\n+\n+    // 添加ComfyUI需要的其他参数\n+    if (req.body.type) formData.append('type', req.body.type);\n+    if (req.body.subfolder) formData.append('subfolder', req.body.subfolder);\n+    if (req.body.overwrite) formData.append('overwrite', req.body.overwrite);\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest('/upload/image', {\n+      method: 'POST',\n+      body: formData,\n+      headers: formData.getHeaders()\n+    });\n+\n+    console.log('✅ ComfyUI图片上传成功:', result);\n+\n+    res.json({\n+      success: true,\n+      data: result,\n+      message: '图片上传成功'\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI图片上传失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '图片上传失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n+/**\n+ * 代理ComfyUI提交工作流接口（使用负载均衡）\n+ */\n+router.post('/prompt', async (req, res) => {\n+  try {\n+    console.log('🚀 代理ComfyUI工作流提交请求...');\n+\n+    const { prompt, client_id } = req.body;\n+\n+    if (!prompt) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供工作流prompt'\n+      });\n+    }\n+\n+    console.log('📋 工作流信息:', {\n+      client_id,\n+      prompt_nodes: Object.keys(prompt).length\n+    });\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest('/prompt', {\n+      method: 'POST',\n+      body: JSON.stringify({\n+        prompt,\n+        client_id: client_id || `ai-magic-${Date.now()}`\n+      })\n+    });\n+\n+    console.log('✅ ComfyUI工作流提交成功:', result);\n+\n+    res.json({\n+      success: true,\n+      data: result,\n+      message: '工作流提交成功'\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI工作流提交失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '工作流提交失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n+/**\n+ * 代理ComfyUI队列查询接口（使用负载均衡）\n+ */\n+router.get('/queue', async (req, res) => {\n+  try {\n+    console.log('📊 代理ComfyUI队列查询请求...');\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest('/queue');\n+\n+    res.json({\n+      success: true,\n+      data: result,\n+      message: '队列查询成功'\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI队列查询失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '队列查询失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n+/**\n+ * 代理ComfyUI历史记录查询接口（使用负载均衡）\n+ */\n+router.get('/history/:promptId?', async (req, res) => {\n+  try {\n+    const { promptId } = req.params;\n+    const path = promptId ? `/history/${promptId}` : '/history';\n+\n+    console.log(`📜 代理ComfyUI历史记录查询请求: ${path}`);\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest(path);\n+\n+    res.json({\n+      success: true,\n+      data: result,\n+      message: '历史记录查询成功'\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI历史记录查询失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '历史记录查询失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n+/**\n+ * 代理ComfyUI系统状态查询接口（使用负载均衡）\n+ */\n+router.get('/system_stats', async (req, res) => {\n+  try {\n+    console.log('💻 代理ComfyUI系统状态查询请求...');\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest('/system_stats');\n+\n+    res.json({\n+      success: true,\n+      data: result,\n+      message: '系统状态查询成功'\n+    });\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI系统状态查询失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '系统状态查询失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n+/**\n+ * 代理ComfyUI图片查看接口（使用负载均衡）\n+ */\n+router.get('/view', async (req, res) => {\n+  try {\n+    const { filename, subfolder, type } = req.query;\n+\n+    if (!filename) {\n+      return res.status(400).json({\n+        success: false,\n+        message: '请提供文件名'\n+      });\n+    }\n+\n+    console.log(`🖼️ 代理ComfyUI图片查看请求: ${filename}`);\n+\n+    // 构建查询参数\n+    const params = new URLSearchParams();\n+    params.append('filename', filename);\n+    if (subfolder) params.append('subfolder', subfolder);\n+    if (type) params.append('type', type);\n+\n+    // 使用负载均衡发送请求\n+    const result = await comfyUIRequest(`/view?${params.toString()}`, {\n+      responseType: 'arraybuffer'\n+    });\n+\n+    // 设置响应头\n+    res.set({\n+      'Content-Type': 'image/jpeg',\n+      'Cache-Control': 'public, max-age=3600'\n+    });\n+\n+    res.send(Buffer.from(result));\n+\n+  } catch (error) {\n+    console.error('❌ 代理ComfyUI图片查看失败:', error);\n+    res.status(500).json({\n+      success: false,\n+      message: '图片查看失败',\n+      error: error.message\n+    });\n+  }\n+});\n+\n module.exports = router;\n"
                }
            ],
            "date": 1752332138551,
            "name": "Commit-0",
            "content": "/**\n * ComfyUI服务器状态管理路由\n */\nconst express = require('express');\nconst multer = require('multer');\nconst router = express.Router();\nconst {\n  getServerStatus,\n  updateServerLoads,\n  selectBestServer,\n  getServerManager,\n  comfyUIRequest\n} = require('../utils/comfyUIRequest');\n\n// 配置multer用于文件上传\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB限制\n  }\n});\n\n/**\n * 获取所有ComfyUI服务器状态\n */\nrouter.get('/status', async (req, res) => {\n  try {\n    console.log('📊 获取ComfyUI服务器状态...');\n\n    const status = await getServerStatus();\n\n    // 计算健康服务器数量\n    const healthyServers = Object.values(status.loads).filter(load => load.healthy).length;\n    const totalServers = status.servers.length;\n\n    // 计算总队列数\n    const totalQueue = Object.values(status.loads)\n      .filter(load => load.healthy)\n      .reduce((sum, load) => sum + load.queue.total, 0);\n\n    res.json({\n      success: true,\n      data: {\n        ...status,\n        summary: {\n          totalServers,\n          healthyServers,\n          unhealthyServers: totalServers - healthyServers,\n          totalQueue,\n          isLocked: !!status.lockedServer,\n          lockTimeRemaining: status.lockExpiry ? Math.max(0, status.lockExpiry - Date.now()) : 0\n        }\n      }\n    });\n  } catch (error) {\n    console.error('❌ 获取服务器状态失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取服务器状态失败',\n      error: error.message\n    });\n  }\n});\n\n/**\n * 手动更新服务器负载信息\n */\nrouter.post('/refresh', async (req, res) => {\n  try {\n    console.log('🔄 手动刷新服务器负载信息...');\n\n    await updateServerLoads();\n\n    const status = await getServerStatus();\n\n    res.json({\n      success: true,\n      message: '服务器负载信息已更新',\n      data: status\n    });\n  } catch (error) {\n    console.error('❌ 刷新服务器负载失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '刷新服务器负载失败',\n      error: error.message\n    });\n  }\n});\n\n/**\n * 选择最优服务器\n */\nrouter.get('/select-best', async (req, res) => {\n  try {\n    console.log('🎯 选择最优服务器...');\n\n    const bestServer = await selectBestServer();\n    const status = await getServerStatus();\n\n    // 获取选择的服务器信息\n    const serverInfo = status.loads[bestServer];\n\n    res.json({\n      success: true,\n      data: {\n        selectedServer: bestServer,\n        serverInfo,\n        reason: serverInfo ?\n          `队列最少 (${serverInfo.queue.total} 个任务)` :\n          '回退选择',\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('❌ 选择最优服务器失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '选择最优服务器失败',\n      error: error.message\n    });\n  }\n});\n\n/**\n * 重置服务器失败计数\n */\nrouter.post('/reset-failures/:serverUrl', async (req, res) => {\n  try {\n    const { serverUrl } = req.params;\n    const decodedUrl = decodeURIComponent(serverUrl);\n\n    console.log(`🔄 重置服务器失败计数: ${decodedUrl}`);\n\n    const serverManager = getServerManager();\n    if (!serverManager) {\n      return res.status(400).json({\n        success: false,\n        message: '服务器管理器未初始化'\n      });\n    }\n\n    serverManager.resetFailureCount(decodedUrl);\n\n    res.json({\n      success: true,\n      message: `服务器 ${decodedUrl} 的失败计数已重置`\n    });\n  } catch (error) {\n    console.error('❌ 重置失败计数失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '重置失败计数失败',\n      error: error.message\n    });\n  }\n});\n\n/**\n * 释放服务器锁定\n */\nrouter.post('/unlock', async (req, res) => {\n  try {\n    console.log('🔓 释放服务器锁定...');\n\n    const serverManager = getServerManager();\n    if (!serverManager) {\n      return res.status(400).json({\n        success: false,\n        message: '服务器管理器未初始化'\n      });\n    }\n\n    const previousLock = serverManager.lockedServer;\n    serverManager.lockedServer = null;\n    serverManager.lastLockTime = 0;\n\n    res.json({\n      success: true,\n      message: '服务器锁定已释放',\n      data: {\n        previousLock,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    console.error('❌ 释放服务器锁定失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '释放服务器锁定失败',\n      error: error.message\n    });\n  }\n});\n\n/**\n * 获取服务器详细信息\n */\nrouter.get('/server/:serverUrl', async (req, res) => {\n  try {\n    const { serverUrl } = req.params;\n    const decodedUrl = decodeURIComponent(serverUrl);\n\n    console.log(`📋 获取服务器详细信息: ${decodedUrl}`);\n\n    const serverManager = getServerManager();\n    if (!serverManager) {\n      return res.status(400).json({\n        success: false,\n        message: '服务器管理器未初始化'\n      });\n    }\n\n    // 检查服务器健康状态\n    const health = await serverManager.checkServerHealth(decodedUrl);\n\n    // 获取队列信息\n    const queueInfo = await serverManager.getServerQueueInfo(decodedUrl);\n\n    // 获取失败计数\n    const failureCount = serverManager.failureCount.get(decodedUrl) || 0;\n\n    res.json({\n      success: true,\n      data: {\n        url: decodedUrl,\n        health,\n        queue: queueInfo,\n        failureCount,\n        isLocked: serverManager.lockedServer === decodedUrl,\n        lastCheck: Date.now()\n      }\n    });\n  } catch (error) {\n    console.error('❌ 获取服务器详细信息失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取服务器详细信息失败',\n      error: error.message\n    });\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}