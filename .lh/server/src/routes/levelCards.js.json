{
    "sourceFile": "server/src/routes/levelCards.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1752322119517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752322136731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     // 查找等级卡及其类型信息\n     const cardResult = await query(`\n       SELECT lc.*, ct.name as type_name, ct.icon, ct.points as total_points\n       FROM level_cards lc\n-      JOIN card_types ct ON lc.type_id = ct.id\n+      JOIN level_card_types ct ON lc.type_id = ct.id\n       WHERE lc.card_number = ? AND lc.card_password = ?\n     `, [cardNumber, cardPassword]);\n \n     if (cardResult.length === 0) {\n"
                },
                {
                    "date": 1752322154554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n     const cards = await query(`\n       SELECT lc.id, lc.card_number, lc.remaining_points, lc.bound_at,\n              ct.name as type_name, ct.icon, ct.points as total_points, ct.price\n       FROM level_cards lc\n-      JOIN card_types ct ON lc.type_id = ct.id\n+      JOIN level_card_types ct ON lc.type_id = ct.id\n       WHERE lc.bound_user_id = ?\n         AND (\n           ct.name != '体验卡' OR\n           (ct.name = '体验卡' AND lc.remaining_points > 0)\n"
                },
                {
                    "date": 1752342851558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,34 @@\n     }\n \n     const card = cardResult[0];\n \n+    // 如果是体验卡，检查用户是否已经绑定了未使用的体验卡\n+    if (card.type_name === '体验卡') {\n+      console.log(`🎁 检查用户${userId}的体验卡绑定状态...`);\n+\n+      const existingExperienceCards = await query(`\n+        SELECT lc.id, lc.card_number, lc.remaining_points\n+        FROM level_cards lc\n+        JOIN level_card_types ct ON lc.type_id = ct.id\n+        WHERE lc.bound_user_id = ?\n+          AND ct.name = '体验卡'\n+          AND lc.remaining_points > 0\n+      `, [userId]);\n+\n+      if (existingExperienceCards.length > 0) {\n+        const existingCard = existingExperienceCards[0];\n+        console.log(`❌ 用户${userId}已绑定未使用的体验卡: ${existingCard.card_number}，剩余积分: ${existingCard.remaining_points}`);\n+\n+        return res.status(400).json({\n+          success: false,\n+          message: `您已绑定体验卡 ${existingCard.card_number}（剩余${existingCard.remaining_points}积分），请先使用完当前体验卡后再绑定新的体验卡`\n+        });\n+      }\n+    }\n+\n+    const card = cardResult[0];\n+\n     // 检查是否已被绑定\n     if (card.bound_user_id) {\n       return res.status(400).json({\n         success: false,\n"
                },
                {
                    "date": 1752342867051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,34 +55,8 @@\n     }\n \n     const card = cardResult[0];\n \n-    // 如果是体验卡，检查用户是否已经绑定了未使用的体验卡\n-    if (card.type_name === '体验卡') {\n-      console.log(`🎁 检查用户${userId}的体验卡绑定状态...`);\n-\n-      const existingExperienceCards = await query(`\n-        SELECT lc.id, lc.card_number, lc.remaining_points\n-        FROM level_cards lc\n-        JOIN level_card_types ct ON lc.type_id = ct.id\n-        WHERE lc.bound_user_id = ?\n-          AND ct.name = '体验卡'\n-          AND lc.remaining_points > 0\n-      `, [userId]);\n-\n-      if (existingExperienceCards.length > 0) {\n-        const existingCard = existingExperienceCards[0];\n-        console.log(`❌ 用户${userId}已绑定未使用的体验卡: ${existingCard.card_number}，剩余积分: ${existingCard.remaining_points}`);\n-\n-        return res.status(400).json({\n-          success: false,\n-          message: `您已绑定体验卡 ${existingCard.card_number}（剩余${existingCard.remaining_points}积分），请先使用完当前体验卡后再绑定新的体验卡`\n-        });\n-      }\n-    }\n-\n-    const card = cardResult[0];\n-\n     // 检查是否已被绑定\n     if (card.bound_user_id) {\n       return res.status(400).json({\n         success: false,\n"
                },
                {
                    "date": 1752343609989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     if (card.type_name === '体验卡') {\n       const existingExperienceCard = await query(`\n         SELECT COUNT(*) as count\n         FROM level_cards lc\n-        JOIN card_types ct ON lc.type_id = ct.id\n+        JOIN level_card_types ct ON lc.type_id = ct.id\n         WHERE lc.bound_user_id = ? AND ct.name = '体验卡' AND lc.remaining_points > 0\n       `, [userId]);\n \n       if (existingExperienceCard[0].count > 0) {\n"
                },
                {
                    "date": 1752346750471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n router.get('/types', async (req, res, next) => {\n   try {\n     const cardTypes = await query(`\n       SELECT id, name, icon, points, price\n-      FROM level_card_types\n+      FROM card_types\n       ORDER BY points ASC\n     `);\n \n     res.json({\n"
                },
                {
                    "date": 1752346767232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     // 查找等级卡及其类型信息\n     const cardResult = await query(`\n       SELECT lc.*, ct.name as type_name, ct.icon, ct.points as total_points\n       FROM level_cards lc\n-      JOIN level_card_types ct ON lc.type_id = ct.id\n+      JOIN card_types ct ON lc.type_id = ct.id\n       WHERE lc.card_number = ? AND lc.card_password = ?\n     `, [cardNumber, cardPassword]);\n \n     if (cardResult.length === 0) {\n"
                },
                {
                    "date": 1752346780048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     if (card.type_name === '体验卡') {\n       const existingExperienceCard = await query(`\n         SELECT COUNT(*) as count\n         FROM level_cards lc\n-        JOIN level_card_types ct ON lc.type_id = ct.id\n+        JOIN card_types ct ON lc.type_id = ct.id\n         WHERE lc.bound_user_id = ? AND ct.name = '体验卡' AND lc.remaining_points > 0\n       `, [userId]);\n \n       if (existingExperienceCard[0].count > 0) {\n"
                },
                {
                    "date": 1752346796968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n     const cards = await query(`\n       SELECT lc.id, lc.card_number, lc.remaining_points, lc.bound_at,\n              ct.name as type_name, ct.icon, ct.points as total_points, ct.price\n       FROM level_cards lc\n-      JOIN level_card_types ct ON lc.type_id = ct.id\n+      JOIN card_types ct ON lc.type_id = ct.id\n       WHERE lc.bound_user_id = ?\n         AND (\n           ct.name != '体验卡' OR\n           (ct.name = '体验卡' AND lc.remaining_points > 0)\n"
                },
                {
                    "date": 1752346834555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n       SELECT lct.id, lct.type, lct.points_amount, lct.remaining_points, lct.description, lct.created_at,\n              lc.card_number, lctype.name as card_type_name, lctype.icon\n       FROM level_card_transactions lct\n       JOIN level_cards lc ON lct.card_id = lc.id\n-      JOIN level_card_types lctype ON lc.type_id = lctype.id\n+      JOIN card_types lctype ON lc.type_id = lctype.id\n       WHERE lct.user_id = ?\n       ORDER BY lct.created_at DESC\n       LIMIT ? OFFSET ?\n     `, [userId, parseInt(limit), parseInt(offset)]);\n"
                }
            ],
            "date": 1752322119517,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst { query } = require('../config/database');\nconst { authenticateToken } = require('../middleware/auth');\nconst { calculateUserPoints, getUserPointsDetails, consumeUserPoints } = require('../utils/pointsCalculator');\n\n// 获取等级卡类型列表\nrouter.get('/types', async (req, res, next) => {\n  try {\n    const cardTypes = await query(`\n      SELECT id, name, icon, points, price\n      FROM level_card_types\n      ORDER BY points ASC\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        cardTypes\n      }\n    });\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 绑定等级卡\nrouter.post('/bind', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n    const { cardNumber, cardPassword } = req.body;\n\n    if (!cardNumber || !cardPassword) {\n      return res.status(400).json({\n        success: false,\n        message: '请输入卡号和卡密'\n      });\n    }\n\n    console.log(`🎫 用户${userId}尝试绑定等级卡: ${cardNumber}`);\n\n    // 查找等级卡及其类型信息\n    const cardResult = await query(`\n      SELECT lc.*, ct.name as type_name, ct.icon, ct.points as total_points\n      FROM level_cards lc\n      JOIN card_types ct ON lc.type_id = ct.id\n      WHERE lc.card_number = ? AND lc.card_password = ?\n    `, [cardNumber, cardPassword]);\n\n    if (cardResult.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: '卡号或卡密错误，请检查后重试'\n      });\n    }\n\n    const card = cardResult[0];\n\n    // 检查是否已被绑定\n    if (card.bound_user_id) {\n      return res.status(400).json({\n        success: false,\n        message: '该等级卡已被绑定，请使用其他卡片'\n      });\n    }\n\n    // 体验卡特殊逻辑：检查用户是否已有有积分的体验卡\n    if (card.type_name === '体验卡') {\n      const existingExperienceCard = await query(`\n        SELECT COUNT(*) as count\n        FROM level_cards lc\n        JOIN card_types ct ON lc.type_id = ct.id\n        WHERE lc.bound_user_id = ? AND ct.name = '体验卡' AND lc.remaining_points > 0\n      `, [userId]);\n\n      if (existingExperienceCard[0].count > 0) {\n        return res.status(400).json({\n          success: false,\n          message: '您已有可用的体验卡，请先使用完当前体验卡积分'\n        });\n      }\n    }\n\n    try {\n      // 1. 绑定卡片到用户\n      await query(`\n        UPDATE level_cards\n        SET bound_user_id = ?, bound_at = NOW()\n        WHERE id = ?\n      `, [userId, card.id]);\n\n      // 2. 记录绑定日志\n      await query(`\n        INSERT INTO point_logs (user_id, action_type, points_amount, description)\n        VALUES (?, 'bind', ?, ?)\n      `, [userId, card.remaining_points, `绑定${card.type_name}`]);\n\n      console.log(`✅ 用户${userId}成功绑定${card.type_name}${cardNumber}，获得${card.remaining_points}积分`);\n\n      // 根据卡片类型返回不同的消息\n      const message = card.type_name === '体验卡'\n        ? '体验卡绑定成功！每个用户只能绑定一张体验卡'\n        : '等级卡绑定成功';\n\n      res.json({\n        success: true,\n        message,\n        data: {\n          cardType: card.type_name,\n          cardIcon: card.icon,\n          pointsAdded: card.remaining_points,\n          cardNumber: card.card_number,\n          isExperienceCard: card.type_name === '体验卡'\n        }\n      });\n\n    } catch (error) {\n      throw error;\n    }\n\n  } catch (error) {\n    console.error(`❌ 用户${req.user?.userId}绑定等级卡失败:`, error);\n    next(error);\n  }\n});\n\n// 获取用户绑定的等级卡列表\nrouter.get('/my-cards', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n\n    // 查找用户绑定的等级卡及其类型信息\n    // 体验卡一次性使用，积分为0时不再显示\n    const cards = await query(`\n      SELECT lc.id, lc.card_number, lc.remaining_points, lc.bound_at,\n             ct.name as type_name, ct.icon, ct.points as total_points, ct.price\n      FROM level_cards lc\n      JOIN card_types ct ON lc.type_id = ct.id\n      WHERE lc.bound_user_id = ?\n        AND (\n          ct.name != '体验卡' OR\n          (ct.name = '体验卡' AND lc.remaining_points > 0)\n        )\n      ORDER BY lc.bound_at DESC\n    `, [userId]);\n\n    res.json({\n      success: true,\n      data: {\n        cards\n      }\n    });\n\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 获取等级卡使用记录\nrouter.get('/transactions', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n    const { page = 1, limit = 20 } = req.query;\n    const offset = (page - 1) * limit;\n\n    const transactions = await query(`\n      SELECT lct.id, lct.type, lct.points_amount, lct.remaining_points, lct.description, lct.created_at,\n             lc.card_number, lctype.name as card_type_name, lctype.icon\n      FROM level_card_transactions lct\n      JOIN level_cards lc ON lct.card_id = lc.id\n      JOIN level_card_types lctype ON lc.type_id = lctype.id\n      WHERE lct.user_id = ?\n      ORDER BY lct.created_at DESC\n      LIMIT ? OFFSET ?\n    `, [userId, parseInt(limit), parseInt(offset)]);\n\n    // 获取总记录数\n    const countResult = await query(\n      'SELECT COUNT(*) as total FROM level_card_transactions WHERE user_id = ?',\n      [userId]\n    );\n\n    res.json({\n      success: true,\n      data: {\n        transactions,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total: countResult[0].total,\n          totalPages: Math.ceil(countResult[0].total / limit)\n        }\n      }\n    });\n\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 旧的consume接口已删除，请使用consume-points接口\n\n// 获取用户总积分（基于绑定的等级卡）\nrouter.get('/user-points', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n\n    // 使用积分计算工具获取详细信息\n    const pointsDetails = await getUserPointsDetails(userId);\n\n    // 生成卡片明细\n    const cardsBreakdown = pointsDetails.cards.map(card => ({\n      type: card.type_name,\n      points: card.remaining_points\n    }));\n\n    res.json({\n      success: true,\n      data: {\n        points: 0, // 没有免费积分概念\n        purchased_points: pointsDetails.totalPoints,\n        total_points: pointsDetails.totalPoints,\n        cards_count: pointsDetails.cardCount,\n        cards_breakdown: cardsBreakdown\n      }\n    });\n\n  } catch (error) {\n    next(error);\n  }\n});\n\n// 消费积分（从等级卡扣除）\nrouter.post('/consume-points', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n    const { amount, description = '积分消费', mediaUrl = null } = req.body;\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({\n        success: false,\n        message: '消费积分数量必须大于0'\n      });\n    }\n\n    console.log(`💰 用户${userId}尝试消费${amount}积分: ${description}`);\n    if (mediaUrl) {\n      console.log(`🎬 关联媒体URL: ${mediaUrl}`);\n    }\n\n    // 使用积分计算工具消费积分（包含媒体文件URL）\n    const result = await consumeUserPoints(userId, amount, description, mediaUrl);\n\n    if (!result.success) {\n      return res.status(400).json({\n        success: false,\n        message: result.message,\n        data: {\n          available: result.available,\n          required: result.required\n        }\n      });\n    }\n\n    console.log(`✅ 用户${userId}成功消费${amount}积分`);\n\n    res.json({\n      success: true,\n      message: result.message,\n      data: {\n        consumed_amount: result.totalConsumed,\n        remaining_points: result.remainingPoints,\n        description,\n        mediaUrl: result.mediaUrl\n      }\n    });\n\n  } catch (error) {\n    console.error(`❌ 用户${req.user?.userId}消费积分失败:`, error);\n    next(error);\n  }\n});\n\n// 获取用户积分记录\nrouter.get('/point-logs', authenticateToken, async (req, res, next) => {\n  try {\n    const userId = req.user.userId;\n    const { page = 1, limit = 20, recent = false } = req.query;\n    const offset = (page - 1) * limit;\n\n    // 如果是获取最近记录，限制为3条\n    const actualLimit = recent === 'true' ? 3 : parseInt(limit);\n    const actualOffset = recent === 'true' ? 0 : parseInt(offset);\n\n    // 获取积分记录（包含媒体文件URL）\n    const logs = await query(`\n      SELECT\n        action_type,\n        points_amount,\n        description,\n        url,\n        created_at\n      FROM point_logs\n      WHERE user_id = ?\n      ORDER BY created_at DESC\n      LIMIT ? OFFSET ?\n    `, [userId, actualLimit, actualOffset]);\n\n    // 获取总记录数\n    const totalResult = await query(`\n      SELECT COUNT(*) as total\n      FROM point_logs\n      WHERE user_id = ?\n    `, [userId]);\n\n    const total = totalResult[0].total;\n\n    res.json({\n      success: true,\n      data: {\n        logs,\n        pagination: {\n          page: parseInt(page),\n          limit: actualLimit,\n          total,\n          totalPages: Math.ceil(total / actualLimit),\n          hasMore: total > actualLimit\n        }\n      }\n    });\n\n  } catch (error) {\n    next(error);\n  }\n});\n\nmodule.exports = router;\n"
        }
    ]
}