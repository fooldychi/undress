{
    "sourceFile": "server/src/services/ComfyUIServerManager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752331530858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752332359954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,8 +306,17 @@\n   lockServer(serverUrl) {\n     this.lockedServer = serverUrl;\n     this.lastLockTime = Date.now();\n     console.log(`🔒 锁定服务器: ${serverUrl}, 持续${this.lockDuration / 1000}秒`);\n+\n+    // 显示当前所有服务器状态\n+    console.log('📊 当前所有服务器状态:');\n+    for (const [url, info] of this.serverLoads.entries()) {\n+      const status = info.healthy ? '✅' : '❌';\n+      const queue = info.healthy ? `队列:${info.queue.total}` : '不健康';\n+      const locked = url === serverUrl ? '🔒' : '';\n+      console.log(`   ${status} ${url} ${queue} ${locked}`);\n+    }\n   }\n \n   /**\n    * 获取当前锁定的可用服务器\n"
                }
            ],
            "date": 1752331530858,
            "name": "Commit-0",
            "content": "/**\n * ComfyUI服务器管理器 - 负载均衡实现\n * 根据服务器队列负载选择最优服务器\n */\nconst fetch = require('node-fetch');\nconst { AbortController } = require('abort-controller');\nconst { query } = require('../config/database');\n\nclass ComfyUIServerManager {\n  constructor() {\n    this.servers = [];\n    this.serverLoads = new Map();\n    this.lockedServer = null;\n    this.lastLockTime = 0;\n    this.lockDuration = 60000; // 服务器锁定时间（毫秒）\n    this.isCheckingServers = false;\n    this.config = null;\n    this.failureCount = new Map();\n  }\n\n  /**\n   * 初始化服务器管理器\n   */\n  async initialize() {\n    try {\n      // 从系统配置获取ComfyUI服务器配置\n      this.config = await this.getComfyUIConfig();\n\n      // 设置服务器列表\n      this.servers = [\n        this.config.COMFYUI_SERVER_URL,\n        ...(this.config.BACKUP_SERVERS || [])\n      ].filter(Boolean);\n\n      console.log('🔧 ComfyUI服务器管理器初始化完成');\n      console.log(`📋 主服务器: ${this.config.COMFYUI_SERVER_URL}`);\n      console.log(`📋 备用服务器: ${this.config.BACKUP_SERVERS?.join(', ') || '无'}`);\n\n      // 初始化服务器负载信息\n      await this.updateServerLoads();\n\n      return true;\n    } catch (error) {\n      console.error('❌ ComfyUI服务器管理器初始化失败:', error);\n      return false;\n    }\n  }\n\n  /**\n   * 获取ComfyUI配置\n   */\n  async getComfyUIConfig() {\n    try {\n      const configs = await query(`\n        SELECT config_key, config_value, config_type\n        FROM system_config\n        WHERE config_group = 'comfyui'\n        ORDER BY config_key\n      `);\n\n      // 转换为对象\n      const configMap = {};\n      configs.forEach(config => {\n        let value = config.config_value;\n\n        // 根据类型转换值\n        if (config.config_type === 'number') {\n          value = parseInt(value);\n        } else if (config.config_type === 'boolean') {\n          value = value === 'true' || value === '1';\n        }\n\n        configMap[config.config_key] = value;\n      });\n\n      return {\n        COMFYUI_SERVER_URL: configMap['comfyui.server_url'] || process.env.COMFYUI_SERVER_URL || 'http://localhost:8188',\n        BACKUP_SERVERS: (configMap['comfyui.backup_servers'] || process.env.COMFYUI_BACKUP_SERVERS || '')\n          .split(',')\n          .map(s => s.trim())\n          .filter(Boolean),\n        AUTO_SWITCH: configMap['comfyui.auto_switch'] === true || configMap['comfyui.auto_switch'] === 'true',\n        HEALTH_CHECK_TIMEOUT: configMap['comfyui.health_check_timeout'] || 5000,\n        TIMEOUT: configMap['comfyui.timeout'] || 30000,\n        SWITCH_THRESHOLD: configMap['comfyui.switch_threshold'] || 3\n      };\n    } catch (error) {\n      console.error('❌ 获取ComfyUI配置失败，使用默认配置:', error);\n\n      // 使用默认配置\n      return {\n        COMFYUI_SERVER_URL: process.env.COMFYUI_SERVER_URL || 'http://localhost:8188',\n        BACKUP_SERVERS: (process.env.COMFYUI_BACKUP_SERVERS || '').split(',').filter(Boolean),\n        AUTO_SWITCH: true,\n        HEALTH_CHECK_TIMEOUT: 5000,\n        TIMEOUT: 30000,\n        SWITCH_THRESHOLD: 3\n      };\n    }\n  }\n\n  /**\n   * 更新所有服务器的负载信息\n   */\n  async updateServerLoads() {\n    if (this.isCheckingServers) {\n      return;\n    }\n\n    this.isCheckingServers = true;\n\n    try {\n      console.log('🔄 更新服务器负载信息...');\n\n      const promises = this.servers.map(async (serverUrl) => {\n        try {\n          // 检查服务器健康状态\n          const health = await this.checkServerHealth(serverUrl);\n\n          if (!health.healthy) {\n            this.serverLoads.set(serverUrl, {\n              healthy: false,\n              queue: { running: 0, pending: 0, total: 999999 },\n              lastCheck: Date.now(),\n              error: health.message\n            });\n            return;\n          }\n\n          // 获取服务器队列信息\n          const queueInfo = await this.getServerQueueInfo(serverUrl);\n\n          this.serverLoads.set(serverUrl, {\n            healthy: queueInfo.healthy,\n            queue: {\n              running: queueInfo.running || 0,\n              pending: queueInfo.pending || 0,\n              total: queueInfo.total || 0\n            },\n            supportsQueueAPI: queueInfo.supportsQueueAPI,\n            lastCheck: Date.now()\n          });\n\n          console.log(`📊 服务器 ${serverUrl} 队列: 运行中=${queueInfo.running}, 等待中=${queueInfo.pending}, 总计=${queueInfo.total}`);\n        } catch (error) {\n          console.error(`❌ 获取服务器 ${serverUrl} 负载失败:`, error.message);\n          this.serverLoads.set(serverUrl, {\n            healthy: false,\n            queue: { running: 0, pending: 0, total: 999999 },\n            lastCheck: Date.now(),\n            error: error.message\n          });\n        }\n      });\n\n      await Promise.all(promises);\n    } catch (error) {\n      console.error('❌ 更新服务器负载信息失败:', error);\n    } finally {\n      this.isCheckingServers = false;\n    }\n  }\n\n  /**\n   * 检查服务器健康状态\n   * @param {string} serverUrl - 服务器URL\n   * @returns {Promise<{healthy: boolean, status: number, message: string}>}\n   */\n  async checkServerHealth(serverUrl) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), this.config.HEALTH_CHECK_TIMEOUT);\n\n      const response = await fetch(`${serverUrl}/system_stats`, {\n        method: 'GET',\n        signal: controller.signal\n      });\n\n      clearTimeout(timeout);\n\n      if (response.ok) {\n        return { healthy: true, status: response.status, message: 'OK' };\n      } else {\n        return { healthy: false, status: response.status, message: response.statusText };\n      }\n    } catch (error) {\n      return { healthy: false, status: 0, message: error.message };\n    }\n  }\n\n  /**\n   * 获取服务器队列信息\n   * @param {string} serverUrl - 服务器URL\n   * @returns {Promise<{running: number, pending: number, total: number, healthy: boolean, supportsQueueAPI: boolean}>}\n   */\n  async getServerQueueInfo(serverUrl) {\n    try {\n      const controller = new AbortController();\n      const timeout = setTimeout(() => controller.abort(), this.config.HEALTH_CHECK_TIMEOUT);\n\n      const response = await fetch(`${serverUrl}/queue`, {\n        method: 'GET',\n        signal: controller.signal\n      });\n\n      clearTimeout(timeout);\n\n      if (response.ok) {\n        const data = await response.json();\n\n        // ComfyUI队列API返回格式: { queue_running: [], queue_pending: [] }\n        const running = data.queue_running?.length || 0;\n        const pending = data.queue_pending?.length || 0;\n\n        return {\n          running,\n          pending,\n          total: running + pending,\n          healthy: true,\n          supportsQueueAPI: true\n        };\n      } else {\n        return {\n          running: 0,\n          pending: 0,\n          total: 0,\n          healthy: false,\n          supportsQueueAPI: false,\n          error: `HTTP ${response.status}: ${response.statusText}`\n        };\n      }\n    } catch (error) {\n      return {\n        running: 0,\n        pending: 0,\n        total: 0,\n        healthy: false,\n        supportsQueueAPI: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * 根据最小队列选择服务器\n   * @returns {Promise<string>} 选择的服务器URL\n   */\n  async selectServerByMinQueue() {\n    // 如果有锁定的服务器且未过期，直接返回\n    const lockedServer = await this.getLockedAvailableServer();\n    if (lockedServer) {\n      return lockedServer;\n    }\n\n    // 更新服务器负载信息\n    await this.updateServerLoads();\n\n    // 按队列总数排序，选择队列最少的健康服务器\n    const serverEntries = [...this.serverLoads.entries()]\n      .filter(([_, info]) => info.healthy)\n      .sort(([_, infoA], [_, infoB]) => infoA.queue.total - infoB.queue.total);\n\n    if (serverEntries.length > 0) {\n      const [selectedServer, info] = serverEntries[0];\n      console.log(`✅ 选择队列最少的服务器: ${selectedServer}, 队列数: ${info.queue.total}`);\n\n      // 锁定选择的服务器一段时间\n      this.lockServer(selectedServer);\n\n      return selectedServer;\n    }\n\n    // 如果没有健康的服务器，尝试回退策略\n    return this.fallbackToHealthyServer();\n  }\n\n  /**\n   * 回退到任何健康的服务器\n   * @returns {Promise<string>} 健康的服务器URL\n   */\n  async fallbackToHealthyServer() {\n    console.log('⚠️ 没有找到队列信息，尝试回退到任何健康的服务器...');\n\n    // 重新检查所有服务器健康状态\n    for (const serverUrl of this.servers) {\n      const health = await this.checkServerHealth(serverUrl);\n      if (health.healthy) {\n        console.log(`✅ 回退到健康的服务器: ${serverUrl}`);\n\n        // 锁定选择的服务器一段时间\n        this.lockServer(serverUrl);\n\n        return serverUrl;\n      }\n    }\n\n    // 如果所有服务器都不健康，返回主服务器\n    console.warn('❌ 所有服务器都不健康，返回主服务器');\n    return this.servers[0];\n  }\n\n  /**\n   * 锁定服务器一段时间\n   * @param {string} serverUrl - 要锁定的服务器URL\n   */\n  lockServer(serverUrl) {\n    this.lockedServer = serverUrl;\n    this.lastLockTime = Date.now();\n    console.log(`🔒 锁定服务器: ${serverUrl}, 持续${this.lockDuration / 1000}秒`);\n  }\n\n  /**\n   * 获取当前锁定的可用服务器\n   * @returns {Promise<string|null>} 锁定的服务器URL或null\n   */\n  async getLockedAvailableServer() {\n    // 如果没有锁定的服务器或锁已过期，返回null\n    if (!this.lockedServer || Date.now() - this.lastLockTime > this.lockDuration) {\n      return null;\n    }\n\n    // 检查锁定的服务器是否健康\n    const health = await this.checkServerHealth(this.lockedServer);\n    if (health.healthy) {\n      console.log(`🔒 使用锁定的服务器: ${this.lockedServer}`);\n      return this.lockedServer;\n    }\n\n    // 锁定的服务器不健康，释放锁\n    console.log(`⚠️ 锁定的服务器不健康，释放锁: ${this.lockedServer}`);\n    this.lockedServer = null;\n    return null;\n  }\n\n  /**\n   * 记录服务器失败并尝试切换\n   * @param {string} serverUrl - 失败的服务器URL\n   * @returns {Promise<boolean>} 是否成功切换到新服务器\n   */\n  async recordFailure(serverUrl) {\n    // 增加失败计数\n    const count = (this.failureCount.get(serverUrl) || 0) + 1;\n    this.failureCount.set(serverUrl, count);\n\n    console.log(`📝 记录服务器失败: ${serverUrl}, 失败次数: ${count}`);\n\n    // 如果失败次数超过阈值，标记为不健康\n    if (count >= this.config.SWITCH_THRESHOLD) {\n      console.log(`⚠️ 服务器 ${serverUrl} 失败次数超过阈值(${this.config.SWITCH_THRESHOLD})，标记为不健康`);\n\n      this.serverLoads.set(serverUrl, {\n        healthy: false,\n        queue: { running: 0, pending: 0, total: 999999 },\n        lastCheck: Date.now(),\n        error: '失败次数过多'\n      });\n\n      // 如果是当前锁定的服务器，释放锁\n      if (this.lockedServer === serverUrl) {\n        this.lockedServer = null;\n      }\n\n      // 如果启用了自动切换，选择新的服务器\n      if (this.config.AUTO_SWITCH) {\n        console.log('🔄 尝试切换到新服务器...');\n\n        // 选择新的服务器\n        const newServer = await this.selectServerByMinQueue();\n\n        if (newServer && newServer !== serverUrl) {\n          console.log(`✅ 成功切换到新服务器: ${newServer}`);\n          return true;\n        } else {\n          console.log('❌ 没有可用的备用服务器');\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * 重置服务器失败计数\n   * @param {string} serverUrl - 服务器URL\n   */\n  resetFailureCount(serverUrl) {\n    if (this.failureCount.has(serverUrl)) {\n      this.failureCount.set(serverUrl, 0);\n      console.log(`🔄 重置服务器 ${serverUrl} 的失败计数`);\n    }\n  }\n\n  /**\n   * 获取服务器状态信息\n   * @returns {Object} 服务器状态信息\n   */\n  getServerStatus() {\n    const status = {\n      servers: this.servers,\n      loads: Object.fromEntries(this.serverLoads),\n      lockedServer: this.lockedServer,\n      lockExpiry: this.lockedServer ? this.lastLockTime + this.lockDuration : null,\n      failures: Object.fromEntries(this.failureCount),\n      config: this.config\n    };\n\n    return status;\n  }\n}\n\nmodule.exports = ComfyUIServerManager;\n"
        }
    ]
}