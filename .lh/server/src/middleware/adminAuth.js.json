{
    "sourceFile": "server/src/middleware/adminAuth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752985272341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752985333322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,21 @@\n       });\n     }\n \n     const token = authHeader.substring(7);\n+\n+    // 开发环境下的特殊处理：允许使用 admin-token 作为测试token\n+    if (process.env.NODE_ENV === 'development' && token === 'admin-token') {\n+      console.log('🔧 使用开发环境测试token');\n+      req.admin = {\n+        id: 1,\n+        username: 'admin',\n+        role: 'super_admin',\n+        status: 'active'\n+      };\n+      return next();\n+    }\n+\n     const decoded = verifyToken(token);\n \n     // 确保 admins 表存在\n     try {\n"
                }
            ],
            "date": 1752985272340,
            "name": "Commit-0",
            "content": "const jwt = require('jsonwebtoken');\nconst { query } = require('../config/database');\n\n// JWT密钥\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-this-in-production';\n\n// 生成JWT令牌\nfunction generateToken(admin) {\n  const payload = {\n    id: admin.id,\n    username: admin.username,\n    role: admin.role,\n    type: 'admin'\n  };\n\n  return jwt.sign(payload, JWT_SECRET, {\n    expiresIn: '7d',\n    issuer: 'imagic-admin',\n    audience: 'imagic-admin-panel'\n  });\n}\n\n// 验证JWT令牌\nfunction verifyToken(token) {\n  try {\n    return jwt.verify(token, JWT_SECRET, {\n      issuer: 'imagic-admin',\n      audience: 'imagic-admin-panel'\n    });\n  } catch (error) {\n    throw new Error('无效的令牌');\n  }\n}\n\n// 管理员认证中间件\nconst adminAuth = async (req, res, next) => {\n  try {\n    const authHeader = req.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({\n        success: false,\n        message: '未提供认证令牌',\n        code: 'NO_TOKEN'\n      });\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = verifyToken(token);\n\n    // 确保 admins 表存在\n    try {\n      await query(`\n        CREATE TABLE IF NOT EXISTS admins (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          username VARCHAR(50) UNIQUE NOT NULL COMMENT '管理员用户名',\n          password VARCHAR(255) NOT NULL COMMENT '密码哈希',\n          email VARCHAR(100) UNIQUE NOT NULL COMMENT '邮箱',\n          real_name VARCHAR(50) COMMENT '真实姓名',\n          role ENUM('super_admin', 'admin', 'operator') DEFAULT 'admin' COMMENT '角色',\n          status ENUM('active', 'inactive', 'locked') DEFAULT 'active' COMMENT '状态',\n          last_login_at DATETIME NULL COMMENT '最后登录时间',\n          last_login_ip VARCHAR(45) NULL COMMENT '最后登录IP',\n          login_attempts INT DEFAULT 0 COMMENT '登录尝试次数',\n          locked_until DATETIME NULL COMMENT '锁定到期时间',\n          created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n          updated_at DATETIME NULL COMMENT '更新时间',\n          INDEX idx_username (username),\n          INDEX idx_email (email),\n          INDEX idx_status (status)\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='管理员表'\n      `);\n\n      // 检查是否有管理员账号，如果没有则创建默认账号\n      const adminCount = await query('SELECT COUNT(*) as count FROM admins');\n      if (adminCount[0].count === 0) {\n        const bcrypt = require('bcryptjs');\n        const defaultPassword = 'admin123456';\n        const hashedPassword = await bcrypt.hash(defaultPassword, 10);\n\n        await query(`\n          INSERT INTO admins (username, password, email, real_name, role, status, created_at)\n          VALUES (?, ?, ?, ?, ?, ?, NOW())\n        `, ['admin', hashedPassword, 'admin@imagic.com', '系统管理员', 'super_admin', 'active']);\n\n        console.log('✅ 默认管理员账号已创建: admin / admin123456');\n      }\n    } catch (tableError) {\n      console.error('❌ 创建管理员表失败:', tableError);\n    }\n\n    // 验证管理员是否存在且状态正常\n    const admins = await query(\n      'SELECT id, username, role, status FROM admins WHERE id = ? AND status = \"active\"',\n      [decoded.id]\n    );\n\n    if (admins.length === 0) {\n      return res.status(401).json({\n        success: false,\n        message: '管理员账户不存在或已被禁用',\n        code: 'ADMIN_NOT_FOUND'\n      });\n    }\n\n    // 将管理员信息添加到请求对象\n    req.admin = admins[0];\n    next();\n  } catch (error) {\n    console.error('❌ 管理员认证失败:', error);\n    return res.status(401).json({\n      success: false,\n      message: '认证失败',\n      code: 'AUTH_FAILED'\n    });\n  }\n};\n\n// 角色权限中间件\nfunction requireRole(allowedRoles) {\n  return (req, res, next) => {\n    if (!req.admin) {\n      return res.status(401).json({\n        success: false,\n        message: '未认证',\n        code: 'NOT_AUTHENTICATED'\n      });\n    }\n\n    const adminRole = req.admin.role;\n\n    // 如果是数组，检查是否包含管理员角色\n    if (Array.isArray(allowedRoles)) {\n      if (!allowedRoles.includes(adminRole)) {\n        return res.status(403).json({\n          success: false,\n          message: '权限不足',\n          code: 'INSUFFICIENT_PERMISSIONS'\n        });\n      }\n    } else {\n      // 如果是字符串，直接比较\n      if (adminRole !== allowedRoles) {\n        return res.status(403).json({\n          success: false,\n          message: '权限不足',\n          code: 'INSUFFICIENT_PERMISSIONS'\n        });\n      }\n    }\n\n    next();\n  };\n}\n\nmodule.exports = {\n  generateToken,\n  verifyToken,\n  adminAuth,\n  requireRole,\n  JWT_SECRET\n};\n"
        }
    ]
}