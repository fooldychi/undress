{
    "sourceFile": "server/create-production-package.bat",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753707210833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753707241021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,4 +231,152 @@\n echo.\n echo initDeploymentConfig^(^);\n ) > \"%PACKAGE_NAME%\\src\\scripts\\init-deployment-config.js\"\n echo [SUCCESS] init-deployment-config.js 已创建\n+\n+REM 复制配置文件\n+echo [INFO] 复制配置文件...\n+if exist \"production-package.json\" (\n+    copy \"production-package.json\" \"%PACKAGE_NAME%\\package.json\"\n+    echo [SUCCESS] package.json 已复制\n+) else (\n+    echo [ERROR] production-package.json 不存在！\n+    pause\n+    exit /b 1\n+)\n+\n+if exist \".env.production\" (\n+    copy \".env.production\" \"%PACKAGE_NAME%\\\"\n+    echo [SUCCESS] .env.production 已复制\n+) else (\n+    echo [ERROR] .env.production 不存在！\n+    pause\n+    exit /b 1\n+)\n+\n+if exist \"ecosystem.config.js\" (\n+    copy \"ecosystem.config.js\" \"%PACKAGE_NAME%\\\"\n+    echo [SUCCESS] ecosystem.config.js 已复制\n+) else (\n+    echo [ERROR] ecosystem.config.js 不存在！\n+    pause\n+    exit /b 1\n+)\n+\n+if exist \"deploy.bat\" (\n+    copy \"deploy.bat\" \"%PACKAGE_NAME%\\\"\n+    echo [SUCCESS] deploy.bat 已复制\n+) else (\n+    echo [WARNING] deploy.bat 不存在\n+)\n+\n+REM 复制SQL脚本（如果存在）\n+echo [INFO] 复制SQL脚本...\n+if exist \"sql\" (\n+    xcopy /E /I \"sql\" \"%PACKAGE_NAME%\\sql\"\n+    echo [SUCCESS] SQL脚本已复制\n+) else (\n+    echo [WARNING] sql 目录不存在\n+)\n+\n+REM 复制其他可能的文件\n+echo [INFO] 复制其他文件...\n+if exist \"README.md\" (\n+    copy \"README.md\" \"%PACKAGE_NAME%\\\"\n+    echo [SUCCESS] README.md 已复制\n+)\n+\n+if exist \".gitignore\" (\n+    copy \".gitignore\" \"%PACKAGE_NAME%\\\"\n+    echo [SUCCESS] .gitignore 已复制\n+)\n+\n+REM 创建部署说明文件\n+echo [INFO] 创建部署说明文件...\n+(\n+echo # AIMagic 服务器部署包\n+echo.\n+echo ## 部署步骤\n+echo 1. 将此目录上传到服务器\n+echo 2. 在服务器上运行: npm install --production\n+echo 3. 运行: node src/scripts/init-deployment-config.js\n+echo 4. 运行: deploy.bat\n+echo.\n+echo ## 文件清单\n+echo - src/: 源代码目录\n+echo - package.json: 依赖配置\n+echo - .env.production: 生产环境配置\n+echo - ecosystem.config.js: PM2配置\n+echo - deploy.bat: 部署脚本\n+echo.\n+echo ## 打包时间\n+echo %date% %time%\n+echo.\n+echo ## 注意事项\n+echo - 确保MySQL数据库已创建\n+echo - 确保.env.production中的配置正确\n+echo - 确保服务器已安装Node.js和PM2\n+) > \"%PACKAGE_NAME%\\DEPLOYMENT_README.md\"\n+echo [SUCCESS] 部署说明文件已创建\n+\n+REM 验证关键文件\n+echo [INFO] 验证关键文件...\n+set ERROR_COUNT=0\n+\n+if not exist \"%PACKAGE_NAME%\\src\\app.js\" (\n+    echo [ERROR] 缺少关键文件: src\\app.js\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if not exist \"%PACKAGE_NAME%\\package.json\" (\n+    echo [ERROR] 缺少关键文件: package.json\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if not exist \"%PACKAGE_NAME%\\.env.production\" (\n+    echo [ERROR] 缺少关键文件: .env.production\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if not exist \"%PACKAGE_NAME%\\ecosystem.config.js\" (\n+    echo [ERROR] 缺少关键文件: ecosystem.config.js\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if not exist \"%PACKAGE_NAME%\\src\\scripts\\health-check.js\" (\n+    echo [ERROR] 缺少关键文件: src\\scripts\\health-check.js\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if not exist \"%PACKAGE_NAME%\\src\\scripts\\init-deployment-config.js\" (\n+    echo [ERROR] 缺少关键文件: src\\scripts\\init-deployment-config.js\n+    set /a ERROR_COUNT+=1\n+)\n+\n+if %ERROR_COUNT% GTR 0 (\n+    echo.\n+    echo [ERROR] 发现 %ERROR_COUNT% 个错误，请检查后重新打包！\n+    pause\n+    exit /b 1\n+)\n+\n+echo.\n+echo ========================================\n+echo          打包完成！\n+echo ========================================\n+echo 包名: %PACKAGE_NAME%\n+echo 时间: %date% %time%\n+echo 位置: %cd%\\%PACKAGE_NAME%\n+echo ========================================\n+echo.\n+echo [SUCCESS] 所有文件验证通过！\n+echo [INFO] 请将 %PACKAGE_NAME% 目录上传到服务器\n+echo [INFO] 上传后在服务器上运行 deploy.bat\n+echo.\n+\n+REM 显示目录结构\n+echo [INFO] 部署包目录结构:\n+tree /F \"%PACKAGE_NAME%\"\n+\n+echo.\n+echo 按任意键退出...\n+pause >nul\n"
                },
                {
                    "date": 1753707924606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n @echo off\n-chcp 65001 >nul\n+setlocal enabledelayedexpansion\n echo ========================================\n-echo    AIMagic 生产环境打包脚本 v2.0\n+echo    AIMagic Production Package Script v2.0\n echo ========================================\n-echo 开始时间: %date% %time%\n+echo Start Time: %date% %time%\n echo ========================================\n echo.\n \n-REM 设置变量\n+REM Set variables\n set PACKAGE_NAME=aimagic-server-production\n set TIMESTAMP=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%\n set TIMESTAMP=%TIMESTAMP: =0%\n \n"
                },
                {
                    "date": 1753707942414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,31 +11,31 @@\n set PACKAGE_NAME=aimagic-server-production\n set TIMESTAMP=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%\n set TIMESTAMP=%TIMESTAMP: =0%\n \n-echo [INFO] 清理旧的部署包...\n+[INFO] Cleaning old deployment package...\n if exist \"%PACKAGE_NAME%\" (\n     rmdir /s /q \"%PACKAGE_NAME%\"\n-    echo [SUCCESS] 旧部署包已清理\n+    echo [SUCCESS] Old package cleaned\n )\n \n-echo [INFO] 创建部署包目录结构...\n-mkdir \"%PACKAGE_NAME%\"\n-mkdir \"%PACKAGE_NAME%\\src\"\n-mkdir \"%PACKAGE_NAME%\\src\\config\"\n-mkdir \"%PACKAGE_NAME%\\src\\controllers\"\n-mkdir \"%PACKAGE_NAME%\\src\\middleware\"\n-mkdir \"%PACKAGE_NAME%\\src\\models\"\n-mkdir \"%PACKAGE_NAME%\\src\\routes\"\n-mkdir \"%PACKAGE_NAME%\\src\\services\"\n-mkdir \"%PACKAGE_NAME%\\src\\utils\"\n-mkdir \"%PACKAGE_NAME%\\src\\scripts\"\n-mkdir \"%PACKAGE_NAME%\\logs\"\n-mkdir \"%PACKAGE_NAME%\\uploads\"\n-mkdir \"%PACKAGE_NAME%\\uploads\\images\"\n-mkdir \"%PACKAGE_NAME%\\uploads\\temp\"\n-mkdir \"%PACKAGE_NAME%\\sql\"\n-echo [SUCCESS] 目录结构创建完成\n+echo [INFO] Creating package directory structure...\n+mkdir \"%PACKAGE_NAME%\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\config\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\controllers\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\middleware\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\models\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\routes\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\services\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\utils\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\src\\scripts\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\logs\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\uploads\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\uploads\\images\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\uploads\\temp\" 2>nul\n+mkdir \"%PACKAGE_NAME%\\sql\" 2>nul\n+echo [SUCCESS] Directory structure created\n \n echo [INFO] 复制核心源代码文件...\n REM 复制主应用文件\n if exist \"src\\app.js\" (\n"
                }
            ],
            "date": 1753707210833,
            "name": "Commit-0",
            "content": "@echo off\nchcp 65001 >nul\necho ========================================\necho    AIMagic 生产环境打包脚本 v2.0\necho ========================================\necho 开始时间: %date% %time%\necho ========================================\necho.\n\nREM 设置变量\nset PACKAGE_NAME=aimagic-server-production\nset TIMESTAMP=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%\nset TIMESTAMP=%TIMESTAMP: =0%\n\necho [INFO] 清理旧的部署包...\nif exist \"%PACKAGE_NAME%\" (\n    rmdir /s /q \"%PACKAGE_NAME%\"\n    echo [SUCCESS] 旧部署包已清理\n)\n\necho [INFO] 创建部署包目录结构...\nmkdir \"%PACKAGE_NAME%\"\nmkdir \"%PACKAGE_NAME%\\src\"\nmkdir \"%PACKAGE_NAME%\\src\\config\"\nmkdir \"%PACKAGE_NAME%\\src\\controllers\"\nmkdir \"%PACKAGE_NAME%\\src\\middleware\"\nmkdir \"%PACKAGE_NAME%\\src\\models\"\nmkdir \"%PACKAGE_NAME%\\src\\routes\"\nmkdir \"%PACKAGE_NAME%\\src\\services\"\nmkdir \"%PACKAGE_NAME%\\src\\utils\"\nmkdir \"%PACKAGE_NAME%\\src\\scripts\"\nmkdir \"%PACKAGE_NAME%\\logs\"\nmkdir \"%PACKAGE_NAME%\\uploads\"\nmkdir \"%PACKAGE_NAME%\\uploads\\images\"\nmkdir \"%PACKAGE_NAME%\\uploads\\temp\"\nmkdir \"%PACKAGE_NAME%\\sql\"\necho [SUCCESS] 目录结构创建完成\n\necho [INFO] 复制核心源代码文件...\nREM 复制主应用文件\nif exist \"src\\app.js\" (\n    copy \"src\\app.js\" \"%PACKAGE_NAME%\\src\\\"\n    echo [SUCCESS] app.js 已复制\n) else (\n    echo [ERROR] src\\app.js 不存在！\n    pause\n    exit /b 1\n)\n\nREM 复制配置文件\necho [INFO] 复制配置目录...\nif exist \"src\\config\" (\n    xcopy /E /I \"src\\config\" \"%PACKAGE_NAME%\\src\\config\"\n    echo [SUCCESS] config 目录已复制\n) else (\n    echo [WARNING] src\\config 目录不存在\n)\n\nREM 复制控制器\necho [INFO] 复制控制器目录...\nif exist \"src\\controllers\" (\n    xcopy /E /I \"src\\controllers\" \"%PACKAGE_NAME%\\src\\controllers\"\n    echo [SUCCESS] controllers 目录已复制\n) else (\n    echo [WARNING] src\\controllers 目录不存在\n)\n\nREM 复制中间件\necho [INFO] 复制中间件目录...\nif exist \"src\\middleware\" (\n    xcopy /E /I \"src\\middleware\" \"%PACKAGE_NAME%\\src\\middleware\"\n    echo [SUCCESS] middleware 目录已复制\n) else (\n    echo [WARNING] src\\middleware 目录不存在\n)\n\nREM 复制模型\necho [INFO] 复制模型目录...\nif exist \"src\\models\" (\n    xcopy /E /I \"src\\models\" \"%PACKAGE_NAME%\\src\\models\"\n    echo [SUCCESS] models 目录已复制\n) else (\n    echo [WARNING] src\\models 目录不存在\n)\n\nREM 复制路由\necho [INFO] 复制路由目录...\nif exist \"src\\routes\" (\n    xcopy /E /I \"src\\routes\" \"%PACKAGE_NAME%\\src\\routes\"\n    echo [SUCCESS] routes 目录已复制\n) else (\n    echo [WARNING] src\\routes 目录不存在\n)\n\nREM 复制服务\necho [INFO] 复制服务目录...\nif exist \"src\\services\" (\n    xcopy /E /I \"src\\services\" \"%PACKAGE_NAME%\\src\\services\"\n    echo [SUCCESS] services 目录已复制\n) else (\n    echo [WARNING] src\\services 目录不存在\n)\n\nREM 复制工具类\necho [INFO] 复制工具类目录...\nif exist \"src\\utils\" (\n    xcopy /E /I \"src\\utils\" \"%PACKAGE_NAME%\\src\\utils\"\n    echo [SUCCESS] utils 目录已复制\n) else (\n    echo [WARNING] src\\utils 目录不存在\n)\n\nREM 创建必需的脚本文件\necho [INFO] 创建必需的脚本文件...\n\nREM 创建健康检查脚本\necho [INFO] 创建健康检查脚本...\n(\necho const http = require^('http'^);\necho const mysql = require^('mysql2/promise'^);\necho require^('dotenv'^).config^({ path: '.env.production' }^);\necho.\necho async function healthCheck^(^) {\necho     console.log^('🔍 开始系统健康检查...'^);\necho\necho     try {\necho         // 1. 检查数据库连接\necho         console.log^('📊 检查数据库连接...'^);\necho         const connection = await mysql.createConnection^({\necho             host: process.env.DB_HOST ^|^| 'localhost',\necho             user: process.env.DB_USER ^|^| 'aimagic',\necho             password: process.env.DB_PASSWORD,\necho             database: process.env.DB_NAME ^|^| 'aimagic'\necho         }^);\necho\necho         await connection.execute^('SELECT 1'^);\necho         await connection.end^(^);\necho         console.log^('✅ 数据库连接正常'^);\necho\necho         // 2. 检查API服务\necho         console.log^('🌐 检查API服务...'^);\necho         const options = {\necho             hostname: 'localhost',\necho             port: 3007,\necho             path: '/api/health',\necho             method: 'GET',\necho             timeout: 5000\necho         };\necho\necho         const req = http.request^(options, ^(res^) =^> {\necho             if ^(res.statusCode === 200^) {\necho                 console.log^('✅ API服务正常'^);\necho                 console.log^('🎉 所有检查通过！'^);\necho                 process.exit^(0^);\necho             } else {\necho                 throw new Error^(`API响应异常: ${res.statusCode}`^);\necho             }\necho         }^);\necho\necho         req.on^('error', ^(err^) =^> {\necho             console.error^('❌ 健康检查失败:', err.message^);\necho             process.exit^(1^);\necho         }^);\necho\necho         req.setTimeout^(5000^);\necho         req.end^(^);\necho\necho     } catch ^(error^) {\necho         console.error^('❌ 健康检查失败:', error.message^);\necho         process.exit^(1^);\necho     }\necho }\necho.\necho healthCheck^(^);\n) > \"%PACKAGE_NAME%\\src\\scripts\\health-check.js\"\necho [SUCCESS] health-check.js 已创建\n\nREM 创建初始化脚本\necho [INFO] 创建初始化脚本...\n(\necho const mysql = require^('mysql2/promise'^);\necho require^('dotenv'^).config^({ path: '.env.production' }^);\necho.\necho async function initDeploymentConfig^(^) {\necho     console.log^('🚀 开始初始化部署配置...'^);\necho\necho     try {\necho         const connection = await mysql.createConnection^({\necho             host: process.env.DB_HOST ^|^| 'localhost',\necho             user: process.env.DB_USER ^|^| 'aimagic',\necho             password: process.env.DB_PASSWORD,\necho             database: process.env.DB_NAME ^|^| 'aimagic'\necho         }^);\necho\necho         // 创建系统配置表\necho         await connection.execute^(`\necho             CREATE TABLE IF NOT EXISTS system_config ^(\necho                 id INT PRIMARY KEY AUTO_INCREMENT,\necho                 config_key VARCHAR^(255^) UNIQUE NOT NULL,\necho                 config_value TEXT,\necho                 description TEXT,\necho                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\necho                 updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\necho             ^)\necho         `^);\necho\necho         console.log^('✅ 系统配置表创建成功'^);\necho\necho         // 插入默认配置\necho         const defaultConfigs = [\necho             ['app_name', 'AIMagic', 'Application name'],\necho             ['app_version', '1.0.0', 'Application version'],\necho             ['deployment_time', new Date^(^).toISOString^(^), 'Deployment timestamp']\necho         ];\necho\necho         for ^(const [key, value, desc] of defaultConfigs^) {\necho             await connection.execute^(\necho                 'INSERT IGNORE INTO system_config ^(config_key, config_value, description^) VALUES ^(?, ?, ?^)',\necho                 [key, value, desc]\necho             ^);\necho         }\necho\necho         await connection.end^(^);\necho         console.log^('🎉 部署配置初始化完成！'^);\necho\necho     } catch ^(error^) {\necho         console.error^('❌ 初始化失败:', error.message^);\necho         process.exit^(1^);\necho     }\necho }\necho.\necho initDeploymentConfig^(^);\n) > \"%PACKAGE_NAME%\\src\\scripts\\init-deployment-config.js\"\necho [SUCCESS] init-deployment-config.js 已创建\n"
        }
    ]
}