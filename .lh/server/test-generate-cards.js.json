{
    "sourceFile": "server/test-generate-cards.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753016026978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753016026978,
            "name": "Commit-0",
            "content": "// 直接测试生成等级卡接口\nconst { query } = require('./src/config/database');\n\nasync function testGenerateCards() {\n  try {\n    console.log('🧪 测试生成等级卡功能...\\n');\n\n    // 1. 检查表结构\n    console.log('📋 检查表结构...');\n\n    try {\n      const cardTypesStructure = await query('DESCRIBE card_types');\n      console.log('✅ card_types 表结构:');\n      cardTypesStructure.forEach(col => {\n        console.log(`  ${col.Field}: ${col.Type}`);\n      });\n    } catch (error) {\n      console.log('❌ card_types 表不存在:', error.message);\n    }\n\n    try {\n      const levelCardsStructure = await query('DESCRIBE level_cards');\n      console.log('✅ level_cards 表结构:');\n      levelCardsStructure.forEach(col => {\n        console.log(`  ${col.Field}: ${col.Type}`);\n      });\n    } catch (error) {\n      console.log('❌ level_cards 表不存在:', error.message);\n\n      // 创建表\n      console.log('🔧 创建 level_cards 表...');\n      await query(`\n        CREATE TABLE IF NOT EXISTS level_cards (\n          id INT AUTO_INCREMENT PRIMARY KEY,\n          card_number VARCHAR(20) UNIQUE NOT NULL COMMENT '卡号',\n          card_password VARCHAR(20) NOT NULL COMMENT '卡密',\n          type_id INT NOT NULL COMMENT '等级卡类型ID',\n          remaining_points INT NOT NULL COMMENT '剩余积分',\n          status ENUM('active', 'used', 'expired', 'disabled') DEFAULT 'active' COMMENT '状态',\n          bound_user_id INT NULL COMMENT '绑定的用户ID',\n          bound_at DATETIME NULL COMMENT '绑定时间',\n          expires_at DATETIME NULL COMMENT '过期时间',\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,\n          INDEX idx_card_number (card_number),\n          INDEX idx_bound_user (bound_user_id),\n          INDEX idx_status (status),\n          INDEX idx_type (type_id)\n        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='等级卡表'\n      `);\n      console.log('✅ level_cards 表创建成功');\n    }\n\n    // 2. 获取等级卡类型\n    console.log('\\n📋 获取等级卡类型...');\n    const cardTypes = await query('SELECT * FROM card_types LIMIT 1');\n\n    if (cardTypes.length === 0) {\n      console.log('❌ 没有找到等级卡类型');\n      return;\n    }\n\n    const cardType = cardTypes[0];\n    console.log('✅ 找到等级卡类型:', cardType);\n\n    // 3. 生成测试卡号和密码\n    console.log('\\n🎫 生成测试等级卡...');\n\n    function generateCardNumber(cardTypeName, index) {\n      const typePrefix = {\n        '基础卡': 'BC',\n        '高级卡': 'AC',\n        '至尊卡': 'PC',\n        '体验卡': 'EXP'\n      };\n\n      const prefix = typePrefix[cardTypeName] || 'CARD';\n      const timestamp = Date.now().toString().slice(-8);\n      const indexStr = String(index).padStart(2, '0');\n\n      return `${prefix}${timestamp}${indexStr}`;\n    }\n\n    function generateCardPassword() {\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n      let password = '';\n      for (let i = 0; i < 8; i++) {\n        password += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      return password;\n    }\n\n    const cardNumber = generateCardNumber(cardType.name, 1);\n    const cardPassword = generateCardPassword();\n\n    console.log(`📝 生成卡号: ${cardNumber}`);\n    console.log(`🔑 生成卡密: ${cardPassword}`);\n\n    // 4. 插入数据库\n    console.log('\\n💾 插入数据库...');\n\n    try {\n      await query(`\n        INSERT INTO level_cards (card_number, card_password, type_id, remaining_points)\n        VALUES (?, ?, ?, ?)\n      `, [cardNumber, cardPassword, cardType.id, cardType.points]);\n\n      console.log('✅ 等级卡生成成功！');\n\n      // 验证插入\n      const insertedCard = await query(`\n        SELECT * FROM level_cards WHERE card_number = ?\n      `, [cardNumber]);\n\n      console.log('📊 插入的数据:', insertedCard[0]);\n\n    } catch (insertError) {\n      console.error('❌ 插入失败:', insertError);\n      console.error('错误详情:', {\n        message: insertError.message,\n        code: insertError.code,\n        sqlState: insertError.sqlState\n      });\n    }\n\n  } catch (error) {\n    console.error('❌ 测试失败:', error);\n  }\n}\n\n// 运行测试\ntestGenerateCards();\n"
        }
    ]
}