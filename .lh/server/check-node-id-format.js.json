{
    "sourceFile": "server/check-node-id-format.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752831722084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752831830729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,41 +29,54 @@\n       let actualNodeId = node_id;\n       let depth = 0;\n \n       // 检查是否包含JSON结构的特征\n-      if (typeof node_id === 'string' && node_id.includes('{\"nodeId\":')) {\n-        isJsonFormat = true;\n+      if (typeof node_id === 'string' && (node_id.includes('{\"nodeId\":') || node_id.startsWith('{'))) {\n+        try {\n+          // 尝试解析JSON\n+          const parsed = JSON.parse(node_id);\n+          if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n+            isJsonFormat = true;\n \n-        // 递归解析嵌套的JSON字符串\n-        let temp = node_id;\n-        while (typeof temp === 'string' && temp.includes('{\"nodeId\":')) {\n-          try {\n-            const parsed = JSON.parse(temp);\n-            if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n-              temp = parsed.nodeId;\n-              depth++;\n-            } else {\n-              break;\n+            // 递归解析嵌套的JSON字符串\n+            let temp = parsed.nodeId;\n+            depth = 1;\n+\n+            while (typeof temp === 'string') {\n+              try {\n+                if (temp.startsWith('{')) {\n+                  const innerParsed = JSON.parse(temp);\n+                  if (innerParsed && typeof innerParsed === 'object' && innerParsed.nodeId) {\n+                    temp = innerParsed.nodeId;\n+                    depth++;\n+                  } else {\n+                    break;\n+                  }\n+                } else {\n+                  break;\n+                }\n+              } catch (e) {\n+                break;\n+              }\n             }\n-          } catch (e) {\n-            break;\n+\n+            actualNodeId = temp;\n+\n+            issues.push({\n+              id,\n+              workflow_type,\n+              node_type,\n+              node_key,\n+              original: node_id,\n+              extracted: actualNodeId,\n+              depth,\n+              severity: depth > 2 ? 'high' : 'medium'\n+            });\n+            issueCount++;\n           }\n+        } catch (e) {\n+          // 不是有效的JSON，忽略\n         }\n-        actualNodeId = temp;\n-\n-        if (depth > 0) {\n-          issues.push({\n-            id,\n-            workflow_type,\n-            node_type,\n-            node_key,\n-            original: node_id,\n-            extracted: actualNodeId,\n-            depth,\n-            severity: depth > 2 ? 'high' : 'medium'\n-          });\n-          issueCount++;\n-        }\n       }\n \n       // 显示节点信息\n       const status = isJsonFormat ? '❌ JSON格式' : '✅ 正常';\n"
                }
            ],
            "date": 1752831722084,
            "name": "Commit-0",
            "content": "const { query } = require('./src/config/database');\n\n/**\n * 检查数据库中节点ID的格式，识别可能的JSON序列化问题\n */\nasync function checkNodeIdFormat() {\n  console.log('🔍 检查数据库中的节点ID格式...');\n  console.log('='.repeat(60));\n\n  try {\n    // 获取所有节点配置\n    const nodeConfigs = await query(`\n      SELECT id, workflow_type, node_type, node_key, node_id, node_order, created_at, updated_at\n      FROM workflow_configs\n      ORDER BY workflow_type, node_type, node_key\n    `);\n\n    console.log(`📊 找到 ${nodeConfigs.length} 个节点配置`);\n    console.log('');\n\n    let issueCount = 0;\n    const issues = [];\n\n    nodeConfigs.forEach(config => {\n      const { id, workflow_type, node_type, node_key, node_id } = config;\n\n      // 检查是否是JSON格式的字符串\n      let isJsonFormat = false;\n      let actualNodeId = node_id;\n      let depth = 0;\n\n      // 检查是否包含JSON结构的特征\n      if (typeof node_id === 'string' && node_id.includes('{\"nodeId\":')) {\n        isJsonFormat = true;\n\n        // 递归解析嵌套的JSON字符串\n        let temp = node_id;\n        while (typeof temp === 'string' && temp.includes('{\"nodeId\":')) {\n          try {\n            const parsed = JSON.parse(temp);\n            if (parsed && typeof parsed === 'object' && parsed.nodeId) {\n              temp = parsed.nodeId;\n              depth++;\n            } else {\n              break;\n            }\n          } catch (e) {\n            break;\n          }\n        }\n        actualNodeId = temp;\n\n        if (depth > 0) {\n          issues.push({\n            id,\n            workflow_type,\n            node_type,\n            node_key,\n            original: node_id,\n            extracted: actualNodeId,\n            depth,\n            severity: depth > 2 ? 'high' : 'medium'\n          });\n          issueCount++;\n        }\n      }\n\n      // 显示节点信息\n      const status = isJsonFormat ? '❌ JSON格式' : '✅ 正常';\n      const displayValue = node_id.length > 80 ? node_id.substring(0, 80) + '...' : node_id;\n      console.log(`${status} ${workflow_type}.${node_type}.${node_key}: ${displayValue}`);\n\n      if (isJsonFormat && actualNodeId !== node_id) {\n        console.log(`    🔧 提取的实际节点ID: ${actualNodeId} (嵌套深度: ${depth})`);\n      }\n    });\n\n    console.log('');\n    console.log('='.repeat(60));\n    console.log(`📋 检查完成: 发现 ${issueCount} 个问题节点`);\n\n    if (issues.length > 0) {\n      console.log('');\n      console.log('🚨 问题详情:');\n      issues.forEach((issue, index) => {\n        console.log(`${index + 1}. ${issue.workflow_type}.${issue.node_type}.${issue.node_key}`);\n        console.log(`   ID: ${issue.id}`);\n        console.log(`   原始值: ${issue.original}`);\n        console.log(`   提取值: ${issue.extracted}`);\n        console.log(`   嵌套深度: ${issue.depth}`);\n        console.log(`   严重程度: ${issue.severity}`);\n        console.log('');\n      });\n\n      console.log('🔧 修复建议:');\n      console.log('1. 运行修复脚本清理这些节点ID');\n      console.log('2. 检查前端代码确保不再产生嵌套JSON');\n      console.log('3. 在后台管理页面重新保存配置');\n    } else {\n      console.log('✅ 所有节点ID格式正常！');\n    }\n\n    return {\n      total: nodeConfigs.length,\n      issues: issues.length,\n      details: issues\n    };\n\n  } catch (error) {\n    console.error('❌ 检查失败:', error);\n    throw error;\n  }\n}\n\n/**\n * 修复有问题的节点ID\n */\nasync function fixNodeIdFormat() {\n  console.log('🔧 开始修复节点ID格式...');\n\n  try {\n    const checkResult = await checkNodeIdFormat();\n\n    if (checkResult.issues === 0) {\n      console.log('✅ 没有需要修复的节点ID');\n      return;\n    }\n\n    console.log(`🔧 准备修复 ${checkResult.issues} 个问题节点...`);\n\n    let fixedCount = 0;\n\n    for (const issue of checkResult.details) {\n      try {\n        console.log(`🔧 修复节点 ${issue.workflow_type}.${issue.node_type}.${issue.node_key}...`);\n\n        const result = await query(`\n          UPDATE workflow_configs\n          SET node_id = ?, updated_at = NOW()\n          WHERE id = ?\n        `, [issue.extracted, issue.id]);\n\n        if (result.affectedRows > 0) {\n          console.log(`✅ 修复成功: ${issue.original} -> ${issue.extracted}`);\n          fixedCount++;\n        } else {\n          console.log(`⚠️ 修复失败: 没有找到ID为 ${issue.id} 的记录`);\n        }\n\n      } catch (error) {\n        console.error(`❌ 修复节点 ${issue.id} 失败:`, error);\n      }\n    }\n\n    console.log('');\n    console.log('='.repeat(60));\n    console.log(`🎉 修复完成: 成功修复 ${fixedCount}/${checkResult.issues} 个节点`);\n\n    // 再次检查确认修复结果\n    console.log('');\n    console.log('🔍 验证修复结果...');\n    await checkNodeIdFormat();\n\n  } catch (error) {\n    console.error('❌ 修复失败:', error);\n    throw error;\n  }\n}\n\n// 主函数\nasync function main() {\n  const args = process.argv.slice(2);\n  const command = args[0] || 'check';\n\n  try {\n    if (command === 'check') {\n      await checkNodeIdFormat();\n    } else if (command === 'fix') {\n      await fixNodeIdFormat();\n    } else {\n      console.log('用法:');\n      console.log('  node check-node-id-format.js check  # 检查节点ID格式');\n      console.log('  node check-node-id-format.js fix    # 修复节点ID格式');\n    }\n  } catch (error) {\n    console.error('❌ 执行失败:', error);\n    process.exit(1);\n  }\n}\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = {\n  checkNodeIdFormat,\n  fixNodeIdFormat\n};\n"
        }
    ]
}