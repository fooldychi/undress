{
    "sourceFile": "docs/队列信息获取问题分析.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1752515770586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752515787686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,12 +70,38 @@\n   ]\n }\n ```\n \n-## 解决方案\n+## 基于官方文档的解决方案\n \n-### 1. 增强的队列信息解析\n+### 1. 调整健康检查端点优先级\n \n+根据官方文档，重新排序健康检查端点：\n+\n+```javascript\n+const testEndpoints = [\n+  '/system_stats', // 官方推荐的系统状态端点\n+  '/queue',        // 队列状态端点\n+  '/object_info',  // 节点信息端点\n+  '/prompt',       // 提示状态端点\n+  '/'              // 根路径，最后尝试\n+]\n+```\n+\n+### 2. 改进请求头\n+\n+添加更符合 ComfyUI 预期的请求头：\n+\n+```javascript\n+headers: {\n+  'Accept': 'application/json, text/html, text/plain, */*',\n+  'Cache-Control': 'no-cache',\n+  'User-Agent': 'ComfyUI-LoadBalancer/1.0'\n+}\n+```\n+\n+### 3. 增强的队列信息解析\n+\n 修改了 `getServerQueueInfo` 方法，支持多种数据格式：\n \n ```javascript\n // 尝试多种可能的数据格式\n"
                },
                {
                    "date": 1752515806757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,19 +150,25 @@\n ## 测试工具\n \n 创建了多个测试工具来诊断问题：\n \n-### 1. `debug-queue.html`\n+### 1. `official-api-test.html` ⭐ **新增**\n+- 基于 ComfyUI 官方文档的 API 端点测试\n+- 测试所有官方定义的端点\n+- 符合官方规范的请求格式\n+- 详细的队列数据结构分析\n+\n+### 2. `debug-queue.html`\n - 测试所有端点的响应\n - 显示详细的HTTP响应信息\n - 分析响应头和状态码\n \n-### 2. `queue-test.html`\n+### 3. `queue-test.html`\n - 专门测试队列端点\n - 详细的数据解析过程\n - 支持多种数据格式的解析\n \n-### 3. `standalone-test.html`\n+### 4. `standalone-test.html`\n - 完整的负载均衡器测试\n - 集成了增强的队列信息获取\n - 显示详细的调试信息\n \n"
                },
                {
                    "date": 1752515831318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,16 +197,40 @@\n - 增加超时时间\n - 实现重试机制\n - 提供备用服务器\n \n-## 建议\n+## 基于官方文档的建议\n \n-1. **使用测试工具**: 先运行 `queue-test.html` 确认队列端点的实际响应格式\n-2. **检查 CORS**: 确认服务器是否配置了正确的 CORS 头\n-3. **查看控制台**: 观察详细的错误信息和调试日志\n-4. **测试网络**: 确认服务器网络连接正常\n-5. **版本兼容**: 确认 ComfyUI 版本和 API 兼容性\n+1. **优先使用官方测试工具**: 运行 `official-api-test.html` 确认服务器是否符合官方 API 规范\n+2. **检查端点实现**: 确认服务器是否实现了所有官方端点\n+3. **验证数据格式**: 使用官方测试工具查看实际的队列数据结构\n+4. **检查 CORS**: 确认服务器是否配置了正确的 CORS 头\n+5. **查看控制台**: 观察详细的错误信息和调试日志\n+6. **测试网络**: 确认服务器网络连接正常\n+7. **版本兼容**: 确认 ComfyUI 版本和 API 兼容性\n \n+## 可能的问题和解决方案\n+\n+### 1. 服务器未完全实现官方 API\n+**现象**: 某些端点返回 404 或 500 错误\n+**解决方案**:\n+- 检查 ComfyUI 版本是否为最新\n+- 确认服务器配置是否正确\n+- 联系服务器管理员确认 API 实现情况\n+\n+### 2. 队列数据格式与官方不符\n+**现象**: 队列端点返回的数据结构不是标准格式\n+**解决方案**:\n+- 使用多格式解析器适配不同的数据结构\n+- 记录实际的数据格式并相应调整解析逻辑\n+\n+### 3. CORS 配置问题\n+**现象**: 浏览器控制台显示 CORS 错误\n+**解决方案**:\n+- 服务器需要添加适当的 CORS 头\n+- 或者通过代理服务器访问\n+- 或者在同域下部署应用\n+\n ## 更新的文件\n \n 1. `standalone-test.html` - 增强的队列信息获取\n 2. `client/src/services/loadBalancer.js` - 实际负载均衡器的队列解析\n"
                },
                {
                    "date": 1752516316001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,34 @@\n # ComfyUI 队列信息获取问题分析\n \n ## 问题描述\n \n-在测试 `standalone-test.html` 时发现无法正确获取队列信息。根据 [ComfyUI 官方文档](https://docs.comfy.org/development/comfyui-server/comms_routes) 的分析，可能的原因包括：\n+在测试 `standalone-test.html` 时发现无法正确获取队列信息，出现 \"Failed to fetch\" 错误。\n \n-1. **CORS 跨域问题**: 浏览器阻止跨域请求\n-2. **数据格式不一致**: 不同版本的 ComfyUI 返回不同的数据格式\n-3. **端点实现差异**: 某些部署可能未完全实现官方 API\n-4. **请求头不正确**: 缺少必要的请求头或格式不符合预期\n-5. **网络连接问题**: 服务器响应超时或连接失败\n+## 🔍 **根本原因发现**\n \n+通过分析用户提供的实际请求信息，发现了问题的根本原因：\n+\n+### 实际的服务器配置\n+```\n+请求网址: https://l9s75ay3rp-8188.cnb.run/api/queue\n+请求方法: GET\n+状态代码: 200 OK\n+```\n+\n+### 关键发现\n+1. **错误的端点路径**: 我们使用的是 `/queue`，但实际应该是 `/api/queue`\n+2. **缺少必要的请求头**: 服务器期望 `comfy-user` 头部\n+3. **请求头格式不匹配**: 我们的请求头与实际工作的请求头不一致\n+\n+### 实际工作的请求头\n+```\n+Accept: */*\n+Cache-Control: max-age=0\n+User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36...\n+comfy-user: [用户标识]\n+```\n+\n ## 官方文档分析\n \n 根据 ComfyUI 官方文档，标准的 API 端点包括：\n \n"
                },
                {
                    "date": 1752516342412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,36 +88,56 @@\n   ]\n }\n ```\n \n-## 基于官方文档的解决方案\n+## 🛠️ **基于实际请求信息的修复方案**\n \n-### 1. 调整健康检查端点优先级\n+### 1. 修正端点路径\n \n-根据官方文档，重新排序健康检查端点：\n+**修复前**:\n+```javascript\n+const response = await fetch(`${serverUrl}/queue`, ...)\n+```\n \n+**修复后**:\n ```javascript\n-const testEndpoints = [\n-  '/system_stats', // 官方推荐的系统状态端点\n-  '/queue',        // 队列状态端点\n-  '/object_info',  // 节点信息端点\n-  '/prompt',       // 提示状态端点\n-  '/'              // 根路径，最后尝试\n-]\n+const response = await fetch(`${serverUrl}/api/queue`, ...)\n ```\n \n-### 2. 改进请求头\n+### 2. 添加必要的请求头\n \n-添加更符合 ComfyUI 预期的请求头：\n+**修复前**:\n+```javascript\n+headers: {\n+  'Accept': 'application/json',\n+  'Cache-Control': 'no-cache'\n+}\n+```\n \n+**修复后**:\n ```javascript\n headers: {\n-  'Accept': 'application/json, text/html, text/plain, */*',\n-  'Cache-Control': 'no-cache',\n-  'User-Agent': 'ComfyUI-LoadBalancer/1.0'\n+  'Accept': '*/*',\n+  'Cache-Control': 'max-age=0',\n+  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\n+  'comfy-user': 'loadbalancer-client'\n }\n ```\n \n+### 3. 更新健康检查端点\n+\n+```javascript\n+const testEndpoints = [\n+  '/api/queue',        // 实际的队列端点路径\n+  '/api/system_stats', // 系统状态端点\n+  '/api/object_info',  // 节点信息端点\n+  '/api/prompt',       // 提示状态端点\n+  '/queue',            // 备用标准路径\n+  '/system_stats',     // 备用标准路径\n+  '/'                  // 根路径，最后尝试\n+]\n+```\n+\n ### 3. 增强的队列信息解析\n \n 修改了 `getServerQueueInfo` 方法，支持多种数据格式：\n \n"
                },
                {
                    "date": 1752516364286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,15 @@\n ## 测试工具\n \n 创建了多个测试工具来诊断问题：\n \n-### 1. `official-api-test.html` ⭐ **新增**\n+### 1. `fixed-queue-test.html` ⭐ **最新修复**\n+- 基于用户实际请求信息的修复测试\n+- 对比新旧端点的测试结果\n+- 使用正确的 `/api/queue` 端点和请求头\n+- 验证修复效果\n+\n+### 2. `official-api-test.html`\n - 基于 ComfyUI 官方文档的 API 端点测试\n - 测试所有官方定义的端点\n - 符合官方规范的请求格式\n - 详细的队列数据结构分析\n"
                }
            ],
            "date": 1752515770586,
            "name": "Commit-0",
            "content": "# ComfyUI 队列信息获取问题分析\n\n## 问题描述\n\n在测试 `standalone-test.html` 时发现无法正确获取队列信息。根据 [ComfyUI 官方文档](https://docs.comfy.org/development/comfyui-server/comms_routes) 的分析，可能的原因包括：\n\n1. **CORS 跨域问题**: 浏览器阻止跨域请求\n2. **数据格式不一致**: 不同版本的 ComfyUI 返回不同的数据格式\n3. **端点实现差异**: 某些部署可能未完全实现官方 API\n4. **请求头不正确**: 缺少必要的请求头或格式不符合预期\n5. **网络连接问题**: 服务器响应超时或连接失败\n\n## 官方文档分析\n\n根据 ComfyUI 官方文档，标准的 API 端点包括：\n\n| 端点 | 方法 | 用途 |\n|------|------|------|\n| `/` | GET | 加载 ComfyUI 网页 |\n| `/system_stats` | GET | 获取系统信息（推荐用于健康检查）|\n| `/queue` | GET | 获取队列状态 |\n| `/prompt` | GET | 获取当前状态 |\n| `/object_info` | GET | 获取节点类型详情 |\n| `/history` | GET | 获取队列历史 |\n\n**重要发现**: 官方文档建议使用 `/system_stats` 作为主要的健康检查端点。\n\n## 常见的队列数据格式\n\n### 1. 标准 ComfyUI 格式\n```json\n{\n  \"queue_running\": [\n    [\"prompt_id_1\", \"prompt_data_1\"],\n    [\"prompt_id_2\", \"prompt_data_2\"]\n  ],\n  \"queue_pending\": [\n    [\"prompt_id_3\", \"prompt_data_3\"]\n  ]\n}\n```\n\n### 2. 简化格式\n```json\n{\n  \"running\": 2,\n  \"pending\": 1\n}\n```\n\n### 3. 执行信息格式\n```json\n{\n  \"exec_info\": {\n    \"queue_remaining\": 3\n  }\n}\n```\n\n### 4. 简单数字格式\n```json\n3\n```\n\n### 5. 队列字段格式\n```json\n{\n  \"queue\": [\n    \"item1\", \"item2\", \"item3\"\n  ]\n}\n```\n\n## 解决方案\n\n### 1. 增强的队列信息解析\n\n修改了 `getServerQueueInfo` 方法，支持多种数据格式：\n\n```javascript\n// 尝试多种可能的数据格式\nlet running = 0;\nlet pending = 0;\n\n// 标准 ComfyUI 格式\nif (queueData.queue_running !== undefined && queueData.queue_pending !== undefined) {\n  running = Array.isArray(queueData.queue_running) ? queueData.queue_running.length :\n           (typeof queueData.queue_running === 'number' ? queueData.queue_running : 0);\n  pending = Array.isArray(queueData.queue_pending) ? queueData.queue_pending.length :\n           (typeof queueData.queue_pending === 'number' ? queueData.queue_pending : 0);\n}\n// 其他格式...\n```\n\n### 2. 详细的错误处理\n\n```javascript\n} catch (error) {\n  // 区分不同类型的错误\n  if (error.name === 'AbortError') {\n    console.log(`⚠️ 队列请求超时`);\n  } else if (error.message.includes('CORS')) {\n    console.log(`⚠️ CORS错误，可能需要服务器配置跨域`);\n  } else if (error.message.includes('Failed to fetch')) {\n    console.log(`⚠️ 网络连接失败`);\n  }\n}\n```\n\n### 3. 宽容的健康判断\n\n即使队列信息获取失败，只要服务器能响应健康检查，仍然认为服务器可用：\n\n```javascript\nreturn {\n  running: 0,\n  pending: 0,\n  total: 1,        // 使用估算值\n  healthy: true,   // 仍然认为健康\n  isEstimate: true // 标记为估算\n};\n```\n\n## 测试工具\n\n创建了多个测试工具来诊断问题：\n\n### 1. `debug-queue.html`\n- 测试所有端点的响应\n- 显示详细的HTTP响应信息\n- 分析响应头和状态码\n\n### 2. `queue-test.html`\n- 专门测试队列端点\n- 详细的数据解析过程\n- 支持多种数据格式的解析\n\n### 3. `standalone-test.html`\n- 完整的负载均衡器测试\n- 集成了增强的队列信息获取\n- 显示详细的调试信息\n\n## 常见问题和解决方法\n\n### 1. CORS 错误\n**现象**: `Access to fetch at 'xxx' from origin 'xxx' has been blocked by CORS policy`\n\n**解决方法**:\n- 服务器需要配置 CORS 头\n- 或者通过代理服务器访问\n- 或者在同域下部署测试页面\n\n### 2. 队列数据解析失败\n**现象**: JSON 解析错误或数据格式不符合预期\n\n**解决方法**:\n- 使用多格式解析器\n- 记录原始响应数据\n- 提供降级方案\n\n### 3. 网络超时\n**现象**: 请求超时或连接失败\n\n**解决方法**:\n- 增加超时时间\n- 实现重试机制\n- 提供备用服务器\n\n## 建议\n\n1. **使用测试工具**: 先运行 `queue-test.html` 确认队列端点的实际响应格式\n2. **检查 CORS**: 确认服务器是否配置了正确的 CORS 头\n3. **查看控制台**: 观察详细的错误信息和调试日志\n4. **测试网络**: 确认服务器网络连接正常\n5. **版本兼容**: 确认 ComfyUI 版本和 API 兼容性\n\n## 更新的文件\n\n1. `standalone-test.html` - 增强的队列信息获取\n2. `client/src/services/loadBalancer.js` - 实际负载均衡器的队列解析\n3. `debug-queue.html` - 端点调试工具\n4. `queue-test.html` - 队列信息专用测试工具\n"
        }
    ]
}