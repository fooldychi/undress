{
    "sourceFile": "docs/comfyui-unified-config.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752548075879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752548088537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n import comfyUIConfig from '../config/comfyui.config.js'\n \n // 获取按优先级排序的端点列表\n const endpoints = comfyUIConfig.getHealthCheckEndpoints()\n-// 返回: ['/api/queue', '/api/system_stats', '/queue', '/system_stats']\n+// 返回: ['/api/queue', '/api/system_stats']\n ```\n \n ### 2. 执行健康检测\n \n"
                },
                {
                    "date": 1752548106030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,24 +75,17 @@\n ```\n \n ## 端点优先级说明\n \n-### 主要端点（优先使用）\n+### 官方端点（按优先级排序）\n 1. **`/api/queue`** - ComfyUI官方队列端点\n    - 最重要的健康指标\n    - 返回队列运行状态和待处理任务\n \n 2. **`/api/system_stats`** - ComfyUI官方系统状态端点\n    - 服务器系统信息\n    - 设备状态和Python版本信息\n \n-### 备用端点（兼容性）\n-1. **`/queue`** - 备用队列端点\n-   - 兼容旧版本ComfyUI\n-\n-2. **`/system_stats`** - 备用系统状态端点\n-   - 兼容旧版本ComfyUI\n-\n ## 响应验证规则\n \n ### 队列端点验证\n 检查响应中是否包含以下字段之一：\n"
                },
                {
                    "date": 1752548413912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,10 +139,19 @@\n 4. **兼容性好** - 支持新旧版本ComfyUI\n 5. **易于维护** - 配置变更只需修改一个文件\n 6. **响应验证** - 确保连接的是真正的ComfyUI服务器\n \n+## 验证工具\n+\n+### 配置统一性验证\n+```bash\n+# 运行验证脚本检查是否还有硬编码端点\n+node scripts/verify-unified-config.js\n+```\n+\n ## 注意事项\n \n 1. **前端专用** - 此配置仅用于前端，后端不再定义ComfyUI端点\n 2. **按序测试** - 健康检测按端点优先级顺序进行，找到第一个可用端点即停止\n 3. **响应验证** - 不仅检查HTTP状态码，还验证响应内容是否符合ComfyUI格式\n 4. **超时控制** - 统一的超时时间配置，避免长时间等待\n+5. **无备用端点** - 已移除备用端点配置，只使用官方推荐的端点\n"
                },
                {
                    "date": 1752549129869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,22 +98,53 @@\n - `system` - 系统信息\n - `devices` - 设备信息\n - `python_version` - Python版本\n \n+## 负载均衡机制\n+\n+### 服务器管理\n+负载均衡器从配置服务动态获取服务器列表：\n+\n+```javascript\n+// 主服务器（优先级最高）\n+comfyui.server_url: \"https://primary-server.com\"\n+\n+// 备用服务器（支持多个，换行或逗号分隔）\n+comfyui.backup_servers: \"https://backup1.com,https://backup2.com\"\n+```\n+\n+### 健康检测流程\n+1. **定期检测** - 每30秒自动检查所有服务器健康状态\n+2. **官方端点** - 使用 `/api/queue` 和 `/api/system_stats` 进行检测\n+3. **响应验证** - 验证响应内容是否符合ComfyUI格式\n+4. **故障转移** - 自动切换到健康的备用服务器\n+\n+### 服务器选择策略\n+1. 优先返回健康的主服务器\n+2. 主服务器不可用时，选择健康的备用服务器\n+3. 所有服务器都不健康时，使用第一个服务器（可能恢复）\n+4. 没有配置服务器时，使用默认配置\n+\n ## 已更新的文件\n \n ### 1. 配置文件\n - ✅ `client/src/config/comfyui.config.js` - 主配置文件（已更新）\n \n ### 2. 服务文件\n-- ✅ `client/src/services/loadBalancer.js` - 负载均衡器（已更新）\n+- ✅ `client/src/services/loadBalancer.js` - 负载均衡器（完全重写）\n - ✅ `client/src/services/comfyui.js` - ComfyUI服务（已更新）\n \n ### 3. 测试工具\n-- ✅ `client/src/utils/test-unified-config.js` - 统一配置测试工具（新增）\n+- ✅ `client/test-loadbalancer.html` - 负载均衡器测试页面（新增）\n+- ✅ `scripts/verify-unified-config.js` - 配置验证脚本（新增）\n \n ### 4. 已移除的文件\n - ❌ `client/src/constants/comfyui-health.js` - 独立健康检测配置（已删除）\n+- ❌ `client/src/utils/test-unified-config.js` - 旧测试工具（已删除）\n+- ❌ `client/src/utils/loadBalancerTest.js` - 旧测试工具（已删除）\n+- ❌ `client/src/utils/comfyui-test.js` - 旧测试工具（已删除）\n+- ❌ `test-comfyui-health.js` - 旧测试脚本（已删除）\n+- ❌ 多个旧的文档文件（已删除）\n \n ## 测试方法\n \n ### 浏览器控制台测试\n"
                }
            ],
            "date": 1752548075879,
            "name": "Commit-0",
            "content": "# ComfyUI统一端点配置管理\n\n## 概述\n\n基于前后端分离的架构原则，ComfyUI的健康检测端点管理已统一在前端进行定义和管理，采用官方推荐的端点格式。\n\n## 配置文件结构\n\n### 主配置文件: `client/src/config/comfyui.config.js`\n\n```javascript\nconst config = {\n  // 基础配置\n  BASE_URL: '...',\n  CLIENT_ID: '...',\n\n  // 健康检测配置\n  HEALTH_CHECK: {\n    // 官方端点 - ComfyUI官方推荐（按优先级排序）\n    ENDPOINTS: [\n      '/api/queue',        // 队列状态端点 - 最重要的健康指标\n      '/api/system_stats', // 系统状态端点 - 服务器信息\n    ],\n\n    // 标准请求头配置\n    HEADERS: {\n      'Accept': 'application/json, */*',\n      'Accept-Language': 'zh-CN,zh;q=0.9',\n      'Cache-Control': 'no-cache',\n      'comfy-user': 'health-monitor',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n    },\n\n    // 超时配置\n    TIMEOUT: 10000, // 10秒\n\n    // 响应验证配置\n    VALIDATION: {\n      QUEUE_INDICATORS: ['queue_running', 'queue_pending', 'exec_info'],\n      STATS_INDICATORS: ['system', 'devices', 'python_version'],\n    }\n  }\n}\n```\n\n## 使用方法\n\n### 1. 获取健康检测端点列表\n\n```javascript\nimport comfyUIConfig from '../config/comfyui.config.js'\n\n// 获取按优先级排序的端点列表\nconst endpoints = comfyUIConfig.getHealthCheckEndpoints()\n// 返回: ['/api/queue', '/api/system_stats', '/queue', '/system_stats']\n```\n\n### 2. 执行健康检测\n\n```javascript\n// 使用统一的请求头\nconst response = await fetch(`${serverUrl}${endpoint}`, {\n  method: 'GET',\n  headers: comfyUIConfig.HEALTH_CHECK.HEADERS,\n  signal: AbortSignal.timeout(comfyUIConfig.HEALTH_CHECK.TIMEOUT)\n})\n```\n\n### 3. 验证响应\n\n```javascript\n// 验证响应是否为有效的ComfyUI响应\nconst data = await response.json()\nconst isValid = comfyUIConfig.validateResponse(endpoint, data)\n```\n\n## 端点优先级说明\n\n### 主要端点（优先使用）\n1. **`/api/queue`** - ComfyUI官方队列端点\n   - 最重要的健康指标\n   - 返回队列运行状态和待处理任务\n\n2. **`/api/system_stats`** - ComfyUI官方系统状态端点\n   - 服务器系统信息\n   - 设备状态和Python版本信息\n\n### 备用端点（兼容性）\n1. **`/queue`** - 备用队列端点\n   - 兼容旧版本ComfyUI\n\n2. **`/system_stats`** - 备用系统状态端点\n   - 兼容旧版本ComfyUI\n\n## 响应验证规则\n\n### 队列端点验证\n检查响应中是否包含以下字段之一：\n- `queue_running` - 正在运行的队列\n- `queue_pending` - 待处理的队列\n- `exec_info` - 执行信息\n\n### 系统状态端点验证\n检查响应中是否包含以下字段之一：\n- `system` - 系统信息\n- `devices` - 设备信息\n- `python_version` - Python版本\n\n## 已更新的文件\n\n### 1. 配置文件\n- ✅ `client/src/config/comfyui.config.js` - 主配置文件（已更新）\n\n### 2. 服务文件\n- ✅ `client/src/services/loadBalancer.js` - 负载均衡器（已更新）\n- ✅ `client/src/services/comfyui.js` - ComfyUI服务（已更新）\n\n### 3. 测试工具\n- ✅ `client/src/utils/test-unified-config.js` - 统一配置测试工具（新增）\n\n### 4. 已移除的文件\n- ❌ `client/src/constants/comfyui-health.js` - 独立健康检测配置（已删除）\n\n## 测试方法\n\n### 浏览器控制台测试\n```javascript\n// 导入测试工具\nimport { testUnifiedHealthCheck } from './src/utils/test-unified-config.js'\n\n// 执行测试\ntestUnifiedHealthCheck('https://your-comfyui-server.com')\n```\n\n### 开发环境测试\n```bash\n# 在浏览器开发者工具中\ntestUnifiedHealthCheck() // 使用默认服务器\n```\n\n## 优势\n\n1. **统一管理** - 所有端点配置集中在一个文件中\n2. **官方标准** - 采用ComfyUI官方推荐的端点格式\n3. **优先级明确** - 按重要性排序，优先使用官方端点\n4. **兼容性好** - 支持新旧版本ComfyUI\n5. **易于维护** - 配置变更只需修改一个文件\n6. **响应验证** - 确保连接的是真正的ComfyUI服务器\n\n## 注意事项\n\n1. **前端专用** - 此配置仅用于前端，后端不再定义ComfyUI端点\n2. **按序测试** - 健康检测按端点优先级顺序进行，找到第一个可用端点即停止\n3. **响应验证** - 不仅检查HTTP状态码，还验证响应内容是否符合ComfyUI格式\n4. **超时控制** - 统一的超时时间配置，避免长时间等待\n"
        }
    ]
}