{
    "sourceFile": "check-database-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752409054826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752409542902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n   try {\n     connection = await mysql.createConnection(dbConfig);\n \n     const comfyuiConfigs = [\n-      ['comfyui.server_url', 'https://your-comfyui-server.com', 'string', 'comfyui', 'ComfyUI主服务器地址'],\n+      ['comfyui.server_url', 'your-comfyui-server.com', 'string', 'comfyui', 'ComfyUI主服务器地址'],\n       ['comfyui.backup_servers', '', 'string', 'comfyui', 'ComfyUI备用服务器地址列表'],\n       ['comfyui.request_timeout', '30000', 'number', 'comfyui', 'ComfyUI请求超时时间（毫秒）'],\n       ['comfyui.health_check_timeout', '10000', 'number', 'comfyui', 'ComfyUI健康检查超时时间（毫秒）'],\n       ['comfyui.auto_switch', 'true', 'boolean', 'comfyui', '是否自动切换到备用服务器'],\n"
                }
            ],
            "date": 1752409054826,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * 检查数据库中的配置数据\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// 读取.env文件\nfunction loadEnvFile() {\n  const envPath = path.join(__dirname, 'server', '.env');\n  if (fs.existsSync(envPath)) {\n    const envContent = fs.readFileSync(envPath, 'utf8');\n    envContent.split('\\n').forEach(line => {\n      const [key, value] = line.split('=');\n      if (key && value) {\n        process.env[key.trim()] = value.trim();\n      }\n    });\n  }\n}\n\nloadEnvFile();\n\n// 使用server目录下的mysql2\nconst mysql = require('./server/node_modules/mysql2/promise');\n\nasync function checkDatabaseConfig() {\n  console.log('🔍 检查数据库配置...');\n\n  const dbConfig = {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT || 3306,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n  };\n\n  console.log('📊 数据库连接配置:');\n  console.log(`  主机: ${dbConfig.host}`);\n  console.log(`  端口: ${dbConfig.port}`);\n  console.log(`  用户: ${dbConfig.user}`);\n  console.log(`  数据库: ${dbConfig.database}`);\n  console.log('');\n\n  let connection;\n\n  try {\n    // 连接数据库\n    console.log('🔗 连接数据库...');\n    connection = await mysql.createConnection(dbConfig);\n    console.log('✅ 数据库连接成功');\n\n    // 检查system_config表是否存在\n    console.log('\\n📋 检查system_config表...');\n    const [tables] = await connection.execute(\n      \"SHOW TABLES LIKE 'system_config'\"\n    );\n\n    if (tables.length === 0) {\n      console.log('❌ system_config表不存在');\n      console.log('💡 需要创建system_config表和初始化配置数据');\n      return;\n    }\n\n    console.log('✅ system_config表存在');\n\n    // 查询所有配置\n    console.log('\\n📊 查询所有配置数据...');\n    const [configs] = await connection.execute(\n      'SELECT config_key, config_value, config_type, config_group, description FROM system_config ORDER BY config_group, config_key'\n    );\n\n    if (configs.length === 0) {\n      console.log('❌ 没有找到任何配置数据');\n      console.log('💡 需要初始化配置数据');\n      return;\n    }\n\n    console.log(`✅ 找到 ${configs.length} 项配置`);\n\n    // 按分组显示配置\n    const groupedConfigs = {};\n    configs.forEach(config => {\n      if (!groupedConfigs[config.config_group]) {\n        groupedConfigs[config.config_group] = [];\n      }\n      groupedConfigs[config.config_group].push(config);\n    });\n\n    console.log('\\n📋 配置详情:');\n    Object.entries(groupedConfigs).forEach(([group, groupConfigs]) => {\n      console.log(`\\n🔧 ${group} 配置组:`);\n      groupConfigs.forEach(config => {\n        console.log(`  ${config.config_key}: ${config.config_value} (${config.config_type})`);\n        if (config.description) {\n          console.log(`    描述: ${config.description}`);\n        }\n      });\n    });\n\n    // 特别检查ComfyUI配置\n    console.log('\\n🎨 ComfyUI配置检查:');\n    const comfyuiConfigs = configs.filter(config => config.config_group === 'comfyui');\n\n    if (comfyuiConfigs.length === 0) {\n      console.log('❌ 没有找到ComfyUI配置');\n      console.log('💡 需要添加ComfyUI配置数据');\n    } else {\n      console.log(`✅ 找到 ${comfyuiConfigs.length} 项ComfyUI配置`);\n      comfyuiConfigs.forEach(config => {\n        console.log(`  ✓ ${config.config_key}: ${config.config_value}`);\n      });\n    }\n\n  } catch (error) {\n    console.error('❌ 数据库操作失败:', error.message);\n\n    if (error.code === 'ECONNREFUSED') {\n      console.log('💡 数据库连接被拒绝，请检查:');\n      console.log('  1. 数据库服务是否运行');\n      console.log('  2. 连接配置是否正确');\n      console.log('  3. 防火墙设置');\n    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {\n      console.log('💡 数据库访问被拒绝，请检查用户名和密码');\n    } else if (error.code === 'ER_BAD_DB_ERROR') {\n      console.log('💡 数据库不存在，请创建数据库');\n    }\n  } finally {\n    if (connection) {\n      await connection.end();\n      console.log('\\n🔌 数据库连接已关闭');\n    }\n  }\n}\n\n// 初始化ComfyUI配置\nasync function initComfyUIConfig() {\n  console.log('\\n🔧 初始化ComfyUI配置...');\n\n  const dbConfig = {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT || 3306,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME\n  };\n\n  let connection;\n\n  try {\n    connection = await mysql.createConnection(dbConfig);\n\n    const comfyuiConfigs = [\n      ['comfyui.server_url', 'https://your-comfyui-server.com', 'string', 'comfyui', 'ComfyUI主服务器地址'],\n      ['comfyui.backup_servers', '', 'string', 'comfyui', 'ComfyUI备用服务器地址列表'],\n      ['comfyui.request_timeout', '30000', 'number', 'comfyui', 'ComfyUI请求超时时间（毫秒）'],\n      ['comfyui.health_check_timeout', '10000', 'number', 'comfyui', 'ComfyUI健康检查超时时间（毫秒）'],\n      ['comfyui.auto_switch', 'true', 'boolean', 'comfyui', '是否自动切换到备用服务器'],\n      ['comfyui.client_id', 'your-client-id', 'string', 'comfyui', 'ComfyUI客户端ID'],\n      ['comfyui.max_retries', '3', 'number', 'comfyui', '最大重试次数']\n    ];\n\n    for (const [key, value, type, group, description] of comfyuiConfigs) {\n      await connection.execute(\n        `INSERT INTO system_config (config_key, config_value, config_type, config_group, description, is_encrypted, created_at, updated_at)\n         VALUES (?, ?, ?, ?, ?, 0, NOW(), NOW())\n         ON DUPLICATE KEY UPDATE\n         config_value = VALUES(config_value),\n         config_type = VALUES(config_type),\n         description = VALUES(description),\n         updated_at = NOW()`,\n        [key, value, type, group, description]\n      );\n    }\n\n    console.log('✅ ComfyUI配置初始化完成');\n\n  } catch (error) {\n    console.error('❌ 初始化配置失败:', error.message);\n  } finally {\n    if (connection) {\n      await connection.end();\n    }\n  }\n}\n\n// 主函数\nasync function main() {\n  console.log('🚀 数据库配置检查工具');\n  console.log('='.repeat(50));\n\n  await checkDatabaseConfig();\n\n  // 询问是否初始化配置\n  const args = process.argv.slice(2);\n  if (args.includes('--init')) {\n    await initComfyUIConfig();\n    console.log('\\n🔄 重新检查配置...');\n    await checkDatabaseConfig();\n  } else {\n    console.log('\\n💡 如需初始化ComfyUI配置，请运行:');\n    console.log('   node check-database-config.js --init');\n  }\n}\n\n// 运行检查\nif (require.main === module) {\n  main().catch(console.error);\n}\n"
        }
    ]
}