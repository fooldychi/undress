{
    "sourceFile": "test-server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752409212658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752409225529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n   console.log('  GET /api/config - 公开配置');\n   console.log('  GET /api/admin/config - 管理员配置');\n   console.log('');\n   console.log('🧪 测试命令:');\n-  console.log('  curl http://localhost:3007/api/admin/config');\n+  console.log(`  curl http://localhost:${PORT}/api/admin/config`);\n   console.log('  node test-config-api.js');\n });\n \n // 错误处理\n"
                }
            ],
            "date": 1752409212658,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * 简化的测试服务器，用于验证配置API\n */\n\nconst express = require('./server/node_modules/express');\nconst cors = require('./server/node_modules/cors');\nconst fs = require('fs');\nconst path = require('path');\n\n// 读取.env文件\nfunction loadEnvFile() {\n  const envPath = path.join(__dirname, 'server', '.env');\n  if (fs.existsSync(envPath)) {\n    const envContent = fs.readFileSync(envPath, 'utf8');\n    envContent.split('\\n').forEach(line => {\n      const [key, value] = line.split('=');\n      if (key && value) {\n        process.env[key.trim()] = value.trim();\n      }\n    });\n  }\n}\n\nloadEnvFile();\n\nconst mysql = require('./server/node_modules/mysql2/promise');\n\nconst app = express();\nconst PORT = process.env.TEST_PORT || 3008;\n\n// 中间件\napp.use(cors());\napp.use(express.json());\n\n// 数据库连接配置\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  port: process.env.DB_PORT || 3306,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n};\n\n// 数据库查询函数\nasync function query(sql, params = []) {\n  const connection = await mysql.createConnection(dbConfig);\n  try {\n    const [results] = await connection.execute(sql, params);\n    return results;\n  } finally {\n    await connection.end();\n  }\n}\n\n// 测试路由\napp.get('/', (req, res) => {\n  res.json({\n    success: true,\n    message: '测试服务器运行正常',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// 管理员配置API (简化版，不需要认证)\napp.get('/api/admin/config', async (req, res) => {\n  try {\n    console.log('📊 获取管理员配置...');\n\n    const configs = await query(`\n      SELECT config_key, config_value, config_type, config_group, description, is_encrypted\n      FROM system_config\n      ORDER BY config_group, config_key\n    `);\n\n    console.log(`📋 从数据库获取了 ${configs.length} 项配置`);\n\n    // 按分组组织配置\n    const groupedConfigs = {};\n    configs.forEach(config => {\n      if (!groupedConfigs[config.config_group]) {\n        groupedConfigs[config.config_group] = [];\n      }\n      groupedConfigs[config.config_group].push(config);\n    });\n\n    // 同时提供扁平化的配置数据，方便前端使用\n    const flatConfigs = {};\n    configs.forEach(config => {\n      let value = config.config_value;\n\n      // 根据类型转换值\n      if (config.config_type === 'number') {\n        value = parseInt(value) || 0;\n      } else if (config.config_type === 'boolean') {\n        value = value === 'true' || value === '1' || value === true;\n      }\n\n      flatConfigs[config.config_key] = value;\n    });\n\n    console.log('📋 返回的ComfyUI配置:');\n    Object.keys(flatConfigs).filter(key => key.startsWith('comfyui.')).forEach(key => {\n      console.log(`   ${key}: ${flatConfigs[key]}`);\n    });\n\n    res.json({\n      success: true,\n      data: flatConfigs,\n      grouped: groupedConfigs\n    });\n  } catch (error) {\n    console.error('❌ 获取配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取配置失败',\n      error: error.message\n    });\n  }\n});\n\n// 公开配置API\napp.get('/api/config', async (req, res) => {\n  try {\n    console.log('📊 获取公开配置...');\n\n    const configs = await query(`\n      SELECT config_key, config_value, config_type\n      FROM system_config\n      WHERE config_group IN ('comfyui', 'ai', 'frontend')\n      AND config_key NOT LIKE '%password%'\n      AND config_key NOT LIKE '%secret%'\n      ORDER BY config_group, config_key\n    `);\n\n    console.log(`📋 从数据库获取了 ${configs.length} 项公开配置`);\n\n    // 转换为前端需要的格式\n    const configMap = {};\n    configs.forEach(config => {\n      let value = config.config_value;\n\n      // 根据类型转换值\n      if (config.config_type === 'number') {\n        value = parseInt(value);\n      } else if (config.config_type === 'boolean') {\n        value = value === 'true' || value === '1';\n      }\n\n      configMap[config.config_key] = value;\n    });\n\n    console.log('📋 返回的公开配置:');\n    Object.keys(configMap).forEach(key => {\n      console.log(`   ${key}: ${configMap[key]}`);\n    });\n\n    res.json({\n      success: true,\n      data: configMap\n    });\n  } catch (error) {\n    console.error('❌ 获取公开配置失败:', error);\n    res.status(500).json({\n      success: false,\n      message: '获取公开配置失败',\n      error: error.message\n    });\n  }\n});\n\n// 启动服务器\napp.listen(PORT, () => {\n  console.log('🚀 测试服务器启动成功!');\n  console.log(`📍 服务地址: http://localhost:${PORT}`);\n  console.log(`🌍 环境: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`⏰ 启动时间: ${new Date().toLocaleString()}`);\n  console.log('');\n  console.log('📋 可用的API端点:');\n  console.log('  GET / - 服务器状态');\n  console.log('  GET /api/config - 公开配置');\n  console.log('  GET /api/admin/config - 管理员配置');\n  console.log('');\n  console.log('🧪 测试命令:');\n  console.log('  curl http://localhost:3007/api/admin/config');\n  console.log('  node test-config-api.js');\n});\n\n// 错误处理\nprocess.on('uncaughtException', (error) => {\n  console.error('❌ 未捕获的异常:', error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('❌ 未处理的Promise拒绝:', reason);\n});\n"
        }
    ]
}