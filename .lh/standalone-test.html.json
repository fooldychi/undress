{
    "sourceFile": "standalone-test.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752515398486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752515416559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,10 +431,14 @@\n                         <div>类型: ${server.type === 'primary' ? '主服务器' : '备用服务器'}</div>\n                         <div>优先级: ${server.priority}</div>\n                         ${server.responseTime > 0 ? `<div>响应时间: ${server.responseTime}ms</div>` : ''}\n                         ${server.queue ? `<div>队列: ${server.queue.total || 0} (运行中: ${server.queue.running || 0}, 等待中: ${server.queue.pending || 0})</div>` : ''}\n+                        ${server.queue && server.queue.isEstimate ? `<div style=\"color: #856404;\">⚠️ 队列信息为估算值</div>` : ''}\n+                        ${server.queue && server.queue.parseError ? `<div style=\"color: #856404;\">⚠️ 队列数据解析失败: ${server.queue.parseError}</div>` : ''}\n+                        ${server.queue && server.queue.httpError ? `<div style=\"color: #856404;\">⚠️ 队列API HTTP错误: ${server.queue.httpError}</div>` : ''}\n                         ${server.healthCheckEndpoint ? `<div>可用端点: ${server.healthCheckEndpoint}</div>` : ''}\n                         ${server.error ? `<div style=\"color: #dc3545;\">错误: ${server.error}</div>` : ''}\n+                        ${server.queue && server.queue.rawData ? `<details><summary>原始队列数据</summary><pre style=\"font-size: 11px; max-height: 100px; overflow-y: auto;\">${JSON.stringify(server.queue.rawData, null, 2)}</pre></details>` : ''}\n                     `;\n \n                     resultsElement.appendChild(div);\n                 });\n"
                },
                {
                    "date": 1752516131637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,14 +202,16 @@\n                     const timeoutId = setTimeout(() => controller.abort(), this.queueCheckTimeout);\n \n                     console.log(`📊 获取服务器队列信息: ${serverUrl}/queue`);\n \n-                    const response = await fetch(`${serverUrl}/queue`, {\n+                    const response = await fetch(`${serverUrl}/api/queue`, {\n                         method: 'GET',\n                         signal: controller.signal,\n                         headers: {\n-                            'Accept': 'application/json, text/plain, */*',\n-                            'Cache-Control': 'no-cache'\n+                            'Accept': '*/*',\n+                            'Cache-Control': 'max-age=0',\n+                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\n+                            'comfy-user': 'standalone-test-client'\n                         }\n                     });\n \n                     clearTimeout(timeoutId);\n"
                },
                {
                    "date": 1752516149494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n                 return servers;\n             }\n \n             async checkServerHealth(serverUrl) {\n-                const testEndpoints = ['/queue', '/system_stats', '/history', '/'];\n+                const testEndpoints = ['/api/queue', '/api/system_stats', '/api/history', '/queue', '/system_stats', '/'];\n                 let lastError = null;\n                 const startTime = Date.now();\n \n                 for (const endpoint of testEndpoints) {\n@@ -160,10 +160,12 @@\n                         const response = await fetch(`${serverUrl}${endpoint}`, {\n                             method: 'GET',\n                             signal: controller.signal,\n                             headers: {\n-                                'Cache-Control': 'no-cache',\n-                                'Accept': 'application/json, text/plain, */*'\n+                                'Accept': '*/*',\n+                                'Cache-Control': 'max-age=0',\n+                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\n+                                'comfy-user': 'health-check-client'\n                             }\n                         });\n \n                         clearTimeout(timeoutId);\n"
                }
            ],
            "date": 1752515398486,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>独立负载均衡器测试</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 1000px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        .log {\n            background: #f8f9fa;\n            border: 1px solid #e9ecef;\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 5px;\n            font-family: monospace;\n            font-size: 13px;\n            max-height: 500px;\n            overflow-y: auto;\n            white-space: pre-wrap;\n        }\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        button:hover {\n            background: #0056b3;\n        }\n        .status {\n            padding: 10px;\n            margin: 10px 0;\n            border-radius: 5px;\n            font-weight: bold;\n        }\n        .success { background: #d4edda; color: #155724; }\n        .error { background: #f8d7da; color: #721c24; }\n        .warning { background: #fff3cd; color: #856404; }\n        .server-result {\n            margin: 10px 0;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            background: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔍 独立负载均衡器测试</h1>\n        <p>这个测试页面模拟真实的负载均衡器行为，测试您提供的服务器地址。</p>\n\n        <div>\n            <button onclick=\"runFullTest()\">运行完整测试</button>\n            <button onclick=\"testServerSelection()\">测试服务器选择</button>\n            <button onclick=\"clearLog()\">清除日志</button>\n        </div>\n\n        <div id=\"status\"></div>\n        <div id=\"results\"></div>\n        <div class=\"log\" id=\"log\"></div>\n    </div>\n\n    <script>\n        // 模拟配置\n        const mockConfig = {\n            'comfyui.server_url': 'https://l9s75ay3rp-8188.cnb.run',\n            'comfyui.backup_servers': 'https://0rv00xh2vg-8188.cnb.run'\n        };\n\n        let logElement = document.getElementById('log');\n        let statusElement = document.getElementById('status');\n        let resultsElement = document.getElementById('results');\n\n        // 重写console.log来显示在页面上\n        const originalLog = console.log;\n        console.log = function(...args) {\n            originalLog.apply(console, args);\n            const message = args.join(' ');\n            logElement.textContent += message + '\\n';\n            logElement.scrollTop = logElement.scrollHeight;\n        };\n\n        function clearLog() {\n            logElement.textContent = '';\n            resultsElement.innerHTML = '';\n            statusElement.innerHTML = '';\n        }\n\n        function setStatus(message, type = 'info') {\n            statusElement.innerHTML = `<div class=\"status ${type}\">${message}</div>`;\n        }\n\n        // 模拟负载均衡器类\n        class StandaloneLoadBalancer {\n            constructor() {\n                this.healthCheckTimeout = 10000;\n                this.queueCheckTimeout = 5000;\n            }\n\n            async getLatestServerList() {\n                const servers = [];\n\n                // 主服务器\n                if (mockConfig['comfyui.server_url']) {\n                    servers.push({\n                        url: mockConfig['comfyui.server_url'],\n                        type: 'primary',\n                        priority: 1\n                    });\n                }\n\n                // 备用服务器\n                if (mockConfig['comfyui.backup_servers']) {\n                    const backupServers = mockConfig['comfyui.backup_servers']\n                        .replace(/\\s*,\\s*/g, '\\n')\n                        .split('\\n')\n                        .map(url => url.trim())\n                        .filter(url => url && url.startsWith('http'));\n\n                    backupServers.forEach((url, index) => {\n                        servers.push({\n                            url,\n                            type: 'backup',\n                            priority: index + 2\n                        });\n                    });\n                }\n\n                return servers;\n            }\n\n            async checkServerHealth(serverUrl) {\n                const testEndpoints = ['/queue', '/system_stats', '/history', '/'];\n                let lastError = null;\n                const startTime = Date.now();\n\n                for (const endpoint of testEndpoints) {\n                    try {\n                        const controller = new AbortController();\n                        const timeoutId = setTimeout(() => controller.abort(), this.healthCheckTimeout);\n\n                        console.log(`🔍 测试端点: ${serverUrl}${endpoint}`);\n\n                        const response = await fetch(`${serverUrl}${endpoint}`, {\n                            method: 'GET',\n                            signal: controller.signal,\n                            headers: {\n                                'Cache-Control': 'no-cache',\n                                'Accept': 'application/json, text/plain, */*'\n                            }\n                        });\n\n                        clearTimeout(timeoutId);\n                        const endTime = Date.now();\n\n                        if (response.ok) {\n                            console.log(`✅ 端点 ${endpoint} 响应成功 (${response.status})`);\n                            return {\n                                healthy: true,\n                                responseTime: endTime - startTime,\n                                status: response.status,\n                                endpoint: endpoint\n                            };\n                        } else {\n                            console.log(`⚠️ 端点 ${endpoint} 响应失败 (${response.status})`);\n                            lastError = `HTTP ${response.status}`;\n                        }\n                    } catch (error) {\n                        console.log(`❌ 端点 ${endpoint} 连接失败: ${error.message}`);\n                        lastError = error.message;\n                        continue;\n                    }\n                }\n\n                const endTime = Date.now();\n                return {\n                    healthy: false,\n                    responseTime: endTime - startTime,\n                    error: lastError || '所有端点都无法访问'\n                };\n            }\n\n            async getServerQueueInfo(serverUrl) {\n                try {\n                    const controller = new AbortController();\n                    const timeoutId = setTimeout(() => controller.abort(), this.queueCheckTimeout);\n\n                    console.log(`📊 获取服务器队列信息: ${serverUrl}/queue`);\n\n                    const response = await fetch(`${serverUrl}/queue`, {\n                        method: 'GET',\n                        signal: controller.signal,\n                        headers: {\n                            'Accept': 'application/json, text/plain, */*',\n                            'Cache-Control': 'no-cache'\n                        }\n                    });\n\n                    clearTimeout(timeoutId);\n\n                    if (response.ok) {\n                        try {\n                            const responseText = await response.text();\n                            console.log(`📊 队列API原始响应: ${responseText.substring(0, 200)}...`);\n\n                            const queueData = JSON.parse(responseText);\n                            console.log(`📊 队列数据结构:`, Object.keys(queueData));\n\n                            // 尝试多种可能的数据格式\n                            let running = 0;\n                            let pending = 0;\n\n                            // 标准 ComfyUI 格式\n                            if (queueData.queue_running !== undefined && queueData.queue_pending !== undefined) {\n                                running = Array.isArray(queueData.queue_running) ? queueData.queue_running.length :\n                                         (typeof queueData.queue_running === 'number' ? queueData.queue_running : 0);\n                                pending = Array.isArray(queueData.queue_pending) ? queueData.queue_pending.length :\n                                         (typeof queueData.queue_pending === 'number' ? queueData.queue_pending : 0);\n                            }\n                            // 其他可能的格式\n                            else if (queueData.running !== undefined && queueData.pending !== undefined) {\n                                running = typeof queueData.running === 'number' ? queueData.running : 0;\n                                pending = typeof queueData.pending === 'number' ? queueData.pending : 0;\n                            }\n                            // 如果有 exec_info\n                            else if (queueData.exec_info) {\n                                running = queueData.exec_info.queue_remaining || 0;\n                                pending = 0;\n                            }\n                            // 简单的数字格式\n                            else if (typeof queueData === 'number') {\n                                running = 0;\n                                pending = queueData;\n                            }\n                            // 如果有 queue 字段\n                            else if (queueData.queue) {\n                                if (Array.isArray(queueData.queue)) {\n                                    pending = queueData.queue.length;\n                                    running = 0;\n                                } else if (typeof queueData.queue === 'number') {\n                                    pending = queueData.queue;\n                                    running = 0;\n                                }\n                            }\n\n                            const total = running + pending;\n                            console.log(`📊 队列统计 - 运行中: ${running}, 等待中: ${pending}, 总计: ${total}`);\n\n                            return {\n                                running,\n                                pending,\n                                total,\n                                healthy: true,\n                                rawData: queueData\n                            };\n                        } catch (parseError) {\n                            console.log(`⚠️ 解析队列数据失败: ${parseError.message}`);\n                            console.log(`⚠️ 原始响应: ${responseText.substring(0, 100)}...`);\n\n                            // 即使解析失败，也认为服务器是健康的\n                            return {\n                                running: 0,\n                                pending: 0,\n                                total: 1,\n                                healthy: true,\n                                isEstimate: true,\n                                parseError: parseError.message\n                            };\n                        }\n                    } else {\n                        console.log(`⚠️ 队列API返回状态码: ${response.status} ${response.statusText}`);\n\n                        // 尝试读取错误响应\n                        try {\n                            const errorText = await response.text();\n                            console.log(`⚠️ 错误响应: ${errorText.substring(0, 100)}...`);\n                        } catch (e) {\n                            console.log(`⚠️ 无法读取错误响应`);\n                        }\n\n                        return {\n                            running: 0,\n                            pending: 0,\n                            total: 1,\n                            healthy: true,\n                            isEstimate: true,\n                            httpError: response.status\n                        };\n                    }\n                } catch (error) {\n                    console.log(`⚠️ 获取队列信息失败: ${error.message}`);\n\n                    // 区分不同类型的错误\n                    if (error.name === 'AbortError') {\n                        console.log(`⚠️ 队列请求超时`);\n                    } else if (error.message.includes('CORS')) {\n                        console.log(`⚠️ CORS错误，可能需要服务器配置跨域`);\n                    } else if (error.message.includes('Failed to fetch')) {\n                        console.log(`⚠️ 网络连接失败`);\n                    }\n\n                    return {\n                        running: 0,\n                        pending: 0,\n                        total: 999,\n                        healthy: false,\n                        error: error.message\n                    };\n                }\n            }\n\n            async initializeServerConnection() {\n                try {\n                    console.log('🚀 正在初始化 ComfyUI 服务器连接...');\n\n                    const servers = await this.getLatestServerList();\n\n                    if (servers.length === 0) {\n                        console.log('⚠️ 未找到任何配置的服务器');\n                        return null;\n                    }\n\n                    console.log(`📋 发现 ${servers.length} 个配置的服务器，开始连接测试...`);\n                    servers.forEach((server, index) => {\n                        console.log(`   ${index + 1}. ${server.url} (${server.type}, 优先级: ${server.priority})`);\n                    });\n\n                    const serverChecks = servers.map(async (server) => {\n                        console.log(`🔍 测试服务器: ${server.url}`);\n\n                        try {\n                            const [healthResult, queueResult] = await Promise.allSettled([\n                                this.checkServerHealth(server.url),\n                                this.getServerQueueInfo(server.url)\n                            ]);\n\n                            const health = healthResult.status === 'fulfilled' ? healthResult.value : { healthy: false };\n                            const queue = queueResult.status === 'fulfilled' ? queueResult.value : { total: 999, healthy: false };\n\n                            const isHealthy = health.healthy || (health.responseTime > 0 && health.responseTime < 30000);\n\n                            // 输出每个服务器的测试结果\n                            if (isHealthy) {\n                                console.log(`✅ ${server.url} - 健康 (响应时间: ${health.responseTime}ms, 队列: ${queue.total || 0})`);\n                            } else {\n                                console.log(`❌ ${server.url} - 不可用 (${health.error || '连接失败'})`);\n                            }\n\n                            return {\n                                ...server,\n                                healthy: isHealthy,\n                                queue: queue,\n                                responseTime: health.responseTime || 0,\n                                error: health.error,\n                                healthCheckEndpoint: health.endpoint\n                            };\n                        } catch (error) {\n                            return {\n                                ...server,\n                                healthy: false,\n                                queue: { total: 999, healthy: false },\n                                responseTime: 0,\n                                error: error.message\n                            };\n                        }\n                    });\n\n                    const serverResults = await Promise.all(serverChecks);\n\n                    const healthyServers = serverResults.filter(s => s.healthy);\n                    console.log(`✅ 服务器连接测试完成: ${healthyServers.length}/${serverResults.length} 个服务器可用`);\n\n                    // 显示详细结果\n                    this.displayResults(serverResults);\n\n                    if (healthyServers.length > 0) {\n                        const bestServer = healthyServers.sort((a, b) => {\n                            const queueDiff = (a.queue.total || 0) - (b.queue.total || 0);\n                            if (queueDiff !== 0) return queueDiff;\n                            return a.priority - b.priority;\n                        })[0];\n\n                        console.log(`🎯 推荐服务器: ${bestServer.url}`);\n                        console.log(`   队列状态: ${bestServer.queue.total || 0} 个任务 (运行中: ${bestServer.queue.running || 0}, 等待中: ${bestServer.queue.pending || 0})`);\n                        console.log(`   响应时间: ${bestServer.responseTime}ms`);\n\n                        setStatus(`✅ 测试完成，推荐使用: ${bestServer.url}`, 'success');\n                        return bestServer.url;\n                    } else {\n                        console.log('❌ 所有服务器都不可用，请检查服务器配置');\n                        setStatus('❌ 所有服务器都不可用', 'error');\n                        return null;\n                    }\n\n                } catch (error) {\n                    console.log(`❌ 服务器初始化失败: ${error.message}`);\n                    setStatus('❌ 服务器初始化失败', 'error');\n                    return null;\n                }\n            }\n\n            displayResults(serverResults) {\n                resultsElement.innerHTML = '';\n\n                serverResults.forEach(server => {\n                    const div = document.createElement('div');\n                    div.className = 'server-result';\n\n                    const status = server.healthy ? '✅ 可用' : '❌ 不可用';\n                    const statusClass = server.healthy ? 'success' : 'error';\n\n                    div.innerHTML = `\n                        <h4>${server.url}</h4>\n                        <div class=\"status ${statusClass}\">${status}</div>\n                        <div>类型: ${server.type === 'primary' ? '主服务器' : '备用服务器'}</div>\n                        <div>优先级: ${server.priority}</div>\n                        ${server.responseTime > 0 ? `<div>响应时间: ${server.responseTime}ms</div>` : ''}\n                        ${server.queue ? `<div>队列: ${server.queue.total || 0} (运行中: ${server.queue.running || 0}, 等待中: ${server.queue.pending || 0})</div>` : ''}\n                        ${server.healthCheckEndpoint ? `<div>可用端点: ${server.healthCheckEndpoint}</div>` : ''}\n                        ${server.error ? `<div style=\"color: #dc3545;\">错误: ${server.error}</div>` : ''}\n                    `;\n\n                    resultsElement.appendChild(div);\n                });\n            }\n        }\n\n        const loadBalancer = new StandaloneLoadBalancer();\n\n        window.runFullTest = async function() {\n            clearLog();\n            setStatus('正在运行完整测试...', 'warning');\n\n            try {\n                await loadBalancer.initializeServerConnection();\n            } catch (error) {\n                console.log(`❌ 测试失败: ${error.message}`);\n                setStatus('❌ 测试失败', 'error');\n            }\n        };\n\n        window.testServerSelection = async function() {\n            clearLog();\n            setStatus('正在测试服务器选择...', 'warning');\n\n            try {\n                const servers = await loadBalancer.getLatestServerList();\n                console.log(`📋 配置的服务器列表:`);\n                servers.forEach((server, index) => {\n                    console.log(`   ${index + 1}. ${server.url} (${server.type}, 优先级: ${server.priority})`);\n                });\n\n                setStatus('✅ 服务器列表获取成功', 'success');\n            } catch (error) {\n                console.log(`❌ 获取服务器列表失败: ${error.message}`);\n                setStatus('❌ 获取服务器列表失败', 'error');\n            }\n        };\n\n        window.clearLog = clearLog;\n\n        // 页面加载时自动测试\n        window.addEventListener('load', () => {\n            console.log('📋 页面加载完成，开始自动测试...');\n            setTimeout(() => {\n                runFullTest();\n            }, 1000);\n        });\n    </script>\n</body>\n</html>\n"
        }
    ]
}