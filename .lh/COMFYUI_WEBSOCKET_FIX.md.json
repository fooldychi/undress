{
    "sourceFile": "COMFYUI_WEBSOCKET_FIX.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752566554311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752566587022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,43 +12,94 @@\n 4. **健康检查机制不完善**：WebSocket健康检查不够频繁，无法及时发现连接问题\n \n ## 修复方案\n \n-### 1. 完全移除HTTP轮询机制\n+### 1. 简化WebSocket消息处理逻辑\n \n **修改文件**: `client/src/services/comfyui.js`\n \n-- 删除 `fallbackToHttpPolling()` 函数\n-- 移除所有HTTP轮询相关代码\n-- 简化WebSocket重连逻辑，不再依赖HTTP轮询作为备份\n+**修改前**：复杂的消息修复逻辑\n+```javascript\n+try {\n+  message = JSON.parse(rawData)\n+} catch (parseError) {\n+  // 大量复杂的修复逻辑...\n+  let fixedData = rawData;\n+  // 移除BOM、修复JSON等...\n+}\n+```\n \n-### 2. 优化WebSocket消息处理\n+**修改后**：简化的消息处理\n+```javascript\n+try {\n+  message = JSON.parse(rawData)\n+} catch (parseError) {\n+  console.warn('WebSocket消息解析失败，跳过:', parseError.message)\n+  return\n+}\n+```\n \n-**改进的消息处理**:\n+### 2. 增强WebSocket连接稳定性保证\n+\n+**新增函数**：`ensureWebSocketConnection()`\n ```javascript\n-// 处理执行成功消息 - 立即更新进度到99%\n-function handleExecutionSuccessMessage(data) {\n-  if (task.onProgress) {\n-    task.onProgress('处理完成，正在加载结果...', 99)\n+async function ensureWebSocketConnection() {\n+  // 检查当前连接状态\n+  if (wsConnection && wsConnection.readyState === WebSocket.OPEN && isWsConnected) {\n+    return true\n   }\n-  // 然后获取完整结果\n+\n+  // 重新建立连接并等待稳定\n+  await initializeWebSocket(true)\n+\n+  // 等待连接稳定\n+  let attempts = 0;\n+  while (attempts < 10) {\n+    if (wsConnection && wsConnection.readyState === WebSocket.OPEN && isWsConnected) {\n+      return true\n+    }\n+    await new Promise(resolve => setTimeout(resolve, 500))\n+    attempts++\n+  }\n+\n+  throw new Error('WebSocket连接无法稳定')\n }\n ```\n \n-### 3. 改进进度回调机制\n+### 3. 改进任务完成处理机制\n \n-**修改前**:\n+**修改前**：单次尝试获取结果\n ```javascript\n-onProgress: (progress, status) => {\n-  const adjustedProgress = Math.min(95, Math.max(50, 50 + (progress * 0.49)))\n-  onProgress(`${status}`, adjustedProgress)\n-}\n+checkTaskStatus(promptId).then(result => {\n+  if (task.onComplete) {\n+    task.onComplete(result)\n+  }\n+  pendingTasks.delete(promptId)\n+})\n ```\n \n-**修改后**:\n+**修改后**：增加重试机制\n ```javascript\n-onProgress: (status, progress) => {\n-  onProgress(status, progress) // 直接传递实际进度\n+const fetchResult = () => {\n+  checkTaskStatus(promptId).then(result => {\n+    if (result) {\n+      // 成功获取结果\n+      if (task.onComplete) {\n+        task.onComplete(result)\n+      }\n+      pendingTasks.delete(promptId)\n+    } else if (retryCount < maxRetries) {\n+      // 重试\n+      retryCount++;\n+      setTimeout(fetchResult, 500 * retryCount);\n+    } else {\n+      // 最终失败\n+      if (task.onError) {\n+        task.onError('获取处理结果失败')\n+      }\n+      pendingTasks.delete(promptId)\n+    }\n+  })\n }\n ```\n \n ### 4. 简化任务等待逻辑\n"
                }
            ],
            "date": 1752566554311,
            "name": "Commit-0",
            "content": "# ComfyUI WebSocket 任务完成检测修复 - 2024年更新版\n\n## 问题描述\n\n目前系统存在ComfyUI已经处理完成，但客户端没有返回结果的情况。经过分析，这主要是由WebSocket连接不稳定和消息处理逻辑复杂导致的。\n\n## 根本原因分析\n\n1. **复杂的消息处理逻辑**：原有代码包含大量复杂的JSON修复逻辑，可能导致关键消息被误处理\n2. **WebSocket连接不稳定**：连接状态检查不够严格，任务提交时连接可能已断开\n3. **任务完成信号处理不可靠**：依赖单一的`execution_success`消息，缺少备用机制和重试\n4. **健康检查机制不完善**：WebSocket健康检查不够频繁，无法及时发现连接问题\n\n## 修复方案\n\n### 1. 完全移除HTTP轮询机制\n\n**修改文件**: `client/src/services/comfyui.js`\n\n- 删除 `fallbackToHttpPolling()` 函数\n- 移除所有HTTP轮询相关代码\n- 简化WebSocket重连逻辑，不再依赖HTTP轮询作为备份\n\n### 2. 优化WebSocket消息处理\n\n**改进的消息处理**:\n```javascript\n// 处理执行成功消息 - 立即更新进度到99%\nfunction handleExecutionSuccessMessage(data) {\n  if (task.onProgress) {\n    task.onProgress('处理完成，正在加载结果...', 99)\n  }\n  // 然后获取完整结果\n}\n```\n\n### 3. 改进进度回调机制\n\n**修改前**:\n```javascript\nonProgress: (progress, status) => {\n  const adjustedProgress = Math.min(95, Math.max(50, 50 + (progress * 0.49)))\n  onProgress(`${status}`, adjustedProgress)\n}\n```\n\n**修改后**:\n```javascript\nonProgress: (status, progress) => {\n  onProgress(status, progress) // 直接传递实际进度\n}\n```\n\n### 4. 简化任务等待逻辑\n\n**移除的复杂逻辑**:\n- HTTP轮询检查间隔\n- 双重状态验证\n- 复杂的超时检查机制\n\n**保留的核心功能**:\n- WebSocket连接监控\n- 任务超时处理\n- 错误状态处理\n\n### 5. 增强WebSocket健康检查\n\n**改进的健康检查**:\n```javascript\n// 如果超过120秒没有收到消息且有待处理任务，标记任务失败\nif (timeSinceLastMessage > 120000 && pendingTasks.size > 0) {\n  console.error('❌ WebSocket长时间无响应，标记待处理任务为失败')\n  // 清理所有待处理任务\n}\n```\n\n## 修复效果\n\n### 优势\n1. **消除机制冲突**：只使用WebSocket，避免双重检测导致的竞态条件\n2. **提高响应速度**：直接依赖WebSocket实时消息，无延迟\n3. **简化代码逻辑**：移除复杂的HTTP轮询逻辑，代码更清晰\n4. **准确的进度显示**：允许进度达到99%，更准确反映实际状态\n\n### 风险控制\n1. **WebSocket断开处理**：增强重连机制和失败处理\n2. **任务超时保护**：保留任务超时机制防止无限等待\n3. **错误状态处理**：完善的错误回调和通知机制\n\n## 测试验证\n\n创建了测试工具 `client/src/utils/comfyui-test.js` 用于验证修复效果：\n\n```javascript\n// 测试WebSocket连接\nawait testWebSocketConnection()\n\n// 检查WebSocket健康状态\ncheckWebSocketHealth()\n```\n\n## 使用建议\n\n1. **监控WebSocket连接状态**：确保WebSocket连接稳定\n2. **观察任务完成时间**：验证任务完成检测是否及时\n3. **检查控制台日志**：关注WebSocket消息处理日志\n4. **测试网络异常情况**：验证断网重连机制\n\n## 后续优化\n\n如果仍有问题，可以考虑：\n1. 调整WebSocket健康检查间隔\n2. 优化任务超时时间设置\n3. 增加更详细的调试日志\n4. 实现WebSocket连接质量监控\n\n这次修复专注于解决双重机制冲突问题，通过完全依赖WebSocket实现更可靠的任务状态同步。\n"
        }
    ]
}