{
    "sourceFile": "scripts/protect-port-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752408289136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752408289136,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * 端口配置保护工具\n * 防止端口管理脚本被意外修改，确保配置一致性\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\nclass PortConfigProtector {\n  constructor() {\n    this.projectRoot = path.join(__dirname, '..');\n    this.protectedFiles = [\n      'port-config.json',\n      'scripts/port-manager.js',\n      'scripts/start-with-port-management.js',\n      'start-managed.js',\n      'start-managed.bat',\n      'start-managed.sh'\n    ];\n    this.checksumFile = path.join(__dirname, '.port-config-checksums.json');\n  }\n\n  /**\n   * 计算文件的MD5校验和\n   */\n  calculateChecksum(filePath) {\n    try {\n      const content = fs.readFileSync(filePath, 'utf8');\n      return crypto.createHash('md5').update(content).digest('hex');\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * 生成所有保护文件的校验和\n   */\n  generateChecksums() {\n    const checksums = {};\n\n    for (const file of this.protectedFiles) {\n      const filePath = path.join(this.projectRoot, file);\n      const checksum = this.calculateChecksum(filePath);\n\n      if (checksum) {\n        checksums[file] = {\n          checksum,\n          lastModified: fs.statSync(filePath).mtime.toISOString()\n        };\n      }\n    }\n\n    fs.writeFileSync(this.checksumFile, JSON.stringify(checksums, null, 2));\n    console.log('✅ 端口配置文件校验和已生成');\n    return checksums;\n  }\n\n  /**\n   * 验证文件完整性\n   */\n  verifyIntegrity() {\n    if (!fs.existsSync(this.checksumFile)) {\n      console.log('⚠️ 校验和文件不存在，正在生成...');\n      return this.generateChecksums();\n    }\n\n    const savedChecksums = JSON.parse(fs.readFileSync(this.checksumFile, 'utf8'));\n    const issues = [];\n\n    for (const file of this.protectedFiles) {\n      const filePath = path.join(this.projectRoot, file);\n      const currentChecksum = this.calculateChecksum(filePath);\n      const savedData = savedChecksums[file];\n\n      if (!savedData) {\n        issues.push({\n          file,\n          issue: 'missing_baseline',\n          message: '缺少基线校验和'\n        });\n        continue;\n      }\n\n      if (!currentChecksum) {\n        issues.push({\n          file,\n          issue: 'file_missing',\n          message: '文件不存在'\n        });\n        continue;\n      }\n\n      if (currentChecksum !== savedData.checksum) {\n        issues.push({\n          file,\n          issue: 'modified',\n          message: '文件已被修改',\n          expected: savedData.checksum,\n          actual: currentChecksum\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * 显示完整性检查报告\n   */\n  showIntegrityReport() {\n    console.log('🔍 端口配置文件完整性检查');\n    console.log('='.repeat(50));\n\n    const issues = this.verifyIntegrity();\n\n    if (!Array.isArray(issues) || issues.length === 0) {\n      console.log('✅ 所有端口配置文件完整性正常');\n      return true;\n    }\n\n    console.log('❌ 发现以下问题:');\n    issues.forEach(issue => {\n      console.log(`\\n📁 文件: ${issue.file}`);\n      console.log(`🚨 问题: ${issue.message}`);\n      if (issue.expected && issue.actual) {\n        console.log(`   期望校验和: ${issue.expected}`);\n        console.log(`   实际校验和: ${issue.actual}`);\n      }\n    });\n\n    console.log('\\n💡 建议:');\n    console.log('1. 检查文件是否被意外修改');\n    console.log('2. 如果修改是预期的，运行: node scripts/protect-port-config.js update');\n    console.log('3. 如果需要恢复，请从版本控制系统恢复文件');\n\n    return false;\n  }\n\n  /**\n   * 更新校验和基线\n   */\n  updateBaseline() {\n    console.log('🔄 更新端口配置文件校验和基线...');\n    this.generateChecksums();\n    console.log('✅ 校验和基线已更新');\n  }\n\n  /**\n   * 检查硬编码端口\n   */\n  checkHardcodedPorts() {\n    console.log('🔍 检查硬编码端口...');\n\n    const hardcodedPatterns = [\n      {\n        pattern: /localhost:3001(?![0-9])/g,\n        description: '硬编码的客户端端口 3001'\n      },\n      {\n        pattern: /localhost:3002(?![0-9])/g,\n        description: '硬编码的端口 3002'\n      },\n      {\n        pattern: /localhost:3003(?![0-9])/g,\n        description: '硬编码的后台管理端口 3003'\n      },\n      {\n        pattern: /localhost:3006(?![0-9])/g,\n        description: '硬编码的旧后端端口 3006'\n      },\n      {\n        pattern: /localhost:3007(?![0-9])/g,\n        description: '硬编码的后端端口 3007'\n      },\n      {\n        pattern: /localhost:3009(?![0-9])/g,\n        description: '硬编码的端口 3009'\n      }\n    ];\n\n    const filesToCheck = [\n      'client/src/services/api.js',\n      'admin/src/utils/request.js',\n      'client/vite.config.js',\n      'admin/vite.config.js',\n      'server/src/app.js'\n    ];\n\n    const issues = [];\n\n    for (const file of filesToCheck) {\n      const filePath = path.join(this.projectRoot, file);\n\n      if (!fs.existsSync(filePath)) {\n        continue;\n      }\n\n      const content = fs.readFileSync(filePath, 'utf8');\n\n      for (const { pattern, description } of hardcodedPatterns) {\n        const matches = content.match(pattern);\n        if (matches) {\n          const lines = content.split('\\n');\n          const lineNumbers = [];\n\n          lines.forEach((line, index) => {\n            if (pattern.test(line)) {\n              lineNumbers.push(index + 1);\n            }\n          });\n\n          issues.push({\n            file,\n            description,\n            matches: matches.length,\n            lines: lineNumbers\n          });\n        }\n      }\n    }\n\n    if (issues.length === 0) {\n      console.log('✅ 未发现硬编码端口问题');\n      return true;\n    }\n\n    console.log('❌ 发现硬编码端口问题:');\n    issues.forEach(issue => {\n      console.log(`\\n📁 文件: ${issue.file}`);\n      console.log(`🚨 问题: ${issue.description}`);\n      console.log(`📍 行号: ${issue.lines.join(', ')}`);\n      console.log(`🔢 匹配数: ${issue.matches}`);\n    });\n\n    console.log('\\n💡 建议:');\n    console.log('1. 使用环境变量或配置文件替代硬编码端口');\n    console.log('2. 在开发环境使用代理配置');\n    console.log('3. 运行: node scripts/protect-port-config.js fix 自动修复');\n\n    return false;\n  }\n\n  /**\n   * 自动修复硬编码端口问题\n   */\n  fixHardcodedPorts() {\n    console.log('🔧 自动修复硬编码端口问题...');\n\n    // 修复 client/src/services/api.js\n    const apiFilePath = path.join(this.projectRoot, 'client/src/services/api.js');\n    if (fs.existsSync(apiFilePath)) {\n      let content = fs.readFileSync(apiFilePath, 'utf8');\n\n      // 替换硬编码的 localhost:3007\n      const oldPattern = \"BASE_URL: import.meta.env.DEV ? '' : 'http://localhost:3007'\";\n      const newPattern = \"BASE_URL: import.meta.env.DEV ? '' : `http://localhost:${import.meta.env.VITE_SERVER_PORT || 3007}`\";\n\n      if (content.includes(oldPattern)) {\n        content = content.replace(oldPattern, newPattern);\n        fs.writeFileSync(apiFilePath, content);\n        console.log('✅ 修复了 client/src/services/api.js 中的硬编码端口');\n      }\n    }\n\n    console.log('✅ 硬编码端口修复完成');\n  }\n\n  /**\n   * 显示帮助信息\n   */\n  showHelp() {\n    console.log('🛡️ 端口配置保护工具');\n    console.log('');\n    console.log('用法:');\n    console.log('  node scripts/protect-port-config.js <命令>');\n    console.log('');\n    console.log('命令:');\n    console.log('  check      检查文件完整性和硬编码端口');\n    console.log('  verify     验证文件完整性');\n    console.log('  update     更新校验和基线');\n    console.log('  hardcode   检查硬编码端口');\n    console.log('  fix        自动修复硬编码端口');\n    console.log('  help       显示帮助信息');\n    console.log('');\n    console.log('示例:');\n    console.log('  node scripts/protect-port-config.js check');\n    console.log('  node scripts/protect-port-config.js fix');\n  }\n}\n\n// 主函数\nasync function main() {\n  const protector = new PortConfigProtector();\n  const command = process.argv[2] || 'check';\n\n  switch (command) {\n    case 'check':\n      const integrityOk = protector.showIntegrityReport();\n      const hardcodeOk = protector.checkHardcodedPorts();\n      process.exit(integrityOk && hardcodeOk ? 0 : 1);\n      break;\n\n    case 'verify':\n      const ok = protector.showIntegrityReport();\n      process.exit(ok ? 0 : 1);\n      break;\n\n    case 'update':\n      protector.updateBaseline();\n      break;\n\n    case 'hardcode':\n      const hardcodeResult = protector.checkHardcodedPorts();\n      process.exit(hardcodeResult ? 0 : 1);\n      break;\n\n    case 'fix':\n      protector.fixHardcodedPorts();\n      break;\n\n    case 'help':\n    default:\n      protector.showHelp();\n      break;\n  }\n}\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = PortConfigProtector;\n"
        }
    ]
}