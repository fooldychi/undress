{
    "sourceFile": "scripts/port-config-manager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752973919763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752973935300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,12 +209,24 @@\n     }\n   }\n \n   async fixServerApp(port, fixes) {\n-    const appPath = path.join(__dirname, '..', 'server', 'src', 'app.js');\n+    // 尝试两个可能的路径\n+    const appPaths = [\n+      path.join(__dirname, '..', 'server', 'src', 'app.js'),\n+      path.join(__dirname, '..', 'server', 'app.js')\n+    ];\n \n-    if (!fs.existsSync(appPath)) {\n-      console.log(`⚠️ server/src/app.js 不存在，跳过修复`);\n+    let appPath = null;\n+    for (const p of appPaths) {\n+      if (fs.existsSync(p)) {\n+        appPath = p;\n+        break;\n+      }\n+    }\n+\n+    if (!appPath) {\n+      console.log(`⚠️ server/app.js 或 server/src/app.js 不存在，跳过修复`);\n       return;\n     }\n \n     let content = fs.readFileSync(appPath, 'utf8');\n"
                },
                {
                    "date": 1752973965545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,9 @@\n     // 如果是 admin，还需要修复代理配置中的服务器端口\n     if (service === 'admin') {\n       content = content.replace(\n         /target:\\s*['\"`]http:\\/\\/localhost:\\d+['\"`]/g,\n-        `target: 'http://localhost:${standardPorts.server}'`\n+        `target: 'http://localhost:${this.config.ports.server}'`\n       );\n     }\n \n     if (content !== originalContent) {\n"
                }
            ],
            "date": 1752973919763,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * AIMagic 项目端口配置管理器\n * 统一管理和验证所有服务的端口配置\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nclass PortConfigManager {\n  constructor() {\n    this.configPath = path.join(__dirname, '..', 'port-config.json');\n    this.config = this.loadConfig();\n    this.logPath = path.join(__dirname, '..', 'PORT_CONFIG_CHANGELOG.md');\n  }\n\n  loadConfig() {\n    try {\n      const configContent = fs.readFileSync(this.configPath, 'utf8');\n      return JSON.parse(configContent);\n    } catch (error) {\n      console.error('❌ 无法加载端口配置文件:', error.message);\n      process.exit(1);\n    }\n  }\n\n  // 检查所有配置文件中的端口设置\n  async checkPortConsistency() {\n    console.log('🔍 检查端口配置一致性...\\n');\n\n    const issues = [];\n    const standardPorts = this.config.ports;\n\n    // 检查配置文件列表\n    const configFiles = [\n      {\n        path: 'client/vite.config.js',\n        service: 'client',\n        patterns: [\n          { regex: /port:\\s*(\\d+)/, description: 'Vite dev server port' }\n        ]\n      },\n      {\n        path: 'admin/vite.config.js',\n        service: 'admin',\n        patterns: [\n          { regex: /port:\\s*(\\d+)/, description: 'Vite dev server port' }\n        ]\n      },\n      {\n        path: 'server/.env',\n        service: 'server',\n        patterns: [\n          { regex: /PORT=(\\d+)/, description: 'Server port' },\n          { regex: /SERVER_PORT=(\\d+)/, description: 'Server port variable' }\n        ]\n      },\n      {\n        path: 'server/src/app.js',\n        service: 'server',\n        patterns: [\n          { regex: /PORT.*?(\\d+)/, description: 'App.js port fallback' }\n        ]\n      }\n    ];\n\n    for (const configFile of configFiles) {\n      const filePath = path.join(__dirname, '..', configFile.path);\n\n      if (!fs.existsSync(filePath)) {\n        issues.push({\n          file: configFile.path,\n          issue: '文件不存在',\n          severity: 'warning'\n        });\n        continue;\n      }\n\n      const content = fs.readFileSync(filePath, 'utf8');\n      const expectedPort = standardPorts[configFile.service];\n\n      for (const pattern of configFile.patterns) {\n        const matches = content.match(pattern.regex);\n        if (matches) {\n          const foundPort = parseInt(matches[1]);\n          if (foundPort !== expectedPort) {\n            issues.push({\n              file: configFile.path,\n              issue: `${pattern.description}: 发现端口 ${foundPort}, 期望 ${expectedPort}`,\n              severity: 'error',\n              foundPort,\n              expectedPort,\n              service: configFile.service\n            });\n          }\n        }\n      }\n    }\n\n    return issues;\n  }\n\n  // 修复端口配置\n  async fixPortConfiguration() {\n    console.log('🔧 开始修复端口配置...\\n');\n\n    const fixes = [];\n    const standardPorts = this.config.ports;\n\n    // 修复 client/vite.config.js\n    await this.fixViteConfig('client', standardPorts.client, fixes);\n\n    // 修复 admin/vite.config.js\n    await this.fixViteConfig('admin', standardPorts.admin, fixes);\n\n    // 修复 server/.env\n    await this.fixServerEnv(standardPorts.server, fixes);\n\n    // 修复 server/src/app.js 或 server/app.js\n    await this.fixServerApp(standardPorts.server, fixes);\n\n    // 记录修复日志\n    if (fixes.length > 0) {\n      this.logChanges(fixes);\n    }\n\n    return fixes;\n  }\n\n  async fixViteConfig(service, port, fixes) {\n    const configPath = path.join(__dirname, '..', service, 'vite.config.js');\n\n    if (!fs.existsSync(configPath)) {\n      console.log(`⚠️ ${service}/vite.config.js 不存在，跳过修复`);\n      return;\n    }\n\n    let content = fs.readFileSync(configPath, 'utf8');\n    const originalContent = content;\n\n    // 修复端口配置\n    content = content.replace(\n      /port:\\s*\\d+/g,\n      `port: ${port}`\n    );\n\n    // 如果是 admin，还需要修复代理配置中的服务器端口\n    if (service === 'admin') {\n      content = content.replace(\n        /target:\\s*['\"`]http:\\/\\/localhost:\\d+['\"`]/g,\n        `target: 'http://localhost:${standardPorts.server}'`\n      );\n    }\n\n    if (content !== originalContent) {\n      fs.writeFileSync(configPath, content);\n      fixes.push({\n        file: `${service}/vite.config.js`,\n        action: `端口修复为 ${port}`,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`✅ 修复 ${service}/vite.config.js 端口为 ${port}`);\n    }\n  }\n\n  async fixServerEnv(port, fixes) {\n    const envPath = path.join(__dirname, '..', 'server', '.env');\n\n    if (!fs.existsSync(envPath)) {\n      // 创建 .env 文件\n      const envContent = `PORT=${port}\\nSERVER_PORT=${port}\\n`;\n      fs.writeFileSync(envPath, envContent);\n      fixes.push({\n        file: 'server/.env',\n        action: `创建 .env 文件，设置端口为 ${port}`,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`✅ 创建 server/.env，端口设置为 ${port}`);\n      return;\n    }\n\n    let content = fs.readFileSync(envPath, 'utf8');\n    const originalContent = content;\n\n    // 修复或添加 PORT 配置\n    if (content.includes('PORT=')) {\n      content = content.replace(/PORT=\\d+/g, `PORT=${port}`);\n    } else {\n      content += `\\nPORT=${port}`;\n    }\n\n    // 修复或添加 SERVER_PORT 配置\n    if (content.includes('SERVER_PORT=')) {\n      content = content.replace(/SERVER_PORT=\\d+/g, `SERVER_PORT=${port}`);\n    } else {\n      content += `\\nSERVER_PORT=${port}`;\n    }\n\n    if (content !== originalContent) {\n      fs.writeFileSync(envPath, content);\n      fixes.push({\n        file: 'server/.env',\n        action: `端口修复为 ${port}`,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`✅ 修复 server/.env 端口为 ${port}`);\n    }\n  }\n\n  async fixServerApp(port, fixes) {\n    const appPath = path.join(__dirname, '..', 'server', 'src', 'app.js');\n\n    if (!fs.existsSync(appPath)) {\n      console.log(`⚠️ server/src/app.js 不存在，跳过修复`);\n      return;\n    }\n\n    let content = fs.readFileSync(appPath, 'utf8');\n    const originalContent = content;\n\n    // 修复端口配置的默认值\n    content = content.replace(\n      /process\\.env\\.PORT\\s*\\|\\|\\s*\\d+/g,\n      `process.env.PORT || ${port}`\n    );\n\n    if (content !== originalContent) {\n      fs.writeFileSync(appPath, content);\n      fixes.push({\n        file: 'server/src/app.js',\n        action: `端口默认值修复为 ${port}`,\n        timestamp: new Date().toISOString()\n      });\n      console.log(`✅ 修复 server/src/app.js 端口默认值为 ${port}`);\n    }\n  }\n\n  // 记录变更日志\n  logChanges(fixes) {\n    if (fixes.length === 0) return;\n\n    const logEntry = `\n## 端口配置修复 - ${new Date().toISOString()}\n\n### 修复内容:\n${fixes.map(fix => `- **${fix.file}**: ${fix.action}`).join('\\n')}\n\n### 标准端口配置:\n- 客户端前端: ${this.config.ports.client}\n- 后台管理系统: ${this.config.ports.admin}\n- 后端API服务: ${this.config.ports.server}\n\n---\n`;\n\n    if (fs.existsSync(this.logPath)) {\n      const existingLog = fs.readFileSync(this.logPath, 'utf8');\n      fs.writeFileSync(this.logPath, logEntry + existingLog);\n    } else {\n      const header = `# AIMagic 端口配置变更日志\n\n此文件记录所有端口配置的变更历史。\n\n`;\n      fs.writeFileSync(this.logPath, header + logEntry);\n    }\n  }\n\n  // 验证端口是否被占用\n  async checkPortAvailability() {\n    console.log('🔍 检查端口可用性...\\n');\n\n    const ports = Object.values(this.config.ports);\n    const results = [];\n\n    for (const port of ports) {\n      try {\n        // 在 Windows 上检查端口占用\n        const command = process.platform === 'win32'\n          ? `netstat -ano | findstr :${port}`\n          : `lsof -i :${port}`;\n\n        const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });\n\n        if (output.trim()) {\n          results.push({\n            port,\n            status: 'occupied',\n            details: output.trim()\n          });\n        } else {\n          results.push({\n            port,\n            status: 'available'\n          });\n        }\n      } catch (error) {\n        // 命令执行失败通常意味着端口未被占用\n        results.push({\n          port,\n          status: 'available'\n        });\n      }\n    }\n\n    return results;\n  }\n\n  // 生成端口配置报告\n  async generateReport() {\n    console.log('📊 生成端口配置报告...\\n');\n\n    const issues = await this.checkPortConsistency();\n    const availability = await this.checkPortAvailability();\n\n    const report = {\n      timestamp: new Date().toISOString(),\n      standardPorts: this.config.ports,\n      issues,\n      portAvailability: availability,\n      summary: {\n        totalIssues: issues.length,\n        errorCount: issues.filter(i => i.severity === 'error').length,\n        warningCount: issues.filter(i => i.severity === 'warning').length,\n        portsOccupied: availability.filter(p => p.status === 'occupied').length\n      }\n    };\n\n    return report;\n  }\n}\n\n// CLI 接口\nasync function main() {\n  const manager = new PortConfigManager();\n  const command = process.argv[2];\n\n  switch (command) {\n    case 'check':\n      const issues = await manager.checkPortConsistency();\n      if (issues.length === 0) {\n        console.log('✅ 所有端口配置一致！');\n      } else {\n        console.log('❌ 发现端口配置问题:');\n        issues.forEach(issue => {\n          const icon = issue.severity === 'error' ? '❌' : '⚠️';\n          console.log(`${icon} ${issue.file}: ${issue.issue}`);\n        });\n        process.exit(1);\n      }\n      break;\n\n    case 'fix':\n      const fixes = await manager.fixPortConfiguration();\n      if (fixes.length === 0) {\n        console.log('✅ 端口配置已经正确，无需修复');\n      } else {\n        console.log(`✅ 完成 ${fixes.length} 项端口配置修复`);\n      }\n      break;\n\n    case 'report':\n      const report = await manager.generateReport();\n      console.log(JSON.stringify(report, null, 2));\n      break;\n\n    case 'availability':\n      const availability = await manager.checkPortAvailability();\n      availability.forEach(result => {\n        const icon = result.status === 'available' ? '✅' : '❌';\n        console.log(`${icon} 端口 ${result.port}: ${result.status}`);\n        if (result.details) {\n          console.log(`   ${result.details}`);\n        }\n      });\n      break;\n\n    default:\n      console.log(`\nAIMagic 端口配置管理器\n\n用法:\n  node scripts/port-config-manager.js <command>\n\n命令:\n  check        检查端口配置一致性\n  fix          修复端口配置问题\n  report       生成详细报告\n  availability 检查端口可用性\n\n示例:\n  node scripts/port-config-manager.js check\n  node scripts/port-config-manager.js fix\n      `);\n  }\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = PortConfigManager;\n"
        }
    ]
}