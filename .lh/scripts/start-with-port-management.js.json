{
    "sourceFile": "scripts/start-with-port-management.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1752407741032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752407753017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n    * 显示启动完成信息\n    */\n   showStartupComplete() {\n     console.log('🎉 所有服务启动完成！');\n-    console.log('=' * 40);\n+    console.log('='.repeat(40));\n     console.log('');\n     console.log('📍 访问地址:');\n \n     Object.entries(this.portManager.config.services).forEach(([_, config]) => {\n"
                },
                {
                    "date": 1752407764823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n    * 启动单个服务\n    */\n   async startSingle(serviceName) {\n     console.log(`🚀 启动 ${serviceName} 服务`);\n-    console.log('=' * 30);\n+    console.log('='.repeat(30));\n     console.log('');\n \n     // 验证端口\n     const available = await this.portManager.handlePortConflict(\n"
                }
            ],
            "date": 1752407741032,
            "name": "Commit-0",
            "content": "#!/usr/bin/env node\n\n/**\n * AIMagic 项目统一启动脚本\n * 使用端口管理工具确保端口配置正确\n */\n\nconst PortManager = require('./port-manager');\nconst { spawn } = require('child_process');\nconst path = require('path');\n\nclass ProjectStarter {\n  constructor() {\n    this.portManager = new PortManager();\n    this.processes = new Map();\n  }\n\n  /**\n   * 启动所有服务\n   */\n  async startAll() {\n    console.log('🚀 AIMagic 项目启动器');\n    console.log('='.repeat(40));\n    console.log('');\n\n    // 首先验证所有端口\n    console.log('第一步: 验证端口配置...');\n    const portResults = await this.portManager.validateAllPorts();\n\n    // 检查是否所有端口都可用\n    const unavailablePorts = Object.entries(portResults)\n      .filter(([_, result]) => !result.available);\n\n    if (unavailablePorts.length > 0) {\n      console.error('❌ 以下端口不可用:');\n      unavailablePorts.forEach(([service, result]) => {\n        console.error(`  - ${result.config.name}: 端口 ${result.port}`);\n      });\n      console.error('\\n请解决端口冲突后重试。');\n      process.exit(1);\n    }\n\n    console.log('✅ 所有端口验证通过！\\n');\n\n    // 按顺序启动服务\n    const startOrder = ['server', 'client', 'admin'];\n\n    for (const serviceName of startOrder) {\n      await this.startServiceWithDelay(serviceName);\n    }\n\n    // 显示启动完成信息\n    this.showStartupComplete();\n\n    // 设置进程退出处理\n    this.setupExitHandlers();\n  }\n\n  /**\n   * 启动单个服务并等待\n   */\n  async startServiceWithDelay(serviceName) {\n    const serviceConfig = this.portManager.config.services[serviceName];\n\n    console.log(`🔄 启动 ${serviceConfig.name}...`);\n\n    const cwd = path.join(__dirname, '..', serviceConfig.directory);\n    const [command, ...args] = serviceConfig.startCommand.split(' ');\n\n    const child = spawn(command, args, {\n      cwd,\n      stdio: ['inherit', 'pipe', 'pipe'],\n      shell: true\n    });\n\n    // 存储进程引用\n    this.processes.set(serviceName, {\n      process: child,\n      config: serviceConfig\n    });\n\n    // 监听进程输出\n    child.stdout.on('data', (data) => {\n      const output = data.toString().trim();\n      if (output) {\n        console.log(`[${serviceConfig.name}] ${output}`);\n      }\n    });\n\n    child.stderr.on('data', (data) => {\n      const output = data.toString().trim();\n      if (output) {\n        console.error(`[${serviceConfig.name}] ${output}`);\n      }\n    });\n\n    child.on('error', (error) => {\n      console.error(`❌ ${serviceConfig.name} 启动失败:`, error.message);\n    });\n\n    child.on('exit', (code) => {\n      if (code !== 0) {\n        console.error(`❌ ${serviceConfig.name} 异常退出，代码: ${code}`);\n      }\n      this.processes.delete(serviceName);\n    });\n\n    // 等待服务启动\n    await new Promise(resolve => setTimeout(resolve, 3000));\n\n    console.log(`✅ ${serviceConfig.name} 启动完成`);\n    console.log(`🌐 访问地址: ${serviceConfig.url}\\n`);\n  }\n\n  /**\n   * 显示启动完成信息\n   */\n  showStartupComplete() {\n    console.log('🎉 所有服务启动完成！');\n    console.log('=' * 40);\n    console.log('');\n    console.log('📍 访问地址:');\n\n    Object.entries(this.portManager.config.services).forEach(([_, config]) => {\n      console.log(`  ${config.name}: ${config.url}`);\n    });\n\n    console.log('');\n    console.log('💡 提示:');\n    console.log('  - 按 Ctrl+C 停止所有服务');\n    console.log('  - 建议按以下顺序访问: 后端API → 客户端 → 后台管理');\n    console.log('');\n    console.log('🔧 端口管理:');\n    console.log('  - 所有端口都已通过端口管理工具验证');\n    console.log('  - 如遇端口冲突，工具会自动处理');\n    console.log('');\n  }\n\n  /**\n   * 设置退出处理程序\n   */\n  setupExitHandlers() {\n    const cleanup = () => {\n      console.log('\\n🛑 正在停止所有服务...');\n\n      this.processes.forEach((serviceInfo, serviceName) => {\n        console.log(`⏹️ 停止 ${serviceInfo.config.name}...`);\n        try {\n          serviceInfo.process.kill('SIGTERM');\n        } catch (error) {\n          console.error(`❌ 停止 ${serviceInfo.config.name} 失败:`, error.message);\n        }\n      });\n\n      setTimeout(() => {\n        console.log('✅ 所有服务已停止');\n        process.exit(0);\n      }, 2000);\n    };\n\n    process.on('SIGINT', cleanup);\n    process.on('SIGTERM', cleanup);\n    process.on('exit', cleanup);\n  }\n\n  /**\n   * 启动单个服务\n   */\n  async startSingle(serviceName) {\n    console.log(`🚀 启动 ${serviceName} 服务`);\n    console.log('=' * 30);\n    console.log('');\n\n    // 验证端口\n    const available = await this.portManager.handlePortConflict(\n      serviceName,\n      this.portManager.config.services[serviceName].port\n    );\n\n    if (!available) {\n      console.error(`❌ 端口冲突，无法启动 ${serviceName}`);\n      process.exit(1);\n    }\n\n    // 启动服务\n    await this.startServiceWithDelay(serviceName);\n\n    console.log('✅ 服务启动完成！');\n    console.log('按 Ctrl+C 停止服务');\n\n    // 设置退出处理\n    this.setupExitHandlers();\n\n    // 保持进程运行\n    process.stdin.resume();\n  }\n\n  /**\n   * 显示帮助信息\n   */\n  showHelp() {\n    console.log('🛠️ AIMagic 项目启动器');\n    console.log('');\n    console.log('用法:');\n    console.log('  node scripts/start-with-port-management.js [命令] [服务]');\n    console.log('');\n    console.log('命令:');\n    console.log('  all            启动所有服务 (默认)');\n    console.log('  single <服务>  启动单个服务');\n    console.log('  help           显示帮助信息');\n    console.log('');\n    console.log('服务:');\n    console.log('  server         后端API服务 (端口 3007)');\n    console.log('  client         客户端前端 (端口 3001)');\n    console.log('  admin          后台管理系统 (端口 3003)');\n    console.log('');\n    console.log('示例:');\n    console.log('  node scripts/start-with-port-management.js');\n    console.log('  node scripts/start-with-port-management.js all');\n    console.log('  node scripts/start-with-port-management.js single server');\n    console.log('');\n    console.log('特性:');\n    console.log('  ✅ 自动检测端口冲突');\n    console.log('  ✅ 自动终止冲突进程');\n    console.log('  ✅ 强制使用指定端口');\n    console.log('  ✅ 统一启动管理');\n  }\n}\n\n// 主函数\nasync function main() {\n  const starter = new ProjectStarter();\n  const command = process.argv[2] || 'all';\n  const service = process.argv[3];\n\n  try {\n    switch (command) {\n      case 'all':\n        await starter.startAll();\n        break;\n\n      case 'single':\n        if (!service) {\n          console.error('❌ 请指定要启动的服务: server, client, 或 admin');\n          process.exit(1);\n        }\n        if (!starter.portManager.config.services[service]) {\n          console.error(`❌ 未知服务: ${service}`);\n          process.exit(1);\n        }\n        await starter.startSingle(service);\n        break;\n\n      case 'help':\n      default:\n        starter.showHelp();\n        break;\n    }\n  } catch (error) {\n    console.error('❌ 启动失败:', error.message);\n    process.exit(1);\n  }\n}\n\n// 如果直接运行此脚本\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = ProjectStarter;\n"
        }
    ]
}