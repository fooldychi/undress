{
    "sourceFile": "test-workflow-config.html",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752813183860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752813203991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,37 +160,28 @@\n \n         function displayConfig(config) {\n             const configEl = document.getElementById('configDisplay');\n \n-            // 过滤出工作流相关配置\n-            const workflowConfigs = Object.entries(config).filter(([key]) =>\n-                key.startsWith('workflow.')\n-            );\n-\n-            if (workflowConfigs.length === 0) {\n+            if (!config || Object.keys(config).length === 0) {\n                 configEl.innerHTML = '<div class=\"status error\">未找到工作流配置</div>';\n                 return;\n             }\n \n-            // 按工作流类型分组\n-            const faceswapConfigs = workflowConfigs.filter(([key]) => key.includes('faceswap'));\n-            const undressConfigs = workflowConfigs.filter(([key]) => key.includes('undress'));\n-\n             let html = '';\n \n             // 换脸工作流配置\n-            if (faceswapConfigs.length > 0) {\n+            if (config.faceswap) {\n                 html += '<div class=\"workflow-section\">';\n                 html += '<div class=\"workflow-title\">🔄 换脸工作流配置</div>';\n-                html += renderConfigGroup(faceswapConfigs);\n+                html += renderWorkflowConfig('faceswap', config.faceswap);\n                 html += '</div>';\n             }\n \n             // 一键褪衣工作流配置\n-            if (undressConfigs.length > 0) {\n+            if (config.undress) {\n                 html += '<div class=\"workflow-section\">';\n                 html += '<div class=\"workflow-title\">👗 一键褪衣工作流配置</div>';\n-                html += renderConfigGroup(undressConfigs);\n+                html += renderWorkflowConfig('undress', config.undress);\n                 html += '</div>';\n             }\n \n             configEl.innerHTML = html;\n"
                },
                {
                    "date": 1752813228527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,49 +186,45 @@\n \n             configEl.innerHTML = html;\n         }\n \n-        function renderConfigGroup(configs) {\n+        function renderWorkflowConfig(workflowType, workflowConfig) {\n             let html = '';\n \n-            // 按类型分组\n-            const groups = {\n-                basic: configs.filter(([key]) => !key.includes('input_nodes') && !key.includes('output_nodes')),\n-                input: configs.filter(([key]) => key.includes('input_nodes')),\n-                output: configs.filter(([key]) => key.includes('output_nodes'))\n-            };\n+            // 基础信息\n+            html += '<div class=\"node-group\">';\n+            html += '<div class=\"node-group-title\">基础信息</div>';\n+            html += `<div class=\"config-item\">\n+                <span class=\"config-key\">工作流名称</span>\n+                <span class=\"config-value\">${workflowConfig.name}</span>\n+            </div>`;\n+            html += `<div class=\"config-item\">\n+                <span class=\"config-key\">启用状态</span>\n+                <span class=\"config-value\">${workflowConfig.enabled ? '✅ 启用' : '❌ 禁用'}</span>\n+            </div>`;\n+            html += '</div>';\n \n-            if (groups.basic.length > 0) {\n+            // 输入节点配置\n+            if (workflowConfig.inputNodes) {\n                 html += '<div class=\"node-group\">';\n-                html += '<div class=\"node-group-title\">基础配置</div>';\n-                groups.basic.forEach(([key, value]) => {\n-                    html += `<div class=\"config-item\">\n-                        <span class=\"config-key\">${key}</span>\n-                        <span class=\"config-value\">${value}</span>\n-                    </div>`;\n-                });\n-                html += '</div>';\n-            }\n-\n-            if (groups.input.length > 0) {\n-                html += '<div class=\"node-group\">';\n                 html += '<div class=\"node-group-title\">输入节点配置</div>';\n-                groups.input.forEach(([key, value]) => {\n+                Object.entries(workflowConfig.inputNodes).forEach(([key, nodeId]) => {\n                     html += `<div class=\"config-item\">\n                         <span class=\"config-key\">${key}</span>\n-                        <span class=\"config-value\">${value}</span>\n+                        <span class=\"config-value\">${nodeId}</span>\n                     </div>`;\n                 });\n                 html += '</div>';\n             }\n \n-            if (groups.output.length > 0) {\n+            // 输出节点配置\n+            if (workflowConfig.outputNodes && workflowConfig.outputNodes.length > 0) {\n                 html += '<div class=\"node-group\">';\n                 html += '<div class=\"node-group-title\">输出节点配置</div>';\n-                groups.output.forEach(([key, value]) => {\n+                workflowConfig.outputNodes.forEach((node, index) => {\n                     html += `<div class=\"config-item\">\n-                        <span class=\"config-key\">${key}</span>\n-                        <span class=\"config-value\">${value}</span>\n+                        <span class=\"config-key\">${node.key} (优先级: ${node.order})</span>\n+                        <span class=\"config-value\">${node.nodeId}</span>\n                     </div>`;\n                 });\n                 html += '</div>';\n             }\n"
                },
                {
                    "date": 1752813244768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n             try {\n                 resultsEl.innerHTML = '<div class=\"status info\">正在测试工作流配置...</div>';\n \n                 // 测试获取配置\n-                const response = await fetch(`${API_BASE}/config`);\n+                const response = await fetch(`${API_BASE}/workflow-config/public`);\n                 const data = await response.json();\n \n                 if (!data.success) {\n                     throw new Error('无法获取配置');\n"
                }
            ],
            "date": 1752813183860,
            "name": "Commit-0",
            "content": "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>工作流配置测试</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n        .container {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            margin-bottom: 20px;\n        }\n        h1, h2 {\n            color: #333;\n        }\n        .config-section {\n            margin-bottom: 30px;\n        }\n        .config-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            margin-bottom: 10px;\n        }\n        .config-key {\n            font-weight: bold;\n            color: #666;\n        }\n        .config-value {\n            color: #333;\n            background: #f8f9fa;\n            padding: 4px 8px;\n            border-radius: 4px;\n            font-family: monospace;\n        }\n        .btn {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n            margin: 5px;\n        }\n        .btn:hover {\n            background: #0056b3;\n        }\n        .btn.success {\n            background: #28a745;\n        }\n        .btn.danger {\n            background: #dc3545;\n        }\n        .status {\n            padding: 10px;\n            border-radius: 4px;\n            margin: 10px 0;\n        }\n        .status.success {\n            background: #d4edda;\n            color: #155724;\n            border: 1px solid #c3e6cb;\n        }\n        .status.error {\n            background: #f8d7da;\n            color: #721c24;\n            border: 1px solid #f5c6cb;\n        }\n        .status.info {\n            background: #d1ecf1;\n            color: #0c5460;\n            border: 1px solid #bee5eb;\n        }\n        .workflow-section {\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            padding: 15px;\n            margin-bottom: 20px;\n        }\n        .workflow-title {\n            font-size: 18px;\n            font-weight: bold;\n            margin-bottom: 15px;\n            color: #495057;\n        }\n        .node-group {\n            margin-bottom: 15px;\n        }\n        .node-group-title {\n            font-weight: bold;\n            color: #6c757d;\n            margin-bottom: 8px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔧 工作流节点配置测试</h1>\n        <div id=\"status\" class=\"status info\">正在加载配置...</div>\n\n        <div class=\"config-section\">\n            <button class=\"btn\" onclick=\"loadConfig()\">🔄 重新加载配置</button>\n            <button class=\"btn success\" onclick=\"testWorkflowConfig()\">🧪 测试工作流配置</button>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <h2>📋 当前工作流配置</h2>\n        <div id=\"configDisplay\">\n            <div class=\"status info\">点击\"重新加载配置\"按钮获取最新配置</div>\n        </div>\n    </div>\n\n    <div class=\"container\">\n        <h2>🧪 配置测试结果</h2>\n        <div id=\"testResults\">\n            <div class=\"status info\">点击\"测试工作流配置\"按钮开始测试</div>\n        </div>\n    </div>\n\n    <script>\n        const API_BASE = 'http://localhost:3007/api';\n\n        async function loadConfig() {\n            const statusEl = document.getElementById('status');\n            const configEl = document.getElementById('configDisplay');\n\n            try {\n                statusEl.className = 'status info';\n                statusEl.textContent = '正在加载配置...';\n\n                const response = await fetch(`${API_BASE}/workflow-config/public`);\n                const data = await response.json();\n\n                if (data.success) {\n                    statusEl.className = 'status success';\n                    statusEl.textContent = '✅ 配置加载成功';\n                    displayConfig(data.data);\n                } else {\n                    throw new Error(data.message || '加载失败');\n                }\n            } catch (error) {\n                statusEl.className = 'status error';\n                statusEl.textContent = `❌ 加载配置失败: ${error.message}`;\n                configEl.innerHTML = '<div class=\"status error\">配置加载失败</div>';\n            }\n        }\n\n        function displayConfig(config) {\n            const configEl = document.getElementById('configDisplay');\n\n            // 过滤出工作流相关配置\n            const workflowConfigs = Object.entries(config).filter(([key]) =>\n                key.startsWith('workflow.')\n            );\n\n            if (workflowConfigs.length === 0) {\n                configEl.innerHTML = '<div class=\"status error\">未找到工作流配置</div>';\n                return;\n            }\n\n            // 按工作流类型分组\n            const faceswapConfigs = workflowConfigs.filter(([key]) => key.includes('faceswap'));\n            const undressConfigs = workflowConfigs.filter(([key]) => key.includes('undress'));\n\n            let html = '';\n\n            // 换脸工作流配置\n            if (faceswapConfigs.length > 0) {\n                html += '<div class=\"workflow-section\">';\n                html += '<div class=\"workflow-title\">🔄 换脸工作流配置</div>';\n                html += renderConfigGroup(faceswapConfigs);\n                html += '</div>';\n            }\n\n            // 一键褪衣工作流配置\n            if (undressConfigs.length > 0) {\n                html += '<div class=\"workflow-section\">';\n                html += '<div class=\"workflow-title\">👗 一键褪衣工作流配置</div>';\n                html += renderConfigGroup(undressConfigs);\n                html += '</div>';\n            }\n\n            configEl.innerHTML = html;\n        }\n\n        function renderConfigGroup(configs) {\n            let html = '';\n\n            // 按类型分组\n            const groups = {\n                basic: configs.filter(([key]) => !key.includes('input_nodes') && !key.includes('output_nodes')),\n                input: configs.filter(([key]) => key.includes('input_nodes')),\n                output: configs.filter(([key]) => key.includes('output_nodes'))\n            };\n\n            if (groups.basic.length > 0) {\n                html += '<div class=\"node-group\">';\n                html += '<div class=\"node-group-title\">基础配置</div>';\n                groups.basic.forEach(([key, value]) => {\n                    html += `<div class=\"config-item\">\n                        <span class=\"config-key\">${key}</span>\n                        <span class=\"config-value\">${value}</span>\n                    </div>`;\n                });\n                html += '</div>';\n            }\n\n            if (groups.input.length > 0) {\n                html += '<div class=\"node-group\">';\n                html += '<div class=\"node-group-title\">输入节点配置</div>';\n                groups.input.forEach(([key, value]) => {\n                    html += `<div class=\"config-item\">\n                        <span class=\"config-key\">${key}</span>\n                        <span class=\"config-value\">${value}</span>\n                    </div>`;\n                });\n                html += '</div>';\n            }\n\n            if (groups.output.length > 0) {\n                html += '<div class=\"node-group\">';\n                html += '<div class=\"node-group-title\">输出节点配置</div>';\n                groups.output.forEach(([key, value]) => {\n                    html += `<div class=\"config-item\">\n                        <span class=\"config-key\">${key}</span>\n                        <span class=\"config-value\">${value}</span>\n                    </div>`;\n                });\n                html += '</div>';\n            }\n\n            return html;\n        }\n\n        async function testWorkflowConfig() {\n            const resultsEl = document.getElementById('testResults');\n\n            try {\n                resultsEl.innerHTML = '<div class=\"status info\">正在测试工作流配置...</div>';\n\n                // 测试获取配置\n                const response = await fetch(`${API_BASE}/config`);\n                const data = await response.json();\n\n                if (!data.success) {\n                    throw new Error('无法获取配置');\n                }\n\n                const config = data.data;\n                let testResults = [];\n\n                // 测试换脸工作流配置\n                testResults.push(testFaceswapConfig(config));\n\n                // 测试一键褪衣工作流配置\n                testResults.push(testUndressConfig(config));\n\n                // 显示测试结果\n                displayTestResults(testResults);\n\n            } catch (error) {\n                resultsEl.innerHTML = `<div class=\"status error\">❌ 测试失败: ${error.message}</div>`;\n            }\n        }\n\n        function testFaceswapConfig(config) {\n            const result = {\n                name: '换脸工作流配置',\n                tests: []\n            };\n\n            // 测试基础配置\n            result.tests.push({\n                name: '基础配置检查',\n                passed: config['workflow.faceswap.enabled'] !== undefined &&\n                       config['workflow.faceswap.name'] !== undefined,\n                message: config['workflow.faceswap.enabled'] ? '工作流已启用' : '工作流已禁用'\n            });\n\n            // 测试输入节点配置\n            const inputNodes = [\n                'workflow.faceswap.input_nodes.face_photo_1',\n                'workflow.faceswap.input_nodes.face_photo_2',\n                'workflow.faceswap.input_nodes.face_photo_3',\n                'workflow.faceswap.input_nodes.face_photo_4',\n                'workflow.faceswap.input_nodes.target_image'\n            ];\n\n            const missingInputs = inputNodes.filter(key => !config[key]);\n            result.tests.push({\n                name: '输入节点配置检查',\n                passed: missingInputs.length === 0,\n                message: missingInputs.length === 0 ?\n                    '所有输入节点配置完整' :\n                    `缺少配置: ${missingInputs.join(', ')}`\n            });\n\n            // 测试输出节点配置\n            const outputNodes = [\n                'workflow.faceswap.output_nodes.primary',\n                'workflow.faceswap.output_nodes.secondary'\n            ];\n\n            const missingOutputs = outputNodes.filter(key => !config[key]);\n            result.tests.push({\n                name: '输出节点配置检查',\n                passed: missingOutputs.length === 0,\n                message: missingOutputs.length === 0 ?\n                    '所有输出节点配置完整' :\n                    `缺少配置: ${missingOutputs.join(', ')}`\n            });\n\n            return result;\n        }\n\n        function testUndressConfig(config) {\n            const result = {\n                name: '一键褪衣工作流配置',\n                tests: []\n            };\n\n            // 测试基础配置\n            result.tests.push({\n                name: '基础配置检查',\n                passed: config['workflow.undress.enabled'] !== undefined &&\n                       config['workflow.undress.name'] !== undefined,\n                message: config['workflow.undress.enabled'] ? '工作流已启用' : '工作流已禁用'\n            });\n\n            // 测试输入节点配置\n            const inputNodes = [\n                'workflow.undress.input_nodes.main_image',\n                'workflow.undress.input_nodes.seed_node'\n            ];\n\n            const missingInputs = inputNodes.filter(key => !config[key]);\n            result.tests.push({\n                name: '输入节点配置检查',\n                passed: missingInputs.length === 0,\n                message: missingInputs.length === 0 ?\n                    '所有输入节点配置完整' :\n                    `缺少配置: ${missingInputs.join(', ')}`\n            });\n\n            // 测试输出节点配置\n            const outputNodes = [\n                'workflow.undress.output_nodes.primary',\n                'workflow.undress.output_nodes.secondary'\n            ];\n\n            const missingOutputs = outputNodes.filter(key => !config[key]);\n            result.tests.push({\n                name: '输出节点配置检查',\n                passed: missingOutputs.length === 0,\n                message: missingOutputs.length === 0 ?\n                    '所有输出节点配置完整' :\n                    `缺少配置: ${missingOutputs.join(', ')}`\n            });\n\n            return result;\n        }\n\n        function displayTestResults(results) {\n            const resultsEl = document.getElementById('testResults');\n\n            let html = '';\n            let allPassed = true;\n\n            results.forEach(result => {\n                const sectionPassed = result.tests.every(test => test.passed);\n                allPassed = allPassed && sectionPassed;\n\n                html += `<div class=\"workflow-section\">`;\n                html += `<div class=\"workflow-title\">${result.name} ${sectionPassed ? '✅' : '❌'}</div>`;\n\n                result.tests.forEach(test => {\n                    html += `<div class=\"config-item\">\n                        <span class=\"config-key\">${test.name}</span>\n                        <span class=\"config-value ${test.passed ? 'success' : 'error'}\">\n                            ${test.passed ? '✅' : '❌'} ${test.message}\n                        </span>\n                    </div>`;\n                });\n\n                html += '</div>';\n            });\n\n            const summaryClass = allPassed ? 'success' : 'error';\n            const summaryText = allPassed ? '✅ 所有测试通过' : '❌ 部分测试失败';\n\n            resultsEl.innerHTML = `\n                <div class=\"status ${summaryClass}\">${summaryText}</div>\n                ${html}\n            `;\n        }\n\n        // 页面加载时自动加载配置\n        window.addEventListener('load', loadConfig);\n    </script>\n</body>\n</html>\n"
        }
    ]
}