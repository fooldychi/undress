{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1752329615202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752407837246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,21 +81,46 @@\n ```\n \n ### 启动项目\n \n+#### 🎯 推荐方式：使用端口管理工具 (新)\n ```bash\n-# 启动后端服务 (端口: 3006)\n+# Windows\n+start-managed.bat\n+\n+# Linux/Mac\n+./start-managed.sh\n+\n+# 或直接使用 Node.js\n+node start-managed.js\n+```\n+\n+#### 📋 传统方式：手动启动\n+```bash\n+# 启动后端服务 (端口: 3007)\n cd server\n npm start\n \n # 启动前端开发服务器 (端口: 3001)\n cd client\n npm run dev\n+\n+# 启动后台管理系统 (端口: 3003)\n+cd admin\n+npm run dev\n ```\n \n+#### ⚡ 端口管理工具优势\n+- ✅ 自动检测端口冲突并处理\n+- ✅ 强制使用指定端口 (3001/3003/3007)\n+- ✅ 统一启动管理，避免配置混乱\n+- ✅ 自动终止冲突进程\n+- ✅ 详细的启动日志和错误处理\n+\n ### 访问应用\n-- 前端应用: http://localhost:3001\n-- 后端API: http://localhost:3006\n+- 客户端前端: http://localhost:3001\n+- 后台管理系统: http://localhost:3003\n+- 后端API: http://localhost:3007\n \n ## 📖 文档\n \n ### 前端开发\n"
                },
                {
                    "date": 1752407874028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,8 +120,35 @@\n - 客户端前端: http://localhost:3001\n - 后台管理系统: http://localhost:3003\n - 后端API: http://localhost:3007\n \n+## 🔧 端口管理工具\n+\n+项目包含统一的端口管理工具，确保端口配置正确，避免冲突：\n+\n+### 端口配置\n+- **客户端前端**: 3001\n+- **后台管理系统**: 3003\n+- **后端API服务**: 3007\n+\n+### 端口管理命令\n+```bash\n+# 检查端口状态\n+node scripts/port-manager.js status\n+\n+# 验证并处理端口冲突\n+node scripts/port-manager.js validate\n+\n+# 启动单个服务\n+node scripts/port-manager.js start server\n+node scripts/port-manager.js start client\n+node scripts/port-manager.js start admin\n+```\n+\n+### 配置文件\n+- `port-config.json` - 统一端口配置\n+- `PORT_MANAGER_GUIDE.md` - 详细使用指南\n+\n ## 📖 文档\n \n ### 前端开发\n - [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\n"
                },
                {
                    "date": 1752408426935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,22 @@\n \n ### 配置文件\n - `port-config.json` - 统一端口配置\n - `PORT_MANAGER_GUIDE.md` - 详细使用指南\n+- `PORT_PROTECTION_GUIDE.md` - 端口配置保护指南\n \n+### 🛡️ 配置保护机制\n+```bash\n+# 检查端口配置完整性和硬编码问题\n+node scripts/protect-port-config.js check\n+\n+# 同步所有配置文件\n+node scripts/sync-port-config.js sync\n+\n+# 安装Git钩子保护\n+node scripts/install-git-hooks.js install\n+```\n+\n ## 📖 文档\n \n ### 前端开发\n - [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\n"
                },
                {
                    "date": 1752840160546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,10 @@\n ```\n \n ### 启动项目\n \n-#### 🎯 推荐方式：使用端口管理工具 (新)\n+#### 🎯 前后端分离启动 (推荐)\n ```bash\n-# Windows\n-start-managed.bat\n-\n-# Linux/Mac\n-./start-managed.sh\n-\n-# 或直接使用 Node.js\n-node start-managed.js\n-```\n-\n-#### 📋 传统方式：手动启动\n-```bash\n # 启动后端服务 (端口: 3007)\n cd server\n npm start\n \n@@ -108,14 +96,13 @@\n cd admin\n npm run dev\n ```\n \n-#### ⚡ 端口管理工具优势\n-- ✅ 自动检测端口冲突并处理\n-- ✅ 强制使用指定端口 (3001/3003/3007)\n-- ✅ 统一启动管理，避免配置混乱\n-- ✅ 自动终止冲突进程\n-- ✅ 详细的启动日志和错误处理\n+#### 📋 生产环境部署\n+各服务应独立部署：\n+- **后端API**: 部署在服务器或容器中，提供API服务\n+- **前端客户端**: 构建静态文件，部署到CDN或静态服务器\n+- **后台管理**: 构建静态文件，部署到内网或受保护的环境\n \n ### 访问应用\n - 客户端前端: http://localhost:3001\n - 后台管理系统: http://localhost:3003\n"
                },
                {
                    "date": 1752840176113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,13 +107,11 @@\n - 客户端前端: http://localhost:3001\n - 后台管理系统: http://localhost:3003\n - 后端API: http://localhost:3007\n \n-## 🔧 端口管理工具\n+## 🔧 端口配置\n \n-项目包含统一的端口管理工具，确保端口配置正确，避免冲突：\n-\n-### 端口配置\n+### 默认端口分配\n - **客户端前端**: 3001\n - **后台管理系统**: 3003\n - **后端API服务**: 3007\n \n"
                },
                {
                    "date": 1752974130925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,35 @@\n - 💎 **积分系统** - 积分管理和消费记录\n - 🎫 **等级卡系统** - 多种等级卡管理\n - 📊 **管理后台** - 完整的后台管理功能\n \n+## 🌐 端口配置\n+\n+| 服务 | 端口 | 描述 | 访问地址 |\n+|------|------|------|----------|\n+| 客户端前端 | 3001 | 用户前端界面 | http://localhost:3001 |\n+| 后台管理系统 | 3003 | 管理员界面 | http://localhost:3003 |\n+| 后端API服务 | 3007 | 服务器API | http://localhost:3007 |\n+\n+### 端口管理工具\n+```bash\n+# 检查端口配置一致性\n+node scripts/port-config-manager.js check\n+\n+# 自动修复端口配置问题\n+node scripts/port-config-manager.js fix\n+\n+# 查看端口使用情况\n+node scripts/port-config-manager.js availability\n+```\n+\n+⚠️ **重要**: 端口配置由 `port-config.json` 统一管理，请勿随意修改。详见 [PORT_CONFIG_RULES.md](PORT_CONFIG_RULES.md)\n+\n ## 📁 项目结构\n \n ```\n-icomfy/\n-├── client/                 # 前端项目\n+AIMagic/\n+├── client/                 # 前端项目 (端口: 3001)\n │   ├── src/\n │   │   ├── components/     # Vue组件\n │   │   ├── views/         # 页面组件\n │   │   ├── router/        # 路由配置\n@@ -40,15 +62,25 @@\n │   │   ├── utils/         # 工具函数\n │   │   └── styles/        # 样式文件\n │   ├── docs/              # 前端文档\n │   └── public/            # 静态资源\n-├── server/                # 后端项目\n+├── admin/                 # 管理后台 (端口: 3003)\n │   ├── src/\n+│   │   ├── components/    # 管理组件\n+│   │   ├── views/         # 管理页面\n+│   │   └── utils/         # 工具函数\n+├── server/                # 后端项目 (端口: 3007)\n+│   ├── src/\n │   │   ├── routes/        # API路由\n │   │   ├── middleware/    # 中间件\n │   │   ├── scripts/       # 数据库脚本\n │   │   └── utils/         # 工具函数\n │   └── scripts/           # 部署脚本\n+├── scripts/               # 项目管理脚本\n+│   ├── port-config-manager.js    # 端口配置管理\n+│   └── setup-port-management.js  # 端口管理安装\n+├── port-config.json       # 端口配置文件\n+└── PORT_CONFIG_RULES.md   # 端口配置规则\n └── docs/                  # 项目文档\n ```\n \n ## 🛠️ 快速开始\n"
                },
                {
                    "date": 1753545504498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,250 +1,250 @@\n-# AI Magic - AI图像处理平台\n-\n-一个基于Vue3和Node.js的现代化AI图像处理平台，提供换脸、换装等多种AI图像处理服务。\n-\n-## 🚀 项目特色\n-\n-### 前端技术栈\n-- **Vue 3** + **Composition API** - 现代化前端框架\n-- **Vite** - 快速构建工具\n-- **Vant UI** - 移动端组件库\n-- **Vue Router** - 路由管理\n-- **响应式设计** - 完美适配移动端和桌面端\n-\n-### 后端技术栈\n-- **Node.js** + **Express** - 服务端框架\n-- **MySQL** - 数据库\n-- **JWT** - 用户认证\n-- **Multer** - 文件上传\n-- **Rate Limiting** - 接口限流\n-\n-### 核心功能\n-- 🎭 **AI换脸** - 高质量人脸替换\n-- 👗 **AI换装** - 智能服装替换\n-- 🎨 **文本生图** - AI图像生成\n-- 👤 **用户系统** - 注册、登录、个人中心\n-- 💎 **积分系统** - 积分管理和消费记录\n-- 🎫 **等级卡系统** - 多种等级卡管理\n-- 📊 **管理后台** - 完整的后台管理功能\n-\n-## 🌐 端口配置\n-\n-| 服务 | 端口 | 描述 | 访问地址 |\n-|------|------|------|----------|\n-| 客户端前端 | 3001 | 用户前端界面 | http://localhost:3001 |\n-| 后台管理系统 | 3003 | 管理员界面 | http://localhost:3003 |\n-| 后端API服务 | 3007 | 服务器API | http://localhost:3007 |\n-\n-### 端口管理工具\n-```bash\n-# 检查端口配置一致性\n-node scripts/port-config-manager.js check\n-\n-# 自动修复端口配置问题\n-node scripts/port-config-manager.js fix\n-\n-# 查看端口使用情况\n-node scripts/port-config-manager.js availability\n-```\n-\n-⚠️ **重要**: 端口配置由 `port-config.json` 统一管理，请勿随意修改。详见 [PORT_CONFIG_RULES.md](PORT_CONFIG_RULES.md)\n-\n-## 📁 项目结构\n-\n-```\n-AIMagic/\n-├── client/                 # 前端项目 (端口: 3001)\n-│   ├── src/\n-│   │   ├── components/     # Vue组件\n-│   │   ├── views/         # 页面组件\n-│   │   ├── router/        # 路由配置\n-│   │   ├── services/      # API服务\n-│   │   ├── utils/         # 工具函数\n-│   │   └── styles/        # 样式文件\n-│   ├── docs/              # 前端文档\n-│   └── public/            # 静态资源\n-├── admin/                 # 管理后台 (端口: 3003)\n-│   ├── src/\n-│   │   ├── components/    # 管理组件\n-│   │   ├── views/         # 管理页面\n-│   │   └── utils/         # 工具函数\n-├── server/                # 后端项目 (端口: 3007)\n-│   ├── src/\n-│   │   ├── routes/        # API路由\n-│   │   ├── middleware/    # 中间件\n-│   │   ├── scripts/       # 数据库脚本\n-│   │   └── utils/         # 工具函数\n-│   └── scripts/           # 部署脚本\n-├── scripts/               # 项目管理脚本\n-│   ├── port-config-manager.js    # 端口配置管理\n-│   └── setup-port-management.js  # 端口管理安装\n-├── port-config.json       # 端口配置文件\n-└── PORT_CONFIG_RULES.md   # 端口配置规则\n-└── docs/                  # 项目文档\n-```\n-\n-## 🛠️ 快速开始\n-\n-### 环境要求\n-- Node.js >= 16.0.0\n-- MySQL >= 8.0\n-- npm 或 yarn\n-\n-### 安装依赖\n-\n-```bash\n-# 安装前端依赖\n-cd client\n-npm install\n-\n-# 安装后端依赖\n-cd ../server\n-npm install\n-```\n-\n-### 配置环境变量\n-\n-```bash\n-# 复制环境变量模板\n-cp server/.env.example server/.env\n-\n-# 编辑环境变量\n-# 配置数据库连接、JWT密钥等\n-```\n-\n-### 启动项目\n-\n-#### 🎯 前后端分离启动 (推荐)\n-```bash\n-# 启动后端服务 (端口: 3007)\n-cd server\n-npm start\n-\n-# 启动前端开发服务器 (端口: 3001)\n-cd client\n-npm run dev\n-\n-# 启动后台管理系统 (端口: 3003)\n-cd admin\n-npm run dev\n-```\n-\n-#### 📋 生产环境部署\n-各服务应独立部署：\n-- **后端API**: 部署在服务器或容器中，提供API服务\n-- **前端客户端**: 构建静态文件，部署到CDN或静态服务器\n-- **后台管理**: 构建静态文件，部署到内网或受保护的环境\n-\n-### 访问应用\n-- 客户端前端: http://localhost:3001\n-- 后台管理系统: http://localhost:3003\n-- 后端API: http://localhost:3007\n-\n-## 🔧 端口配置\n-\n-### 默认端口分配\n-- **客户端前端**: 3001\n-- **后台管理系统**: 3003\n-- **后端API服务**: 3007\n-\n-### 端口管理命令\n-```bash\n-# 检查端口状态\n-node scripts/port-manager.js status\n-\n-# 验证并处理端口冲突\n-node scripts/port-manager.js validate\n-\n-# 启动单个服务\n-node scripts/port-manager.js start server\n-node scripts/port-manager.js start client\n-node scripts/port-manager.js start admin\n-```\n-\n-### 配置文件\n-- `port-config.json` - 统一端口配置\n-- `PORT_MANAGER_GUIDE.md` - 详细使用指南\n-- `PORT_PROTECTION_GUIDE.md` - 端口配置保护指南\n-\n-### 🛡️ 配置保护机制\n-```bash\n-# 检查端口配置完整性和硬编码问题\n-node scripts/protect-port-config.js check\n-\n-# 同步所有配置文件\n-node scripts/sync-port-config.js sync\n-\n-# 安装Git钩子保护\n-node scripts/install-git-hooks.js install\n-```\n-\n-## 📖 文档\n-\n-### 前端开发\n-- [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\n-- [项目概览](./client/docs/PROJECT_OVERVIEW.md)\n-- [部署指南](./client/docs/DEPLOYMENT_GUIDE.md)\n-\n-### API文档\n-- 用户认证: `/api/auth/*`\n-- 用户管理: `/api/user/*`\n-- 积分系统: `/api/points/*`\n-- 等级卡管理: `/api/level-cards/*`\n-- 图像处理: `/api/image/*`\n-\n-## 🎨 UI设计规范\n-\n-### 图标使用规范\n-| 功能类别 | 图标 | 使用场景 | 对应内容 |\n-|---------|------|----------|----------|\n-| 积分相关 | `diamond-o` | 积分显示、积分卡片 | 我的积分、积分信息 |\n-| 等级卡相关 | `credit-pay` | 等级卡列表、标题 | 我的等级卡、等级卡管理 |\n-| 用户相关 | `user-o` | 用户头像、个人中心 | 用户信息、个人中心 |\n-| 记录相关 | `records` | 积分记录、操作历史 | 最近记录、积分记录 |\n-\n-### 布局原则\n-- **整行布局**: 重要信息卡片占据整行\n-- **统一布局**: 等级卡与最近记录使用相同布局风格\n-- **响应式设计**: 完美适配各种屏幕尺寸\n-\n-## 🚀 部署\n-\n-### 生产环境部署\n-```bash\n-# 构建前端\n-cd client\n-npm run build\n-\n-# 启动生产服务器\n-cd ../server\n-NODE_ENV=production npm start\n-```\n-\n-### Docker部署\n-```bash\n-# 构建镜像\n-docker build -t icomfy .\n-\n-# 运行容器\n-docker run -p 3006:3006 icomfy\n-```\n-\n-## 🤝 贡献\n-\n-欢迎提交Issue和Pull Request来改进项目。\n-\n-## 📄 许可证\n-\n-本项目采用 MIT 许可证。\n-\n-## 🔗 相关链接\n-\n-- [Gitee仓库](https://gitee.com/fooldy/icomfy)\n-- [Vue.js官网](https://vuejs.org/)\n-- [Vant UI文档](https://vant-contrib.gitee.io/vant/)\n-- [Express.js官网](https://expressjs.com/)\n-\n----\n-\n-**AI Magic** - 让AI图像处理更简单 ✨\n-\n+# AI Magic - AI图像处理平台\r\n+\r\n+一个基于Vue3和Node.js的现代化AI图像处理平台，提供换脸、换装等多种AI图像处理服务。\r\n+\r\n+## 🚀 项目特色\r\n+\r\n+### 前端技术栈\r\n+- **Vue 3** + **Composition API** - 现代化前端框架\r\n+- **Vite** - 快速构建工具\r\n+- **Vant UI** - 移动端组件库\r\n+- **Vue Router** - 路由管理\r\n+- **响应式设计** - 完美适配移动端和桌面端\r\n+\r\n+### 后端技术栈\r\n+- **Node.js** + **Express** - 服务端框架\r\n+- **MySQL** - 数据库\r\n+- **JWT** - 用户认证\r\n+- **Multer** - 文件上传\r\n+- **Rate Limiting** - 接口限流\r\n+\r\n+### 核心功能\r\n+- 🎭 **AI换脸** - 高质量人脸替换\r\n+- 👗 **AI换装** - 智能服装替换\r\n+- 🎨 **文本生图** - AI图像生成\r\n+- 👤 **用户系统** - 注册、登录、个人中心\r\n+- 💎 **积分系统** - 积分管理和消费记录\r\n+- 🎫 **等级卡系统** - 多种等级卡管理\r\n+- 📊 **管理后台** - 完整的后台管理功能\r\n+\r\n+## 🌐 端口配置\r\n+\r\n+| 服务 | 端口 | 描述 | 访问地址 |\r\n+|------|------|------|----------|\r\n+| 客户端前端 | 3001 | 用户前端界面 | http://localhost:3001 |\r\n+| 后台管理系统 | 3003 | 管理员界面 | http://localhost:3003 |\r\n+| 后端API服务 | 3007 | 服务器API | http://localhost:3007 |\r\n+\r\n+### 端口管理工具\r\n+```bash\r\n+# 检查端口配置一致性\r\n+node scripts/port-config-manager.js check\r\n+\r\n+# 自动修复端口配置问题\r\n+node scripts/port-config-manager.js fix\r\n+\r\n+# 查看端口使用情况\r\n+node scripts/port-config-manager.js availability\r\n+```\r\n+\r\n+⚠️ **重要**: 端口配置由 `port-config.json` 统一管理，请勿随意修改。详见 [端口管理指南](./docs/port-management/PORT_MANAGER_GUIDE.md)\r\n+\r\n+## 📁 项目结构\r\n+\r\n+```\r\n+AIMagic/\r\n+├── client/                 # 前端项目 (端口: 3001)\r\n+│   ├── src/\r\n+│   │   ├── components/     # Vue组件\r\n+│   │   ├── views/         # 页面组件\r\n+│   │   ├── router/        # 路由配置\r\n+│   │   ├── services/      # API服务\r\n+│   │   ├── utils/         # 工具函数\r\n+│   │   └── styles/        # 样式文件\r\n+│   ├── docs/              # 前端文档\r\n+│   └── public/            # 静态资源\r\n+├── admin/                 # 管理后台 (端口: 3003)\r\n+│   ├── src/\r\n+│   │   ├── components/    # 管理组件\r\n+│   │   ├── views/         # 管理页面\r\n+│   │   └── utils/         # 工具函数\r\n+├── server/                # 后端项目 (端口: 3007)\r\n+│   ├── src/\r\n+│   │   ├── routes/        # API路由\r\n+│   │   ├── middleware/    # 中间件\r\n+│   │   ├── scripts/       # 数据库脚本\r\n+│   │   └── utils/         # 工具函数\r\n+│   └── scripts/           # 部署脚本\r\n+├── scripts/               # 项目管理脚本\r\n+│   ├── port-config-manager.js    # 端口配置管理\r\n+│   └── setup-port-management.js  # 端口管理安装\r\n+├── port-config.json       # 端口配置文件\r\n+└── PORT_CONFIG_RULES.md   # 端口配置规则\r\n+└── docs/                  # 项目文档\r\n+```\r\n+\r\n+## 🛠️ 快速开始\r\n+\r\n+### 环境要求\r\n+- Node.js >= 16.0.0\r\n+- MySQL >= 8.0\r\n+- npm 或 yarn\r\n+\r\n+### 安装依赖\r\n+\r\n+```bash\r\n+# 安装前端依赖\r\n+cd client\r\n+npm install\r\n+\r\n+# 安装后端依赖\r\n+cd ../server\r\n+npm install\r\n+```\r\n+\r\n+### 配置环境变量\r\n+\r\n+```bash\r\n+# 复制环境变量模板\r\n+cp server/.env.example server/.env\r\n+\r\n+# 编辑环境变量\r\n+# 配置数据库连接、JWT密钥等\r\n+```\r\n+\r\n+### 启动项目\r\n+\r\n+#### 🎯 前后端分离启动 (推荐)\r\n+```bash\r\n+# 启动后端服务 (端口: 3007)\r\n+cd server\r\n+npm start\r\n+\r\n+# 启动前端开发服务器 (端口: 3001)\r\n+cd client\r\n+npm run dev\r\n+\r\n+# 启动后台管理系统 (端口: 3003)\r\n+cd admin\r\n+npm run dev\r\n+```\r\n+\r\n+#### 📋 生产环境部署\r\n+各服务应独立部署：\r\n+- **后端API**: 部署在服务器或容器中，提供API服务\r\n+- **前端客户端**: 构建静态文件，部署到CDN或静态服务器\r\n+- **后台管理**: 构建静态文件，部署到内网或受保护的环境\r\n+\r\n+### 访问应用\r\n+- 客户端前端: http://localhost:3001\r\n+- 后台管理系统: http://localhost:3003\r\n+- 后端API: http://localhost:3007\r\n+\r\n+## 🔧 端口配置\r\n+\r\n+### 默认端口分配\r\n+- **客户端前端**: 3001\r\n+- **后台管理系统**: 3003\r\n+- **后端API服务**: 3007\r\n+\r\n+### 端口管理命令\r\n+```bash\r\n+# 检查端口状态\r\n+node scripts/port-manager.js status\r\n+\r\n+# 验证并处理端口冲突\r\n+node scripts/port-manager.js validate\r\n+\r\n+# 启动单个服务\r\n+node scripts/port-manager.js start server\r\n+node scripts/port-manager.js start client\r\n+node scripts/port-manager.js start admin\r\n+```\r\n+\r\n+### 配置文件\r\n+- `port-config.json` - 统一端口配置\r\n+- `PORT_MANAGER_GUIDE.md` - 详细使用指南\r\n+- `PORT_PROTECTION_GUIDE.md` - 端口配置保护指南\r\n+\r\n+### 🛡️ 配置保护机制\r\n+```bash\r\n+# 检查端口配置完整性和硬编码问题\r\n+node scripts/protect-port-config.js check\r\n+\r\n+# 同步所有配置文件\r\n+node scripts/sync-port-config.js sync\r\n+\r\n+# 安装Git钩子保护\r\n+node scripts/install-git-hooks.js install\r\n+```\r\n+\r\n+## 📖 文档\r\n+\r\n+### 前端开发\r\n+- [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n+- [项目概览](./client/docs/PROJECT_OVERVIEW.md)\r\n+- [部署指南](./client/docs/DEPLOYMENT_GUIDE.md)\r\n+\r\n+### API文档\r\n+- 用户认证: `/api/auth/*`\r\n+- 用户管理: `/api/user/*`\r\n+- 积分系统: `/api/points/*`\r\n+- 等级卡管理: `/api/level-cards/*`\r\n+- 图像处理: `/api/image/*`\r\n+\r\n+## 🎨 UI设计规范\r\n+\r\n+### 图标使用规范\r\n+| 功能类别 | 图标 | 使用场景 | 对应内容 |\r\n+|---------|------|----------|----------|\r\n+| 积分相关 | `diamond-o` | 积分显示、积分卡片 | 我的积分、积分信息 |\r\n+| 等级卡相关 | `credit-pay` | 等级卡列表、标题 | 我的等级卡、等级卡管理 |\r\n+| 用户相关 | `user-o` | 用户头像、个人中心 | 用户信息、个人中心 |\r\n+| 记录相关 | `records` | 积分记录、操作历史 | 最近记录、积分记录 |\r\n+\r\n+### 布局原则\r\n+- **整行布局**: 重要信息卡片占据整行\r\n+- **统一布局**: 等级卡与最近记录使用相同布局风格\r\n+- **响应式设计**: 完美适配各种屏幕尺寸\r\n+\r\n+## 🚀 部署\r\n+\r\n+### 生产环境部署\r\n+```bash\r\n+# 构建前端\r\n+cd client\r\n+npm run build\r\n+\r\n+# 启动生产服务器\r\n+cd ../server\r\n+NODE_ENV=production npm start\r\n+```\r\n+\r\n+### Docker部署\r\n+```bash\r\n+# 构建镜像\r\n+docker build -t icomfy .\r\n+\r\n+# 运行容器\r\n+docker run -p 3006:3006 icomfy\r\n+```\r\n+\r\n+## 🤝 贡献\r\n+\r\n+欢迎提交Issue和Pull Request来改进项目。\r\n+\r\n+## 📄 许可证\r\n+\r\n+本项目采用 MIT 许可证。\r\n+\r\n+## 🔗 相关链接\r\n+\r\n+- [Gitee仓库](https://gitee.com/fooldy/icomfy)\r\n+- [Vue.js官网](https://vuejs.org/)\r\n+- [Vant UI文档](https://vant-contrib.gitee.io/vant/)\r\n+- [Express.js官网](https://expressjs.com/)\r\n+\r\n+---\r\n+\r\n+**AI Magic** - 让AI图像处理更简单 ✨\r\n+\r\n"
                },
                {
                    "date": 1753545518159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,10 +78,11 @@\n ├── scripts/               # 项目管理脚本\r\n │   ├── port-config-manager.js    # 端口配置管理\r\n │   └── setup-port-management.js  # 端口管理安装\r\n ├── port-config.json       # 端口配置文件\r\n-└── PORT_CONFIG_RULES.md   # 端口配置规则\r\n └── docs/                  # 项目文档\r\n+    ├── port-management/   # 端口管理文档\r\n+    └── README.md          # 文档索引\r\n ```\r\n \r\n ## 🛠️ 快速开始\r\n \r\n"
                },
                {
                    "date": 1753545529756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,10 +163,10 @@\n ```\r\n \r\n ### 配置文件\r\n - `port-config.json` - 统一端口配置\r\n-- `PORT_MANAGER_GUIDE.md` - 详细使用指南\r\n-- `PORT_PROTECTION_GUIDE.md` - 端口配置保护指南\r\n+- [端口管理指南](./docs/port-management/PORT_MANAGER_GUIDE.md) - 详细使用指南\r\n+- [端口保护指南](./docs/port-management/PORT_PROTECTION_GUIDE.md) - 端口配置保护指南\r\n \r\n ### 🛡️ 配置保护机制\r\n ```bash\r\n # 检查端口配置完整性和硬编码问题\r\n"
                },
                {
                    "date": 1753545542154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,15 @@\n ### 前端开发\r\n - [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n - [项目概览](./client/docs/PROJECT_OVERVIEW.md)\r\n - [部署指南](./client/docs/DEPLOYMENT_GUIDE.md)\r\n+- [SVG图标迁移指南](./client/docs/SVG_ICONS_MIGRATION.md)\r\n+- [统一组件指南](./client/docs/UNIFIED_COMPONENTS_GUIDE.md)\r\n \r\n+### 系统架构\r\n+- [项目文档总览](./docs/README.md)\r\n+- [端口管理系统](./docs/port-management/README.md)\r\n+\r\n ### API文档\r\n - 用户认证: `/api/auth/*`\r\n - 用户管理: `/api/user/*`\r\n - 积分系统: `/api/points/*`\r\n"
                },
                {
                    "date": 1753545564219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,22 +115,33 @@\n \r\n ### 启动项目\r\n \r\n #### 🎯 前后端分离启动 (推荐)\r\n+\r\n+⚠️ **重要**: 必须按顺序启动，先启动后端服务，再启动前端服务\r\n+\r\n ```bash\r\n-# 启动后端服务 (端口: 3007)\r\n+# 1️⃣ 首先启动后端服务 (端口: 3007)\r\n cd server\r\n+npm install  # 首次运行需要安装依赖\r\n npm start\r\n \r\n-# 启动前端开发服务器 (端口: 3001)\r\n+# 2️⃣ 启动前端开发服务器 (端口: 3001)\r\n cd client\r\n+npm install  # 首次运行需要安装依赖\r\n npm run dev\r\n \r\n-# 启动后台管理系统 (端口: 3003)\r\n+# 3️⃣ 启动后台管理系统 (端口: 3003)\r\n cd admin\r\n+npm install  # 首次运行需要安装依赖\r\n npm run dev\r\n ```\r\n \r\n+#### 🔐 默认登录信息\r\n+- **后台管理系统**: http://localhost:3003\r\n+  - 用户名: `admin`\r\n+  - 密码: `admin123456`\r\n+\r\n #### 📋 生产环境部署\r\n 各服务应独立部署：\r\n - **后端API**: 部署在服务器或容器中，提供API服务\r\n - **前端客户端**: 构建静态文件，部署到CDN或静态服务器\r\n"
                },
                {
                    "date": 1753545582772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,12 +147,45 @@\n - **前端客户端**: 构建静态文件，部署到CDN或静态服务器\r\n - **后台管理**: 构建静态文件，部署到内网或受保护的环境\r\n \r\n ### 访问应用\r\n-- 客户端前端: http://localhost:3001\r\n-- 后台管理系统: http://localhost:3003\r\n-- 后端API: http://localhost:3007\r\n+- **客户端前端**: http://localhost:3001 (用户界面)\r\n+- **后台管理系统**: http://localhost:3003 (管理员界面)\r\n+- **后端API**: http://localhost:3007 (API服务)\r\n \r\n+### 🛠️ 常见问题解决\r\n+\r\n+#### 端口被占用\r\n+```bash\r\n+# 查看端口占用\r\n+netstat -ano | findstr :3001  # Windows\r\n+lsof -i :3001                 # Linux/Mac\r\n+\r\n+# 终止占用进程\r\n+taskkill /PID <进程ID> /F      # Windows\r\n+kill -9 <进程ID>               # Linux/Mac\r\n+```\r\n+\r\n+#### 依赖安装失败\r\n+```bash\r\n+# 清除缓存重新安装\r\n+npm cache clean --force\r\n+rm -rf node_modules package-lock.json\r\n+npm install\r\n+```\r\n+\r\n+#### API连接失败\r\n+1. 确认后端服务已启动 (http://localhost:3007)\r\n+2. 检查防火墙设置\r\n+3. 检查代理配置是否正确\r\n+\r\n+#### 健康检查\r\n+```bash\r\n+# 检查服务状态\r\n+curl http://localhost:3007/health  # 后端API\r\n+# 浏览器访问前端和后台管理界面\r\n+```\r\n+\r\n ## 🔧 端口配置\r\n \r\n ### 默认端口分配\r\n - **客户端前端**: 3001\r\n"
                },
                {
                    "date": 1753545714689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,11 +225,13 @@\n \r\n ## 📖 文档\r\n \r\n ### 前端开发\r\n+- [前端文档中心](./client/docs/README.md) - 完整的前端开发文档索引\r\n - [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\r\n - [项目概览](./client/docs/PROJECT_OVERVIEW.md)\r\n - [部署指南](./client/docs/DEPLOYMENT_GUIDE.md)\r\n+- [SVG图标系统](./client/docs/SVG_ICON_SYSTEM.md)\r\n - [SVG图标迁移指南](./client/docs/SVG_ICONS_MIGRATION.md)\r\n - [统一组件指南](./client/docs/UNIFIED_COMPONENTS_GUIDE.md)\r\n \r\n ### 系统架构\r\n"
                },
                {
                    "date": 1753546610946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,10 +207,9 @@\n ```\r\n \r\n ### 配置文件\r\n - `port-config.json` - 统一端口配置\r\n-- [端口管理指南](./docs/port-management/PORT_MANAGER_GUIDE.md) - 详细使用指南\r\n-- [端口保护指南](./docs/port-management/PORT_PROTECTION_GUIDE.md) - 端口配置保护指南\r\n+- [端口管理指南](./scripts/PORT_MANAGER_GUIDE.md) - 详细使用指南\r\n \r\n ### 🛡️ 配置保护机制\r\n ```bash\r\n # 检查端口配置完整性和硬编码问题\r\n"
                },
                {
                    "date": 1753546623961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,10 +233,9 @@\n - [SVG图标迁移指南](./client/docs/SVG_ICONS_MIGRATION.md)\r\n - [统一组件指南](./client/docs/UNIFIED_COMPONENTS_GUIDE.md)\r\n \r\n ### 系统架构\r\n-- [项目文档总览](./docs/README.md)\r\n-- [端口管理系统](./docs/port-management/README.md)\r\n+- [端口管理系统](./scripts/PORT_MANAGER_GUIDE.md)\r\n \r\n ### API文档\r\n - 用户认证: `/api/auth/*`\r\n - 用户管理: `/api/user/*`\r\n"
                },
                {
                    "date": 1753546638560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n # 查看端口使用情况\r\n node scripts/port-config-manager.js availability\r\n ```\r\n \r\n-⚠️ **重要**: 端口配置由 `port-config.json` 统一管理，请勿随意修改。详见 [端口管理指南](./docs/port-management/PORT_MANAGER_GUIDE.md)\r\n+⚠️ **重要**: 端口配置由 `port-config.json` 统一管理，请勿随意修改。详见 [端口管理指南](./scripts/PORT_MANAGER_GUIDE.md)\r\n \r\n ## 📁 项目结构\r\n \r\n ```\r\n"
                }
            ],
            "date": 1752329615202,
            "name": "Commit-0",
            "content": "# AI Magic - AI图像处理平台\n\n一个基于Vue3和Node.js的现代化AI图像处理平台，提供换脸、换装等多种AI图像处理服务。\n\n## 🚀 项目特色\n\n### 前端技术栈\n- **Vue 3** + **Composition API** - 现代化前端框架\n- **Vite** - 快速构建工具\n- **Vant UI** - 移动端组件库\n- **Vue Router** - 路由管理\n- **响应式设计** - 完美适配移动端和桌面端\n\n### 后端技术栈\n- **Node.js** + **Express** - 服务端框架\n- **MySQL** - 数据库\n- **JWT** - 用户认证\n- **Multer** - 文件上传\n- **Rate Limiting** - 接口限流\n\n### 核心功能\n- 🎭 **AI换脸** - 高质量人脸替换\n- 👗 **AI换装** - 智能服装替换\n- 🎨 **文本生图** - AI图像生成\n- 👤 **用户系统** - 注册、登录、个人中心\n- 💎 **积分系统** - 积分管理和消费记录\n- 🎫 **等级卡系统** - 多种等级卡管理\n- 📊 **管理后台** - 完整的后台管理功能\n\n## 📁 项目结构\n\n```\nicomfy/\n├── client/                 # 前端项目\n│   ├── src/\n│   │   ├── components/     # Vue组件\n│   │   ├── views/         # 页面组件\n│   │   ├── router/        # 路由配置\n│   │   ├── services/      # API服务\n│   │   ├── utils/         # 工具函数\n│   │   └── styles/        # 样式文件\n│   ├── docs/              # 前端文档\n│   └── public/            # 静态资源\n├── server/                # 后端项目\n│   ├── src/\n│   │   ├── routes/        # API路由\n│   │   ├── middleware/    # 中间件\n│   │   ├── scripts/       # 数据库脚本\n│   │   └── utils/         # 工具函数\n│   └── scripts/           # 部署脚本\n└── docs/                  # 项目文档\n```\n\n## 🛠️ 快速开始\n\n### 环境要求\n- Node.js >= 16.0.0\n- MySQL >= 8.0\n- npm 或 yarn\n\n### 安装依赖\n\n```bash\n# 安装前端依赖\ncd client\nnpm install\n\n# 安装后端依赖\ncd ../server\nnpm install\n```\n\n### 配置环境变量\n\n```bash\n# 复制环境变量模板\ncp server/.env.example server/.env\n\n# 编辑环境变量\n# 配置数据库连接、JWT密钥等\n```\n\n### 启动项目\n\n```bash\n# 启动后端服务 (端口: 3006)\ncd server\nnpm start\n\n# 启动前端开发服务器 (端口: 3001)\ncd client\nnpm run dev\n```\n\n### 访问应用\n- 前端应用: http://localhost:3001\n- 后端API: http://localhost:3006\n\n## 📖 文档\n\n### 前端开发\n- [前端开发原则](./client/docs/FRONTEND_DEVELOPMENT_PRINCIPLES.md)\n- [项目概览](./client/docs/PROJECT_OVERVIEW.md)\n- [部署指南](./client/docs/DEPLOYMENT_GUIDE.md)\n\n### API文档\n- 用户认证: `/api/auth/*`\n- 用户管理: `/api/user/*`\n- 积分系统: `/api/points/*`\n- 等级卡管理: `/api/level-cards/*`\n- 图像处理: `/api/image/*`\n\n## 🎨 UI设计规范\n\n### 图标使用规范\n| 功能类别 | 图标 | 使用场景 | 对应内容 |\n|---------|------|----------|----------|\n| 积分相关 | `diamond-o` | 积分显示、积分卡片 | 我的积分、积分信息 |\n| 等级卡相关 | `credit-pay` | 等级卡列表、标题 | 我的等级卡、等级卡管理 |\n| 用户相关 | `user-o` | 用户头像、个人中心 | 用户信息、个人中心 |\n| 记录相关 | `records` | 积分记录、操作历史 | 最近记录、积分记录 |\n\n### 布局原则\n- **整行布局**: 重要信息卡片占据整行\n- **统一布局**: 等级卡与最近记录使用相同布局风格\n- **响应式设计**: 完美适配各种屏幕尺寸\n\n## 🚀 部署\n\n### 生产环境部署\n```bash\n# 构建前端\ncd client\nnpm run build\n\n# 启动生产服务器\ncd ../server\nNODE_ENV=production npm start\n```\n\n### Docker部署\n```bash\n# 构建镜像\ndocker build -t icomfy .\n\n# 运行容器\ndocker run -p 3006:3006 icomfy\n```\n\n## 🤝 贡献\n\n欢迎提交Issue和Pull Request来改进项目。\n\n## 📄 许可证\n\n本项目采用 MIT 许可证。\n\n## 🔗 相关链接\n\n- [Gitee仓库](https://gitee.com/fooldy/icomfy)\n- [Vue.js官网](https://vuejs.org/)\n- [Vant UI文档](https://vant-contrib.gitee.io/vant/)\n- [Express.js官网](https://expressjs.com/)\n\n---\n\n**AI Magic** - 让AI图像处理更简单 ✨\n\n"
        }
    ]
}