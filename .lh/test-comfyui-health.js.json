{
    "sourceFile": "test-comfyui-health.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752548060935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752548060935,
            "name": "Commit-0",
            "content": "// ComfyUI健康检查测试脚本\n// 基于官方文档和实际请求信息进行测试\n\nconst testServerHealth = async (serverUrl) => {\n  console.log(`\\n🏥 测试ComfyUI服务器健康状态: ${serverUrl}`)\n  console.log('=' .repeat(60))\n\n  // 基于ComfyUI官方文档的端点列表\n  const testEndpoints = [\n    '/api/queue',        // ComfyUI官方队列端点\n    '/api/system_stats'  // ComfyUI官方系统状态端点\n  ]\n\n  const results = []\n\n  for (const endpoint of testEndpoints) {\n    const fullUrl = `${serverUrl.replace(/\\/$/, '')}${endpoint}`\n    console.log(`\\n🔍 测试端点: ${endpoint}`)\n    console.log(`   URL: ${fullUrl}`)\n\n    try {\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), 10000) // 10秒超时\n\n      const startTime = Date.now()\n      const response = await fetch(fullUrl, {\n        method: 'GET',\n        signal: controller.signal,\n        headers: {\n          'Accept': 'application/json, */*',\n          'Accept-Language': 'zh-CN,zh;q=0.9',\n          'Cache-Control': 'no-cache',\n          'comfy-user': 'health-test',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0 Safari/537.36'\n        },\n        mode: 'cors',\n        credentials: 'omit'\n      })\n\n      clearTimeout(timeoutId)\n      const responseTime = Date.now() - startTime\n\n      const result = {\n        endpoint,\n        status: response.status,\n        ok: response.ok,\n        responseTime,\n        contentType: response.headers.get('content-type'),\n        success: response.ok\n      }\n\n      if (response.ok) {\n        console.log(`   ✅ 状态: ${response.status} (${responseTime}ms)`)\n        console.log(`   📄 Content-Type: ${result.contentType}`)\n\n        // 尝试解析响应内容\n        try {\n          const contentType = response.headers.get('content-type')\n          if (contentType && contentType.includes('application/json')) {\n            const data = await response.json()\n            result.hasValidJson = true\n            result.dataSize = JSON.stringify(data).length\n            console.log(`   📊 JSON数据大小: ${result.dataSize} 字符`)\n\n            // 检查特定的ComfyUI响应特征\n            if (endpoint.includes('queue') && (data.queue_running !== undefined || data.queue_pending !== undefined)) {\n              result.isComfyUIQueue = true\n              console.log(`   🎯 确认为ComfyUI队列端点`)\n            }\n            if (endpoint.includes('system_stats') && data.system) {\n              result.isComfyUIStats = true\n              console.log(`   🎯 确认为ComfyUI系统状态端点`)\n            }\n          } else {\n            const text = await response.text()\n            result.hasValidJson = false\n            result.textLength = text.length\n            console.log(`   📄 文本响应长度: ${result.textLength} 字符`)\n          }\n        } catch (parseError) {\n          result.parseError = parseError.message\n          console.log(`   ⚠️ 响应解析失败: ${parseError.message}`)\n        }\n      } else {\n        console.log(`   ❌ 状态: ${response.status} ${response.statusText} (${responseTime}ms)`)\n        result.statusText = response.statusText\n      }\n\n      results.push(result)\n\n    } catch (error) {\n      console.log(`   💥 请求失败: ${error.message}`)\n      results.push({\n        endpoint,\n        success: false,\n        error: error.message,\n        errorType: error.name\n      })\n    }\n  }\n\n  // 汇总结果\n  console.log(`\\n📊 测试结果汇总`)\n  console.log('=' .repeat(60))\n\n  const successfulEndpoints = results.filter(r => r.success)\n  const comfyUIEndpoints = results.filter(r => r.isComfyUIQueue || r.isComfyUIStats)\n\n  console.log(`✅ 成功端点: ${successfulEndpoints.length}/${results.length}`)\n  console.log(`🎯 ComfyUI特征端点: ${comfyUIEndpoints.length}`)\n\n  if (successfulEndpoints.length > 0) {\n    console.log(`\\n🏆 推荐使用的端点:`)\n    successfulEndpoints\n      .sort((a, b) => {\n        // 优先ComfyUI特征端点，然后按响应时间排序\n        if (a.isComfyUIQueue || a.isComfyUIStats) return -1\n        if (b.isComfyUIQueue || b.isComfyUIStats) return 1\n        return a.responseTime - b.responseTime\n      })\n      .slice(0, 3)\n      .forEach((result, index) => {\n        console.log(`   ${index + 1}. ${result.endpoint} (${result.responseTime}ms)`)\n      })\n  }\n\n  // 判断服务器整体健康状态\n  const isHealthy = successfulEndpoints.length > 0 && comfyUIEndpoints.length > 0\n  console.log(`\\n🏥 服务器健康状态: ${isHealthy ? '✅ 健康' : '❌ 不健康'}`)\n\n  return {\n    serverUrl,\n    isHealthy,\n    successfulEndpoints: successfulEndpoints.length,\n    totalEndpoints: results.length,\n    comfyUIEndpoints: comfyUIEndpoints.length,\n    results\n  }\n}\n\n// 测试指定的服务器\nconst testServers = async () => {\n  const servers = [\n    'https://l9s75ay3rp-8188.cnb.run'\n    // 可以添加更多服务器进行测试\n  ]\n\n  for (const server of servers) {\n    await testServerHealth(server)\n  }\n}\n\n// 如果在Node.js环境中运行\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = { testServerHealth }\n\n  // 如果直接运行此脚本\n  if (require.main === module) {\n    testServers().catch(console.error)\n  }\n}\n\n// 如果在浏览器环境中运行\nif (typeof window !== 'undefined') {\n  window.testServerHealth = testServerHealth\n  console.log('🚀 ComfyUI健康检查工具已加载')\n  console.log('使用方法: testServerHealth(\"https://your-server-url\")')\n}\n"
        }
    ]
}